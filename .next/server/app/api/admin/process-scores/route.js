"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/admin/process-scores/route";
exports.ids = ["app/api/admin/process-scores/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("assert");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("buffer");

/***/ }),

/***/ "child_process":
/*!********************************!*\
  !*** external "child_process" ***!
  \********************************/
/***/ ((module) => {

module.exports = require("child_process");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "http2":
/*!************************!*\
  !*** external "http2" ***!
  \************************/
/***/ ((module) => {

module.exports = require("http2");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("net");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "process":
/*!**************************!*\
  !*** external "process" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("process");

/***/ }),

/***/ "querystring":
/*!******************************!*\
  !*** external "querystring" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("querystring");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("tls");

/***/ }),

/***/ "tty":
/*!**********************!*\
  !*** external "tty" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("tty");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "worker_threads":
/*!*********************************!*\
  !*** external "worker_threads" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("worker_threads");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "node:buffer":
/*!******************************!*\
  !*** external "node:buffer" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:buffer");

/***/ }),

/***/ "node:fs":
/*!**************************!*\
  !*** external "node:fs" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("node:fs");

/***/ }),

/***/ "node:http":
/*!****************************!*\
  !*** external "node:http" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("node:http");

/***/ }),

/***/ "node:https":
/*!*****************************!*\
  !*** external "node:https" ***!
  \*****************************/
/***/ ((module) => {

module.exports = require("node:https");

/***/ }),

/***/ "node:net":
/*!***************************!*\
  !*** external "node:net" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("node:net");

/***/ }),

/***/ "node:path":
/*!****************************!*\
  !*** external "node:path" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("node:path");

/***/ }),

/***/ "node:process":
/*!*******************************!*\
  !*** external "node:process" ***!
  \*******************************/
/***/ ((module) => {

module.exports = require("node:process");

/***/ }),

/***/ "node:stream":
/*!******************************!*\
  !*** external "node:stream" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:stream");

/***/ }),

/***/ "node:stream/web":
/*!**********************************!*\
  !*** external "node:stream/web" ***!
  \**********************************/
/***/ ((module) => {

module.exports = require("node:stream/web");

/***/ }),

/***/ "node:url":
/*!***************************!*\
  !*** external "node:url" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("node:url");

/***/ }),

/***/ "node:util":
/*!****************************!*\
  !*** external "node:util" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("node:util");

/***/ }),

/***/ "node:zlib":
/*!****************************!*\
  !*** external "node:zlib" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("node:zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fadmin%2Fprocess-scores%2Froute&page=%2Fapi%2Fadmin%2Fprocess-scores%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fprocess-scores%2Froute.ts&appDir=C%3A%5CUsers%5Carunm%5CDownloads%5Cjudge-dashboard-nextjs-v29-judgePanelv1%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Carunm%5CDownloads%5Cjudge-dashboard-nextjs-v29-judgePanelv1&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!**************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fadmin%2Fprocess-scores%2Froute&page=%2Fapi%2Fadmin%2Fprocess-scores%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fprocess-scores%2Froute.ts&appDir=C%3A%5CUsers%5Carunm%5CDownloads%5Cjudge-dashboard-nextjs-v29-judgePanelv1%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Carunm%5CDownloads%5Cjudge-dashboard-nextjs-v29-judgePanelv1&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_arunm_Downloads_judge_dashboard_nextjs_v29_judgePanelv1_app_api_admin_process_scores_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/admin/process-scores/route.ts */ \"(rsc)/./app/api/admin/process-scores/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/admin/process-scores/route\",\n        pathname: \"/api/admin/process-scores\",\n        filename: \"route\",\n        bundlePath: \"app/api/admin/process-scores/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\arunm\\\\Downloads\\\\judge-dashboard-nextjs-v29-judgePanelv1\\\\app\\\\api\\\\admin\\\\process-scores\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_arunm_Downloads_judge_dashboard_nextjs_v29_judgePanelv1_app_api_admin_process_scores_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/admin/process-scores/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZhZG1pbiUyRnByb2Nlc3Mtc2NvcmVzJTJGcm91dGUmcGFnZT0lMkZhcGklMkZhZG1pbiUyRnByb2Nlc3Mtc2NvcmVzJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGYWRtaW4lMkZwcm9jZXNzLXNjb3JlcyUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNhcnVubSU1Q0Rvd25sb2FkcyU1Q2p1ZGdlLWRhc2hib2FyZC1uZXh0anMtdjI5LWp1ZGdlUGFuZWx2MSU1Q2FwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9QyUzQSU1Q1VzZXJzJTVDYXJ1bm0lNUNEb3dubG9hZHMlNUNqdWRnZS1kYXNoYm9hcmQtbmV4dGpzLXYyOS1qdWRnZVBhbmVsdjEmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQytEO0FBQzVJO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsaUVBQWlFO0FBQ3pFO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDdUg7O0FBRXZIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8/NDY0MCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCJDOlxcXFxVc2Vyc1xcXFxhcnVubVxcXFxEb3dubG9hZHNcXFxcanVkZ2UtZGFzaGJvYXJkLW5leHRqcy12MjktanVkZ2VQYW5lbHYxXFxcXGFwcFxcXFxhcGlcXFxcYWRtaW5cXFxccHJvY2Vzcy1zY29yZXNcXFxccm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2FkbWluL3Byb2Nlc3Mtc2NvcmVzL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvYWRtaW4vcHJvY2Vzcy1zY29yZXNcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL2FkbWluL3Byb2Nlc3Mtc2NvcmVzL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiQzpcXFxcVXNlcnNcXFxcYXJ1bm1cXFxcRG93bmxvYWRzXFxcXGp1ZGdlLWRhc2hib2FyZC1uZXh0anMtdjI5LWp1ZGdlUGFuZWx2MVxcXFxhcHBcXFxcYXBpXFxcXGFkbWluXFxcXHByb2Nlc3Mtc2NvcmVzXFxcXHJvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS9hZG1pbi9wcm9jZXNzLXNjb3Jlcy9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBvcmlnaW5hbFBhdGhuYW1lLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fadmin%2Fprocess-scores%2Froute&page=%2Fapi%2Fadmin%2Fprocess-scores%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fprocess-scores%2Froute.ts&appDir=C%3A%5CUsers%5Carunm%5CDownloads%5Cjudge-dashboard-nextjs-v29-judgePanelv1%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Carunm%5CDownloads%5Cjudge-dashboard-nextjs-v29-judgePanelv1&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/admin/process-scores/route.ts":
/*!***********************************************!*\
  !*** ./app/api/admin/process-scores/route.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_google_sheets__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/google-sheets */ \"(rsc)/./lib/google-sheets.ts\");\n\n\nasync function POST(request) {\n    try {\n        const sheetsService = new _lib_google_sheets__WEBPACK_IMPORTED_MODULE_1__.GoogleSheetsService();\n        const classes = Object.keys(_lib_google_sheets__WEBPACK_IMPORTED_MODULE_1__.SPREADSHEET_CONFIG.CLASSES);\n        const allTopProjects = [];\n        for (const className of classes){\n            console.log(`Processing scores for ${className}...`);\n            await sheetsService.processClassScores(className);\n            const topProjects = await sheetsService.getTopProjects(className);\n            allTopProjects.push(...topProjects);\n        }\n        // Sort all top projects by standard and then by rank\n        allTopProjects.sort((a, b)=>{\n            if (a.standard < b.standard) return -1;\n            if (a.standard > b.standard) return 1;\n            return a.rank - b.rank;\n        });\n        await sheetsService.updateAdminSummary(allTopProjects);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            message: \"Scores and top projects updated for all standards.\",\n            timestamp: new Date().toISOString()\n        });\n    } catch (error) {\n        console.error(\"Error processing all scores:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: error.message || \"Failed to process all scores.\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL2FkbWluL3Byb2Nlc3Mtc2NvcmVzL3JvdXRlLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUEyQztBQUNtQztBQUd2RSxlQUFlRyxLQUFLQyxPQUFnQjtJQUN6QyxJQUFJO1FBQ0YsTUFBTUMsZ0JBQWdCLElBQUlKLG1FQUFtQkE7UUFDN0MsTUFBTUssVUFBVUMsT0FBT0MsSUFBSSxDQUFDTixrRUFBa0JBLENBQUNPLE9BQU87UUFDdEQsTUFBTUMsaUJBQXNDLEVBQUU7UUFFOUMsS0FBSyxNQUFNQyxhQUFhTCxRQUFTO1lBQy9CTSxRQUFRQyxHQUFHLENBQUMsQ0FBQyxzQkFBc0IsRUFBRUYsVUFBVSxHQUFHLENBQUM7WUFDbkQsTUFBTU4sY0FBY1Msa0JBQWtCLENBQUNIO1lBQ3ZDLE1BQU1JLGNBQWMsTUFBTVYsY0FBY1csY0FBYyxDQUFDTDtZQUN2REQsZUFBZU8sSUFBSSxJQUFJRjtRQUN6QjtRQUVBLHFEQUFxRDtRQUNyREwsZUFBZVEsSUFBSSxDQUFDLENBQUNDLEdBQUdDO1lBQ3RCLElBQUlELEVBQUVFLFFBQVEsR0FBR0QsRUFBRUMsUUFBUSxFQUFFLE9BQU8sQ0FBQztZQUNyQyxJQUFJRixFQUFFRSxRQUFRLEdBQUdELEVBQUVDLFFBQVEsRUFBRSxPQUFPO1lBQ3BDLE9BQU9GLEVBQUVHLElBQUksR0FBR0YsRUFBRUUsSUFBSTtRQUN4QjtRQUVBLE1BQU1qQixjQUFja0Isa0JBQWtCLENBQUNiO1FBRXZDLE9BQU9WLHFEQUFZQSxDQUFDd0IsSUFBSSxDQUFDO1lBQ3ZCQyxTQUFTO1lBQ1RDLFNBQVM7WUFDVEMsV0FBVyxJQUFJQyxPQUFPQyxXQUFXO1FBQ25DO0lBQ0YsRUFBRSxPQUFPQyxPQUFZO1FBQ25CbEIsUUFBUWtCLEtBQUssQ0FBQyxnQ0FBZ0NBO1FBQzlDLE9BQU85QixxREFBWUEsQ0FBQ3dCLElBQUksQ0FDdEI7WUFDRUMsU0FBUztZQUNUSyxPQUFPQSxNQUFNSixPQUFPLElBQUk7UUFDMUIsR0FDQTtZQUFFSyxRQUFRO1FBQUk7SUFFbEI7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9hcHAvYXBpL2FkbWluL3Byb2Nlc3Mtc2NvcmVzL3JvdXRlLnRzPzg3YjciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlc3BvbnNlIH0gZnJvbSBcIm5leHQvc2VydmVyXCI7XG5pbXBvcnQgeyBHb29nbGVTaGVldHNTZXJ2aWNlLCBTUFJFQURTSEVFVF9DT05GSUcgfSBmcm9tIFwiQC9saWIvZ29vZ2xlLXNoZWV0c1wiO1xuaW1wb3J0IHsgdHlwZSBUb3BQcm9qZWN0U3VtbWFyeSB9IGZyb20gXCJAL2FwcC9hZG1pbi1kYXNoYm9hcmQvcGFnZVwiO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gUE9TVChyZXF1ZXN0OiBSZXF1ZXN0KSB7XG4gIHRyeSB7XG4gICAgY29uc3Qgc2hlZXRzU2VydmljZSA9IG5ldyBHb29nbGVTaGVldHNTZXJ2aWNlKCk7XG4gICAgY29uc3QgY2xhc3NlcyA9IE9iamVjdC5rZXlzKFNQUkVBRFNIRUVUX0NPTkZJRy5DTEFTU0VTKTtcbiAgICBjb25zdCBhbGxUb3BQcm9qZWN0czogVG9wUHJvamVjdFN1bW1hcnlbXSA9IFtdO1xuXG4gICAgZm9yIChjb25zdCBjbGFzc05hbWUgb2YgY2xhc3Nlcykge1xuICAgICAgY29uc29sZS5sb2coYFByb2Nlc3Npbmcgc2NvcmVzIGZvciAke2NsYXNzTmFtZX0uLi5gKTtcbiAgICAgIGF3YWl0IHNoZWV0c1NlcnZpY2UucHJvY2Vzc0NsYXNzU2NvcmVzKGNsYXNzTmFtZSk7XG4gICAgICBjb25zdCB0b3BQcm9qZWN0cyA9IGF3YWl0IHNoZWV0c1NlcnZpY2UuZ2V0VG9wUHJvamVjdHMoY2xhc3NOYW1lKTtcbiAgICAgIGFsbFRvcFByb2plY3RzLnB1c2goLi4udG9wUHJvamVjdHMpO1xuICAgIH1cblxuICAgIC8vIFNvcnQgYWxsIHRvcCBwcm9qZWN0cyBieSBzdGFuZGFyZCBhbmQgdGhlbiBieSByYW5rXG4gICAgYWxsVG9wUHJvamVjdHMuc29ydCgoYSwgYikgPT4ge1xuICAgICAgaWYgKGEuc3RhbmRhcmQgPCBiLnN0YW5kYXJkKSByZXR1cm4gLTE7XG4gICAgICBpZiAoYS5zdGFuZGFyZCA+IGIuc3RhbmRhcmQpIHJldHVybiAxO1xuICAgICAgcmV0dXJuIGEucmFuayAtIGIucmFuaztcbiAgICB9KTtcblxuICAgIGF3YWl0IHNoZWV0c1NlcnZpY2UudXBkYXRlQWRtaW5TdW1tYXJ5KGFsbFRvcFByb2plY3RzKTtcblxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgbWVzc2FnZTogXCJTY29yZXMgYW5kIHRvcCBwcm9qZWN0cyB1cGRhdGVkIGZvciBhbGwgc3RhbmRhcmRzLlwiLFxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgcHJvY2Vzc2luZyBhbGwgc2NvcmVzOlwiLCBlcnJvcik7XG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAge1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgZXJyb3I6IGVycm9yLm1lc3NhZ2UgfHwgXCJGYWlsZWQgdG8gcHJvY2VzcyBhbGwgc2NvcmVzLlwiLFxuICAgICAgfSxcbiAgICAgIHsgc3RhdHVzOiA1MDAgfSxcbiAgICApO1xuICB9XG59XG4iXSwibmFtZXMiOlsiTmV4dFJlc3BvbnNlIiwiR29vZ2xlU2hlZXRzU2VydmljZSIsIlNQUkVBRFNIRUVUX0NPTkZJRyIsIlBPU1QiLCJyZXF1ZXN0Iiwic2hlZXRzU2VydmljZSIsImNsYXNzZXMiLCJPYmplY3QiLCJrZXlzIiwiQ0xBU1NFUyIsImFsbFRvcFByb2plY3RzIiwiY2xhc3NOYW1lIiwiY29uc29sZSIsImxvZyIsInByb2Nlc3NDbGFzc1Njb3JlcyIsInRvcFByb2plY3RzIiwiZ2V0VG9wUHJvamVjdHMiLCJwdXNoIiwic29ydCIsImEiLCJiIiwic3RhbmRhcmQiLCJyYW5rIiwidXBkYXRlQWRtaW5TdW1tYXJ5IiwianNvbiIsInN1Y2Nlc3MiLCJtZXNzYWdlIiwidGltZXN0YW1wIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwiZXJyb3IiLCJzdGF0dXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./app/api/admin/process-scores/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/google-sheets.ts":
/*!******************************!*\
  !*** ./lib/google-sheets.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GOOGLE_SHEETS_CONFIG: () => (/* binding */ GOOGLE_SHEETS_CONFIG),\n/* harmony export */   GoogleSheetsService: () => (/* binding */ GoogleSheetsService),\n/* harmony export */   SPREADSHEET_CONFIG: () => (/* binding */ SPREADSHEET_CONFIG),\n/* harmony export */   googleSheetsService: () => (/* binding */ googleSheetsService)\n/* harmony export */ });\n/* harmony import */ var google_auth_library__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! google-auth-library */ \"(rsc)/./node_modules/google-auth-library/build/src/index.js\");\n/* harmony import */ var googleapis__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! googleapis */ \"(rsc)/./node_modules/googleapis/build/src/index.js\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n\nconst CLASS_SHEET_IDS_PATH = path__WEBPACK_IMPORTED_MODULE_2__.resolve(process.cwd(), \"config/class-sheet-ids.json\");\nfunction loadClassSheetIds() {\n    try {\n        const raw = fs__WEBPACK_IMPORTED_MODULE_1__.readFileSync(CLASS_SHEET_IDS_PATH, \"utf-8\");\n        return JSON.parse(raw);\n    } catch  {\n        return {};\n    }\n}\nfunction saveClassSheetIds(ids) {\n    fs__WEBPACK_IMPORTED_MODULE_1__.writeFileSync(CLASS_SHEET_IDS_PATH, JSON.stringify(ids, null, 2), \"utf-8\");\n}\n// Configuration for Google Sheets API\nconst GOOGLE_SHEETS_CONFIG = {\n    serviceAccountKeyPath: process.env.GOOGLE_SERVICE_ACCOUNT_KEY_PATH || \"./config/service-account-key.json\",\n    scopes: [\n        \"https://www.googleapis.com/auth/spreadsheets\"\n    ]\n};\n// Spreadsheet configurations - changed to 'let' to allow dynamic updates for demonstration\nconst persistedIds = loadClassSheetIds();\nlet SPREADSHEET_CONFIG = {\n    CREDENTIALS: {\n        id: process.env.CREDENTIALS_SPREADSHEET_ID || \"1snk-FZaxyZbSu_Ww-oPnam8JxZ2RLg3etI5TBkr-T1A\",\n        range: \"Sheet1!A:C\"\n    },\n    ADMIN_MASTER: {\n        id: process.env.ADMIN_MASTER_SPREADSHEET_ID || \"1snk-FZaxyZbSu_Ww-oPnam8JxZ2RLg3etI5TBkr-T1A\"\n    },\n    CLASSES: {\n        \"Class 4\": {\n            id: persistedIds[\"Class 4\"],\n            baseSheet: \"BaseSheet\",\n            range: \"Sheet1!A:F\"\n        },\n        \"Class 5\": {\n            id: persistedIds[\"Class 5\"],\n            baseSheet: \"BaseSheet\",\n            range: \"Sheet1!A:F\"\n        },\n        \"Class 6\": {\n            id: persistedIds[\"Class 6\"],\n            baseSheet: \"BaseSheet\",\n            range: \"Sheet1!A:F\"\n        },\n        \"Class 7\": {\n            id: persistedIds[\"Class 7\"],\n            baseSheet: \"BaseSheet\",\n            range: \"Sheet1!A:F\"\n        },\n        \"Class 8\": {\n            id: persistedIds[\"Class 8\"],\n            baseSheet: \"BaseSheet\",\n            range: \"Sheet1!A:F\"\n        },\n        \"Class 9\": {\n            id: persistedIds[\"Class 9\"],\n            baseSheet: \"BaseSheet\",\n            range: \"Sheet1!A:F\"\n        },\n        \"Class 10\": {\n            id: persistedIds[\"Class 10\"],\n            baseSheet: \"BaseSheet\",\n            range: \"Sheet1!A:F\"\n        },\n        \"Class 11\": {\n            id: persistedIds[\"Class 11\"],\n            baseSheet: \"BaseSheet\",\n            range: \"Sheet1!A:F\"\n        },\n        \"Class 12\": {\n            id: persistedIds[\"Class 12\"],\n            baseSheet: \"BaseSheet\",\n            range: \"Sheet1!A:F\"\n        }\n    }\n};\nclass GoogleSheetsService {\n    constructor(){\n        // Handle both file path and base64 encoded key for deployment\n        if (process.env.GOOGLE_SERVICE_ACCOUNT_KEY_BASE64) {\n            const keyData = Buffer.from(process.env.GOOGLE_SERVICE_ACCOUNT_KEY_BASE64, \"base64\").toString(\"utf8\");\n            const keyPath = \"/tmp/service-account-key.json\" // Vercel /tmp directory is writable\n            ;\n            fs__WEBPACK_IMPORTED_MODULE_1__.writeFileSync(keyPath, keyData);\n            this.auth = new google_auth_library__WEBPACK_IMPORTED_MODULE_0__.GoogleAuth({\n                keyFile: keyPath,\n                scopes: GOOGLE_SHEETS_CONFIG.scopes\n            });\n        } else {\n            this.auth = new google_auth_library__WEBPACK_IMPORTED_MODULE_0__.GoogleAuth({\n                keyFile: GOOGLE_SHEETS_CONFIG.serviceAccountKeyPath,\n                scopes: GOOGLE_SHEETS_CONFIG.scopes\n            });\n        }\n        this.sheets = googleapis__WEBPACK_IMPORTED_MODULE_3__.google.sheets({\n            version: \"v4\",\n            auth: this.auth\n        });\n    }\n    async getSheetData(spreadsheetId, range) {\n        try {\n            console.log(`🔗 Fetching data from Google Sheets: ${spreadsheetId}, Range: ${range}`);\n            const response = await this.sheets.spreadsheets.values.get({\n                spreadsheetId,\n                range\n            });\n            return {\n                values: response.data.values || [],\n                range,\n                spreadsheetId\n            };\n        } catch (error) {\n            console.error(\"Error fetching sheet data:\", error);\n            throw new Error(`Failed to fetch data from spreadsheet ${spreadsheetId}. Please check permissions and spreadsheet ID.`);\n        }\n    }\n    async batchGetSheetData(spreadsheetId, ranges) {\n        try {\n            const response = await this.sheets.spreadsheets.values.batchGet({\n                spreadsheetId,\n                ranges\n            });\n            const result = {};\n            (response.data.valueRanges || []).forEach((valueRange)=>{\n                result[valueRange.range] = valueRange.values || [];\n            });\n            return result;\n        } catch (error) {\n            console.error(\"Error in batchGetSheetData:\", error);\n            throw new Error(`Failed to batch get data from spreadsheet ${spreadsheetId}.`);\n        }\n    }\n    async getCredentials() {\n        try {\n            const data = await this.getSheetData(SPREADSHEET_CONFIG.CREDENTIALS.id, SPREADSHEET_CONFIG.CREDENTIALS.range);\n            if (!data.values || data.values.length === 0) {\n                throw new Error(\"No credentials found in the spreadsheet\");\n            }\n            // Skip header row and map to credential objects\n            return data.values.slice(1).map((row)=>({\n                    username: row[0] || \"\",\n                    password: row[1] || \"\",\n                    role: row[2] || \"\"\n                })).filter((cred)=>cred.username && cred.password && cred.role);\n        } catch (error) {\n            console.error(\"Error fetching credentials:\", error);\n            throw new Error(\"Failed to fetch credentials from Google Sheets\");\n        }\n    }\n    async getProjectIds(className) {\n        try {\n            const classConfig = this.getClassConfig(className);\n            if (!classConfig) {\n                throw new Error(`No configuration found for class: ${className}`);\n            }\n            const data = await this.getSheetData(classConfig.id, classConfig.range);\n            if (!data.values || data.values.length === 0) {\n                return [];\n            }\n            // Skip header row and extract Project IDs from column E (index 4)\n            const projectIds = data.values.slice(1) // Skip header row\n            .map((row)=>row[4]) // Column E (Project ID) is at index 4\n            .filter((id)=>id && id.trim() !== \"\") // Remove empty cells\n            .map((id)=>id.trim()) // Clean whitespace\n            ;\n            // Return unique project IDs only\n            return [\n                ...new Set(projectIds)\n            ];\n        } catch (error) {\n            console.error(`Error fetching project IDs for ${className}:`, error);\n            throw new Error(`Failed to fetch project IDs for ${className} from Google Sheets`);\n        }\n    }\n    async getStudentsByProjectId(className, projectId) {\n        try {\n            const classConfig = this.getClassConfig(className);\n            if (!classConfig) {\n                throw new Error(`No configuration found for class: ${className}`);\n            }\n            const data = await this.getSheetData(classConfig.id, classConfig.range);\n            if (!data.values || data.values.length === 0) {\n                return [];\n            }\n            // Skip header row and filter by Project ID\n            const students = data.values.slice(1) // Skip header row\n            .filter((row)=>row[4] && row[4].trim() === projectId.trim()) // Filter by Project ID\n            .map((row)=>({\n                    sno: row[0] || \"\",\n                    studentName: row[1] || \"\",\n                    grade: row[2] || \"\",\n                    projectTitle: row[3] || \"\",\n                    projectId: row[4] || \"\",\n                    theme: row[5] || \"\"\n                })).filter((student)=>student.studentName && student.projectId);\n            return students;\n        } catch (error) {\n            console.error(`Error fetching students for project ${projectId}:`, error);\n            throw new Error(`Failed to fetch students for project ${projectId} from Google Sheets`);\n        }\n    }\n    async getJudgeScores(className, judgeName, projectId) {\n        try {\n            const classConfig = this.getClassConfig(className);\n            if (!classConfig) {\n                throw new Error(`No configuration found for class: ${className}`);\n            }\n            const judgeSheetName = `Judge_${judgeName}`;\n            const judgeRange = `${judgeSheetName}!A:K` // Updated range to include Theme Fit (assuming column K)\n            ;\n            try {\n                const data = await this.getSheetData(classConfig.id, judgeRange);\n                if (!data.values || data.values.length === 0) {\n                    return [];\n                }\n                // Skip header row and optionally filter by Project ID\n                let scores = data.values.slice(1) // Skip header row\n                .map((row)=>({\n                        sno: row[0] || \"\",\n                        studentName: row[1] || \"\",\n                        grade: row[2] || \"\",\n                        projectTitle: row[3] || \"\",\n                        projectId: row[4] || \"\",\n                        creativity: row[5] ? Number.parseFloat(row[5]) : null,\n                        scientificThought: row[6] ? Number.parseFloat(row[6]) : null,\n                        technicalSkills: row[7] ? Number.parseFloat(row[7]) : null,\n                        presentation: row[8] ? Number.parseFloat(row[8]) : null,\n                        status: row[9] || \"Present\",\n                        themeFit: row[10] || null\n                    }));\n                console.log(`🔗 Fetched ${scores.length} scores from ${judgeSheetName} for class ${className}`);\n                // Filter by project ID if specified\n                if (projectId) {\n                    scores = scores.filter((score)=>score.projectId.trim() === projectId.trim());\n                }\n                return scores;\n            } catch (error) {\n                // Judge sheet doesn't exist yet or is empty, which is fine for initial fetch\n                console.log(`Judge sheet ${judgeSheetName} doesn't exist yet or is empty.`);\n                return [];\n            }\n        } catch (error) {\n            console.error(`Error fetching judge scores:`, error);\n            throw new Error(`Failed to fetch judge scores from Google Sheets`);\n        }\n    }\n    async saveJudgeScores(className, judgeName, scores) {\n        try {\n            const classConfig = this.getClassConfig(className);\n            if (!classConfig) {\n                throw new Error(`No configuration found for class: ${className}`);\n            }\n            const judgeSheetName = `Judge_${judgeName}`;\n            const judgeHeaderRow = [\n                \"S.No.\",\n                \"Name of the Student\",\n                \"Grade\",\n                \"Project Title\",\n                \"Project ID\",\n                \"Creativity & Imagination\",\n                \"Scientific Thought\",\n                \"Technical Skills\",\n                \"Presentation\",\n                \"Status\",\n                \"Theme Fit\"\n            ];\n            // Ensure judge sheet exists and has header\n            await this.ensureSheetExists(classConfig.id, judgeSheetName, judgeHeaderRow);\n            // Prepare new score rows for appending\n            const newRows = scores.map((score)=>[\n                    score.sno,\n                    score.studentName,\n                    score.grade,\n                    score.projectTitle,\n                    score.projectId,\n                    score.creativity?.toString() || \"\",\n                    score.scientificThought?.toString() || \"\",\n                    score.technicalSkills?.toString() || \"\",\n                    score.presentation?.toString() || \"\",\n                    score.status || \"Present\",\n                    score.themeFit || \"\"\n                ]);\n            // Append new scores (never overwrite)\n            await this.sheets.spreadsheets.values.append({\n                spreadsheetId: classConfig.id,\n                range: `${judgeSheetName}!A:K`,\n                valueInputOption: \"USER_ENTERED\",\n                resource: {\n                    values: newRows\n                }\n            });\n            console.log(`✅ Appended ${newRows.length} new score rows to ${judgeSheetName}`);\n        } catch (error) {\n            console.error(`Error appending judge scores:`, error);\n            throw new Error(`Failed to append judge scores to Google Sheets`);\n        }\n    }\n    async getExistingJudgeData(spreadsheetId, sheetName) {\n        try {\n            const response = await this.sheets.spreadsheets.values.get({\n                spreadsheetId,\n                range: `${sheetName}!A:K`\n            });\n            return response.data.values || [];\n        } catch (error) {\n            // Sheet doesn't exist or is empty\n            return [];\n        }\n    }\n    async ensureSheetExists(spreadsheetId, sheetName, headerRow) {\n        try {\n            const spreadsheet = await this.sheets.spreadsheets.get({\n                spreadsheetId: spreadsheetId,\n                fields: \"sheets.properties.title,sheets.properties.sheetId\"\n            });\n            const sheetExists = spreadsheet.data.sheets?.some((sheet)=>sheet.properties.title === sheetName);\n            if (!sheetExists) {\n                await this.sheets.spreadsheets.batchUpdate({\n                    spreadsheetId: spreadsheetId,\n                    resource: {\n                        requests: [\n                            {\n                                addSheet: {\n                                    properties: {\n                                        title: sheetName\n                                    }\n                                }\n                            }\n                        ]\n                    }\n                });\n                console.log(`✅ Created new sheet: ${sheetName} in spreadsheet ${spreadsheetId}`);\n                // If header row is provided, write it\n                if (headerRow && headerRow.length > 0) {\n                    await this.sheets.spreadsheets.values.append({\n                        spreadsheetId: spreadsheetId,\n                        range: `${sheetName}!A1`,\n                        valueInputOption: \"USER_ENTERED\",\n                        resource: {\n                            values: [\n                                headerRow\n                            ]\n                        }\n                    });\n                    console.log(`✅ Added header to new sheet: ${sheetName}`);\n                }\n            }\n        } catch (error) {\n            console.error(`Error ensuring sheet ${sheetName} exists in ${spreadsheetId}:`, error);\n            throw new Error(`Failed to create or verify sheet: ${sheetName}`);\n        }\n    }\n    async getAllSheetTitles(spreadsheetId) {\n        try {\n            const response = await this.sheets.spreadsheets.get({\n                spreadsheetId: spreadsheetId,\n                fields: \"sheets.properties.title\"\n            });\n            return response.data.sheets?.map((sheet)=>sheet.properties.title) || [];\n        } catch (error) {\n            console.error(`Error fetching sheet titles for ${spreadsheetId}:`, error);\n            throw new Error(`Failed to fetch sheet titles for spreadsheet ${spreadsheetId}.`);\n        }\n    }\n    async getAllJudgeSheetNames(classSpreadsheetId) {\n        const allSheetTitles = await this.getAllSheetTitles(classSpreadsheetId);\n        return allSheetTitles.filter((title)=>title.startsWith(\"Judge_\"));\n    }\n    async getProjectDetailsMap(className) {\n        const classConfig = this.getClassConfig(className);\n        if (!classConfig) {\n            throw new Error(`No configuration found for class: ${className}`);\n        }\n        const data = await this.getSheetData(classConfig.id, classConfig.range) // Reads Sheet1!A:F\n        ;\n        const projectMap = new Map();\n        if (data.values && data.values.length > 1) {\n            // Skip header\n            data.values.slice(1).forEach((row)=>{\n                const projectId = row[4]?.trim() // Column E\n                ;\n                const projectTitle = row[3]?.trim() // Column D\n                ;\n                const theme = row[5]?.trim() // Column F\n                ;\n                const studentName = row[1]?.trim() // Column B\n                ;\n                if (projectId) {\n                    if (!projectMap.has(projectId)) {\n                        projectMap.set(projectId, {\n                            title: projectTitle || \"\",\n                            theme: theme || \"\",\n                            studentNames: new Set()\n                        });\n                    }\n                    if (studentName) {\n                        projectMap.get(projectId)?.studentNames.add(studentName);\n                    }\n                }\n            });\n        }\n        return projectMap;\n    }\n    async processClassScores(className) {\n        const classConfig = this.getClassConfig(className);\n        if (!classConfig) {\n            throw new Error(`No configuration found for class: ${className}`);\n        }\n        const classSpreadsheetId = classConfig.id;\n        const projectDetailsMap = await this.getProjectDetailsMap(className);\n        console.log(`[${className}] Found ${projectDetailsMap.size} unique projects from BaseSheet.`);\n        const judgeSheetNames = await this.getAllJudgeSheetNames(classSpreadsheetId);\n        console.log(`[${className}] Found ${judgeSheetNames.length} judge sheets.`);\n        // Map to store the latest score for each project by each judge\n        const latestProjectScoresByJudge = new Map() // projectId -> (judgeName -> latestScore)\n        ;\n        const judgeRanges = judgeSheetNames.map((judgeSheetName)=>`${judgeSheetName}!A:K`);\n        console.log(\"judgeRangeMAddy\");\n        console.log(`[${className}] Fetching data for judgeRangeMAddy sheets: ${judgeRanges}`);\n        const batchData = await this.batchGetSheetData(classSpreadsheetId, judgeRanges);\n        console.log(\"batchData:\", JSON.stringify(batchData, null, 2));\n        console.log(`[${className}] FetchedMaddy data for ${judgeRanges.length} ${judgeRanges} ${batchData} judge sheets in batch.`);\n        for (const judgeSheetName of judgeSheetNames){\n            console.log(`[${className}] Processing judge sheet maddy: ${judgeSheetName}`);\n            const judgeName = judgeSheetName.replace(\"Judge_\", \"\");\n            const values = batchData[`${judgeSheetName}!A1:K1000`] || [];\n            console.log(`[${className}] FoundMAddys ${values.length} rows in sheet ${judgeSheetName} for Judge ${judgeName}.`);\n            if (values.length <= 1) continue; // skip if only header or empty\n            // Parse scores as in getJudgeScores\n            const scoresForJudge = values.slice(1).map((row)=>({\n                    sno: row[0] || \"\",\n                    studentName: row[1] || \"\",\n                    grade: row[2] || \"\",\n                    projectTitle: row[3] || \"\",\n                    projectId: row[4] || \"\",\n                    creativity: row[5] ? Number.parseFloat(row[5]) : null,\n                    scientificThought: row[6] ? Number.parseFloat(row[6]) : null,\n                    technicalSkills: row[7] ? Number.parseFloat(row[7]) : null,\n                    presentation: row[8] ? Number.parseFloat(row[8]) : null,\n                    status: row[9] || \"Present\",\n                    themeFit: row[10] || null\n                }));\n            console.log(`[${className}] FoundMaddy ${scoresForJudge.length} scores for Judge ${judgeName} in sheet ${judgeSheetName}.`);\n            for (const score of scoresForJudge){\n                const pId = score.projectId.trim();\n                console.log(`[${className}] Processing score for Project ${pId} by Judge ${judgeName}:`, score);\n                if (!latestProjectScoresByJudge.has(pId)) {\n                    latestProjectScoresByJudge.set(pId, new Map());\n                }\n                latestProjectScoresByJudge.get(pId)?.set(judgeName, score);\n            }\n        }\n        console.log(`[${className}] Collected latest scores for projects from each judge.`);\n        console.log(`[${className}] latestProjectScoresByJudge for a sample project (e.g., P4001):`, latestProjectScoresByJudge.get(\"P4001\"));\n        // Aggregate scores per project\n        const projectAggregatedScores = {};\n        // Initialize projectAggregatedScores with details from BaseSheet\n        for (const [pId, details] of projectDetailsMap.entries()){\n            projectAggregatedScores[pId] = {\n                projectTitle: details.title,\n                theme: details.theme,\n                creativitySum: 0,\n                scientificThoughtSum: 0,\n                technicalSkillsSum: 0,\n                presentationSum: 0,\n                judgeCount: 0,\n                absentCount: 0,\n                studentNames: Array.from(details.studentNames).sort()\n            };\n        }\n        // Populate aggregated scores from judge submissions\n        for (const [pId, judgeScoresMap] of latestProjectScoresByJudge.entries()){\n            console.log(`[${className}] Processing scores for Project ${pId} from judges:`, Array.from(judgeScoresMap.keys()));\n            console.log(`[${className}] judgeScoresMap for Project ${pId} has ${judgeScoresMap.size} entries.`);\n            if (!projectAggregatedScores[pId]) {\n                // This project was scored but not found in BaseSheet (e.g., if BaseSheet is incomplete)\n                // Try to get details from the first score entry for this project\n                const firstScore = Array.from(judgeScoresMap.values())[0];\n                projectAggregatedScores[pId] = {\n                    projectTitle: firstScore?.projectTitle || \"\",\n                    theme: projectDetailsMap.get(pId)?.theme || \"\",\n                    creativitySum: 0,\n                    scientificThoughtSum: 0,\n                    technicalSkillsSum: 0,\n                    presentationSum: 0,\n                    judgeCount: 0,\n                    absentCount: 0,\n                    studentNames: []\n                };\n                console.warn(`[${className}] Project ${pId} found in judge sheets but not in BaseSheet. Student names might be incomplete.`);\n            }\n            for (const [judgeName, score] of judgeScoresMap.entries()){\n                if (score.status === \"Absent\") {\n                    console.log(`[${className}] Judge ${judgeName} marked Project ${pId} as Absent.`);\n                    projectAggregatedScores[pId].absentCount++;\n                } else {\n                    // Present\n                    console.log(`[${className}] Adding score for Project ${pId} by Judge ${judgeName}: Creativity=${score.creativity}, ScientificThought=${score.scientificThought}, TechnicalSkills=${score.technicalSkills}, Presentation=${score.presentation}`);\n                    projectAggregatedScores[pId].judgeCount++;\n                    projectAggregatedScores[pId].creativitySum += score.creativity || 0;\n                    projectAggregatedScores[pId].scientificThoughtSum += score.scientificThought || 0;\n                    projectAggregatedScores[pId].technicalSkillsSum += score.technicalSkills || 0;\n                    projectAggregatedScores[pId].presentationSum += score.presentation || 0;\n                }\n            }\n        }\n        console.log(`[${className}] Aggregation complete for project scores.`);\n        console.log(`[${className}] projectAggregatedScores for a sample project (e.g., P4001):`, projectAggregatedScores[\"P4001\"]);\n        // Calculate project averages and prepare rows for \"Score\" tab\n        const scoreTabRows = [];\n        scoreTabRows.push([\n            \"Project ID\",\n            \"Project Title\",\n            \"Theme\",\n            \"Avg Creativity\",\n            \"Avg Scientific Thought\",\n            \"Avg Technical Skills\",\n            \"Avg Presentation\",\n            \"Project Average Score\",\n            \"Student Names\"\n        ]) // New Header for Score tab\n        ;\n        const projectsForScoreTab = [];\n        for(const pId in projectAggregatedScores){\n            const projectData = projectAggregatedScores[pId];\n            let avgCreativity = 0;\n            let avgScientificThought = 0;\n            let avgTechnicalSkills = 0;\n            let avgPresentation = 0;\n            let projectAvgScore = 0;\n            if (projectData.judgeCount > 0) {\n                avgCreativity = projectData.creativitySum / projectData.judgeCount;\n                avgScientificThought = projectData.scientificThoughtSum / projectData.judgeCount;\n                avgTechnicalSkills = projectData.technicalSkillsSum / projectData.judgeCount;\n                avgPresentation = projectData.presentationSum / projectData.judgeCount;\n                projectAvgScore = (avgCreativity + avgScientificThought + avgTechnicalSkills + avgPresentation) / 4;\n            } else if (projectData.absentCount > 0 && projectData.judgeCount === 0) {\n                // All judges marked project absent, so all scores are 0\n                avgCreativity = 0;\n                avgScientificThought = 0;\n                avgTechnicalSkills = 0;\n                avgPresentation = 0;\n                projectAvgScore = 0;\n            }\n            // If no judges scored the project (judgeCount and absentCount are 0), all averages remain 0 (initialized)\n            projectsForScoreTab.push({\n                projectId: pId,\n                projectTitle: projectData.projectTitle,\n                theme: projectData.theme,\n                avgCreativity: avgCreativity,\n                avgScientificThought: avgScientificThought,\n                avgTechnicalSkills: avgTechnicalSkills,\n                avgPresentation: avgPresentation,\n                projectAvgScore: projectAvgScore,\n                studentNames: projectData.studentNames.join(\", \")\n            });\n        }\n        // Sort projects for the Score tab by Project ID for consistent ordering\n        projectsForScoreTab.sort((a, b)=>a.projectId.localeCompare(b.projectId));\n        projectsForScoreTab.forEach((project)=>{\n            scoreTabRows.push([\n                project.projectId,\n                project.projectTitle,\n                project.theme,\n                project.avgCreativity.toFixed(2),\n                project.avgScientificThought.toFixed(2),\n                project.avgTechnicalSkills.toFixed(2),\n                project.avgPresentation.toFixed(2),\n                project.projectAvgScore.toFixed(2),\n                project.studentNames\n            ]);\n        });\n        console.log(`[${className}] Prepared ${scoreTabRows.length - 1} rows for \"Score\" tab (excluding header).`);\n        console.log(`[${className}] Final scoreTabRows before writing:`, scoreTabRows);\n        const scoreSheetName = \"Score\";\n        await this.ensureSheetExists(classSpreadsheetId, scoreSheetName, scoreTabRows[0]) // Pass header for creation\n        ;\n        // Clear existing content before writing new data (excluding header)\n        await this.sheets.spreadsheets.values.clear({\n            spreadsheetId: classSpreadsheetId,\n            range: `${scoreSheetName}!A2:I`\n        });\n        // Write new data (including header)\n        if (scoreTabRows.length > 1) {\n            // Only update if there's data beyond the header\n            await this.sheets.spreadsheets.values.update({\n                spreadsheetId: classSpreadsheetId,\n                range: `${scoreSheetName}!A1`,\n                valueInputOption: \"USER_ENTERED\",\n                resource: {\n                    values: scoreTabRows\n                }\n            });\n            console.log(`✅ Updated \"Score\" tab for ${className} with ${scoreTabRows.length - 1} project average entries.`);\n        } else {\n            console.log(`[${className}] No project average scores to write to \"Score\" tab.`);\n        }\n    }\n    async getTopProjects(className) {\n        const classConfig = this.getClassConfig(className);\n        if (!classConfig) {\n            throw new Error(`No configuration found for class: ${className}`);\n        }\n        const scoreSheetName = \"Score\";\n        const scoreRange = `${scoreSheetName}!A:I` // Updated range for new Score tab columns\n        ;\n        try {\n            const data = await this.getSheetData(classConfig.id, scoreRange);\n            console.log(`[${className}] Read \"Score\" tab for top projects. Rows fetched: ${data.values.length}.`);\n            if (!data.values || data.values.length <= 1) {\n                // No data or only header\n                console.log(`[${className}] \"Score\" tab is empty or only has header. No projects to rank.`);\n                return [];\n            }\n            const projects = [];\n            data.values.slice(1).forEach((row)=>{\n                const projectId = row[0]?.trim() // Project ID is now column A\n                ;\n                const projectTitle = row[1]?.trim() // Project Title is now column B\n                ;\n                const theme = row[2]?.trim() // Theme is now column C\n                ;\n                const projectAvgScore = Number.parseFloat(row[7]) || 0 // Project Average Score is now column H (index 7)\n                ;\n                const studentNames = row[8]?.trim() || \"\" // Student Names is now column I (index 8)\n                ;\n                if (projectId) {\n                    projects.push({\n                        projectId: projectId,\n                        projectTitle: projectTitle,\n                        theme: theme,\n                        projectAvgScore: projectAvgScore,\n                        studentNames: studentNames\n                    });\n                } else {\n                    console.warn(`[${className}] Skipping row in \"Score\" tab for top projects due to missing Project ID: ${row.join(\", \")}`);\n                }\n            });\n            console.log(`[${className}] Parsed ${projects.length} projects from \"Score\" tab.`);\n            // Sort by project average score descending\n            projects.sort((a, b)=>b.projectAvgScore - a.projectAvgScore);\n            console.log(`[${className}] Projects sorted by average score.`);\n            const topProjects = [];\n            let currentRank = 1;\n            let projectsAdded = 0;\n            for(let i = 0; i < projects.length; i++){\n                const project = projects[i];\n                if (projectsAdded < 3) {\n                    topProjects.push({\n                        ...project,\n                        standard: className,\n                        rank: currentRank\n                    });\n                    projectsAdded++;\n                } else if (project.projectAvgScore === topProjects[topProjects.length - 1].projectAvgScore) {\n                    // Handle ties for 3rd place\n                    topProjects.push({\n                        ...project,\n                        standard: className,\n                        rank: currentRank\n                    });\n                } else {\n                    break; // Stop after top 3 (and ties)\n                }\n                // Update rank for next distinct score, only if current project's score is different from the last added project's score\n                if (i < projects.length - 1 && projects[i + 1].projectAvgScore < project.projectAvgScore) {\n                    currentRank = topProjects.length + 1;\n                }\n            }\n            console.log(`[${className}] Identified ${topProjects.length} top projects.`);\n            return topProjects;\n        } catch (error) {\n            console.error(`Error getting top projects for ${className}:`, error);\n            throw new Error(`Failed to get top projects for ${className}.`);\n        }\n    }\n    async updateAdminSummary(summaryData) {\n        const adminMasterSheetId = SPREADSHEET_CONFIG.ADMIN_MASTER.id;\n        const summarySheetName = \"Summary\";\n        const summaryHeader = [\n            \"Standard\",\n            \"Rank\",\n            \"Project ID\",\n            \"Project Title\",\n            \"Theme\",\n            \"Project Avg Score\",\n            \"Student Names\"\n        ] // Added Student Names\n        ;\n        await this.ensureSheetExists(adminMasterSheetId, summarySheetName, summaryHeader);\n        // Clear existing content in Summary tab (excluding header)\n        await this.sheets.spreadsheets.values.clear({\n            spreadsheetId: adminMasterSheetId,\n            range: `${summarySheetName}!A2:G`\n        });\n        if (summaryData.length === 0) {\n            console.log(\"No summary data to append to Admin Master Sheet.\");\n            return;\n        }\n        const rowsToAppend = summaryData.map((data)=>[\n                data.standard,\n                data.rank.toString(),\n                data.projectId,\n                data.projectTitle,\n                data.theme,\n                data.projectAvgScore.toFixed(2),\n                data.studentNames\n            ]);\n        await this.sheets.spreadsheets.values.append({\n            spreadsheetId: adminMasterSheetId,\n            range: `${summarySheetName}!A2`,\n            valueInputOption: \"USER_ENTERED\",\n            resource: {\n                values: rowsToAppend\n            }\n        });\n        console.log(`✅ Appended ${rowsToAppend.length} rows to \"Summary\" tab in Admin Master Sheet.`);\n    }\n    getClassConfig(className) {\n        return SPREADSHEET_CONFIG.CLASSES[className];\n    }\n    getSpreadsheetId(className) {\n        const classConfig = this.getClassConfig(className);\n        return classConfig?.id || \"\";\n    }\n    // New function to update a class's spreadsheet ID\n    updateClassSpreadsheetId(className, newId) {\n        if (SPREADSHEET_CONFIG.CLASSES[className]) {\n            // Update in-memory config\n            SPREADSHEET_CONFIG = {\n                ...SPREADSHEET_CONFIG,\n                CLASSES: {\n                    ...SPREADSHEET_CONFIG.CLASSES,\n                    [className]: {\n                        ...SPREADSHEET_CONFIG.CLASSES[className],\n                        id: newId\n                    }\n                }\n            };\n            // Persist to file\n            const ids = loadClassSheetIds();\n            ids[className] = newId;\n            saveClassSheetIds(ids);\n            console.log(`[Backend Simulation] Updated SPREADSHEET_CONFIG for ${className} to ID: ${newId} and persisted to file`);\n        } else {\n            console.warn(`[Backend Simulation] Class ${className} not found in SPREADSHEET_CONFIG.`);\n        }\n    }\n}\n// Export singleton instance\nconst googleSheetsService = new GoogleSheetsService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/google-sheets.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/googleapis","vendor-chunks/google-auth-library","vendor-chunks/bignumber.js","vendor-chunks/googleapis-common","vendor-chunks/gaxios","vendor-chunks/qs","vendor-chunks/json-bigint","vendor-chunks/gtoken","vendor-chunks/google-logging-utils","vendor-chunks/gcp-metadata","vendor-chunks/object-inspect","vendor-chunks/get-intrinsic","vendor-chunks/jws","vendor-chunks/jwa","vendor-chunks/url-template","vendor-chunks/ecdsa-sig-formatter","vendor-chunks/base64-js","vendor-chunks/side-channel-list","vendor-chunks/extend","vendor-chunks/side-channel-weakmap","vendor-chunks/has-symbols","vendor-chunks/function-bind","vendor-chunks/side-channel-map","vendor-chunks/safe-buffer","vendor-chunks/side-channel","vendor-chunks/get-proto","vendor-chunks/call-bind-apply-helpers","vendor-chunks/buffer-equal-constant-time","vendor-chunks/dunder-proto","vendor-chunks/math-intrinsics","vendor-chunks/call-bound","vendor-chunks/es-errors","vendor-chunks/gopd","vendor-chunks/es-define-property","vendor-chunks/hasown","vendor-chunks/es-object-atoms"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fadmin%2Fprocess-scores%2Froute&page=%2Fapi%2Fadmin%2Fprocess-scores%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fprocess-scores%2Froute.ts&appDir=C%3A%5CUsers%5Carunm%5CDownloads%5Cjudge-dashboard-nextjs-v29-judgePanelv1%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Carunm%5CDownloads%5Cjudge-dashboard-nextjs-v29-judgePanelv1&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();