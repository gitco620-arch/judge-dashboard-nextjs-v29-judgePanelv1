"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/admin/summary/route";
exports.ids = ["app/api/admin/summary/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("assert");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("buffer");

/***/ }),

/***/ "child_process":
/*!********************************!*\
  !*** external "child_process" ***!
  \********************************/
/***/ ((module) => {

module.exports = require("child_process");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "http2":
/*!************************!*\
  !*** external "http2" ***!
  \************************/
/***/ ((module) => {

module.exports = require("http2");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("net");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "process":
/*!**************************!*\
  !*** external "process" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("process");

/***/ }),

/***/ "querystring":
/*!******************************!*\
  !*** external "querystring" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("querystring");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("tls");

/***/ }),

/***/ "tty":
/*!**********************!*\
  !*** external "tty" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("tty");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "worker_threads":
/*!*********************************!*\
  !*** external "worker_threads" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("worker_threads");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "node:buffer":
/*!******************************!*\
  !*** external "node:buffer" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:buffer");

/***/ }),

/***/ "node:fs":
/*!**************************!*\
  !*** external "node:fs" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("node:fs");

/***/ }),

/***/ "node:http":
/*!****************************!*\
  !*** external "node:http" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("node:http");

/***/ }),

/***/ "node:https":
/*!*****************************!*\
  !*** external "node:https" ***!
  \*****************************/
/***/ ((module) => {

module.exports = require("node:https");

/***/ }),

/***/ "node:net":
/*!***************************!*\
  !*** external "node:net" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("node:net");

/***/ }),

/***/ "node:path":
/*!****************************!*\
  !*** external "node:path" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("node:path");

/***/ }),

/***/ "node:process":
/*!*******************************!*\
  !*** external "node:process" ***!
  \*******************************/
/***/ ((module) => {

module.exports = require("node:process");

/***/ }),

/***/ "node:stream":
/*!******************************!*\
  !*** external "node:stream" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:stream");

/***/ }),

/***/ "node:stream/web":
/*!**********************************!*\
  !*** external "node:stream/web" ***!
  \**********************************/
/***/ ((module) => {

module.exports = require("node:stream/web");

/***/ }),

/***/ "node:url":
/*!***************************!*\
  !*** external "node:url" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("node:url");

/***/ }),

/***/ "node:util":
/*!****************************!*\
  !*** external "node:util" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("node:util");

/***/ }),

/***/ "node:zlib":
/*!****************************!*\
  !*** external "node:zlib" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("node:zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fadmin%2Fsummary%2Froute&page=%2Fapi%2Fadmin%2Fsummary%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fsummary%2Froute.ts&appDir=C%3A%5CUsers%5Carunm%5CDownloads%5Cjudge-dashboard-nextjs-v29-judgePanelv1%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Carunm%5CDownloads%5Cjudge-dashboard-nextjs-v29-judgePanelv1&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fadmin%2Fsummary%2Froute&page=%2Fapi%2Fadmin%2Fsummary%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fsummary%2Froute.ts&appDir=C%3A%5CUsers%5Carunm%5CDownloads%5Cjudge-dashboard-nextjs-v29-judgePanelv1%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Carunm%5CDownloads%5Cjudge-dashboard-nextjs-v29-judgePanelv1&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_arunm_Downloads_judge_dashboard_nextjs_v29_judgePanelv1_app_api_admin_summary_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/admin/summary/route.ts */ \"(rsc)/./app/api/admin/summary/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/admin/summary/route\",\n        pathname: \"/api/admin/summary\",\n        filename: \"route\",\n        bundlePath: \"app/api/admin/summary/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\arunm\\\\Downloads\\\\judge-dashboard-nextjs-v29-judgePanelv1\\\\app\\\\api\\\\admin\\\\summary\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_arunm_Downloads_judge_dashboard_nextjs_v29_judgePanelv1_app_api_admin_summary_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/admin/summary/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZhZG1pbiUyRnN1bW1hcnklMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRmFkbWluJTJGc3VtbWFyeSUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRmFkbWluJTJGc3VtbWFyeSUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNhcnVubSU1Q0Rvd25sb2FkcyU1Q2p1ZGdlLWRhc2hib2FyZC1uZXh0anMtdjI5LWp1ZGdlUGFuZWx2MSU1Q2FwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9QyUzQSU1Q1VzZXJzJTVDYXJ1bm0lNUNEb3dubG9hZHMlNUNqdWRnZS1kYXNoYm9hcmQtbmV4dGpzLXYyOS1qdWRnZVBhbmVsdjEmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQ3dEO0FBQ3JJO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsaUVBQWlFO0FBQ3pFO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDdUg7O0FBRXZIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8/MWRkNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCJDOlxcXFxVc2Vyc1xcXFxhcnVubVxcXFxEb3dubG9hZHNcXFxcanVkZ2UtZGFzaGJvYXJkLW5leHRqcy12MjktanVkZ2VQYW5lbHYxXFxcXGFwcFxcXFxhcGlcXFxcYWRtaW5cXFxcc3VtbWFyeVxcXFxyb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvYWRtaW4vc3VtbWFyeS9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2FkbWluL3N1bW1hcnlcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL2FkbWluL3N1bW1hcnkvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCJDOlxcXFxVc2Vyc1xcXFxhcnVubVxcXFxEb3dubG9hZHNcXFxcanVkZ2UtZGFzaGJvYXJkLW5leHRqcy12MjktanVkZ2VQYW5lbHYxXFxcXGFwcFxcXFxhcGlcXFxcYWRtaW5cXFxcc3VtbWFyeVxcXFxyb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9hcGkvYWRtaW4vc3VtbWFyeS9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBvcmlnaW5hbFBhdGhuYW1lLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fadmin%2Fsummary%2Froute&page=%2Fapi%2Fadmin%2Fsummary%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fsummary%2Froute.ts&appDir=C%3A%5CUsers%5Carunm%5CDownloads%5Cjudge-dashboard-nextjs-v29-judgePanelv1%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Carunm%5CDownloads%5Cjudge-dashboard-nextjs-v29-judgePanelv1&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/admin/summary/route.ts":
/*!****************************************!*\
  !*** ./app/api/admin/summary/route.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_google_sheets__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/google-sheets */ \"(rsc)/./lib/google-sheets.ts\");\n/* harmony import */ var _lib_spreadsheet_config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/spreadsheet-config */ \"(rsc)/./lib/spreadsheet-config.ts\");\n\n\n // Adjust the path as needed\nasync function GET() {\n    try {\n        const sheetsService = _lib_google_sheets__WEBPACK_IMPORTED_MODULE_1__.googleSheetsService;\n        const adminMasterSheetId = _lib_spreadsheet_config__WEBPACK_IMPORTED_MODULE_2__.SPREADSHEET_CONFIG.ADMIN_MASTER.id;\n        const summarySheetName = \"Summary\";\n        const summaryRange = `${summarySheetName}!A:H`; // Standard, Rank, Project ID, Project Title, Theme, Project Average Score\n        try {\n            const data = await sheetsService.getSheetData(adminMasterSheetId, summaryRange);\n            console.log(\"Fetched admin summary data:\", data);\n            if (!data.values || data.values.length <= 1) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    success: true,\n                    summary: []\n                });\n            }\n            const summary = data.values.slice(1).map((row)=>({\n                    standard: row[0] || \"\",\n                    rank: Number.parseInt(row[1]) || 0,\n                    projectId: row[2] || \"\",\n                    projectTitle: row[3] || \"\",\n                    theme: row[4] || \"\",\n                    projectAvgScore: Number.parseFloat(row[5]) || 0,\n                    f: row[6] || \"\",\n                    studentNames: row[6] || \"\"\n                }));\n            console.log(\"Admin summary processed:\", summary);\n            console.log(\"Admin summary fetched successfully:\", summary);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: true,\n                summary,\n                timestamp: new Date().toISOString()\n            });\n        } catch (sheetsError) {\n            console.error(\"Google Sheets API error fetching admin summary:\", sheetsError);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: `Failed to fetch admin summary. Please ensure the 'Summary' tab exists in your Admin Master Sheet and permissions are correct.`\n            }, {\n                status: 500\n            });\n        }\n    } catch (error) {\n        console.error(\"Admin summary API error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: \"Server error while fetching admin summary\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL2FkbWluL3N1bW1hcnkvcm91dGUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUEyQztBQUNlO0FBQ0ksQ0FBQyw0QkFBNEI7QUFFcEYsZUFBZUc7SUFDcEIsSUFBSTtRQUNGLE1BQU1DLGdCQUFpQkgsbUVBQW1CQTtRQUMxQyxNQUFNSSxxQkFBcUJILHVFQUFrQkEsQ0FBQ0ksWUFBWSxDQUFDQyxFQUFFO1FBQzdELE1BQU1DLG1CQUFtQjtRQUN6QixNQUFNQyxlQUFlLENBQUMsRUFBRUQsaUJBQWlCLElBQUksQ0FBQyxFQUFFLDBFQUEwRTtRQUUxSCxJQUFJO1lBQ0YsTUFBTUUsT0FBTyxNQUFNTixjQUFjTyxZQUFZLENBQUNOLG9CQUFvQkk7WUFDbEVHLFFBQVFDLEdBQUcsQ0FBQywrQkFBK0JIO1lBRTNDLElBQUksQ0FBQ0EsS0FBS0ksTUFBTSxJQUFJSixLQUFLSSxNQUFNLENBQUNDLE1BQU0sSUFBSSxHQUFHO2dCQUMzQyxPQUFPZixxREFBWUEsQ0FBQ2dCLElBQUksQ0FBQztvQkFBRUMsU0FBUztvQkFBTUMsU0FBUyxFQUFFO2dCQUFDO1lBQ3hEO1lBRUEsTUFBTUEsVUFBVVIsS0FBS0ksTUFBTSxDQUFDSyxLQUFLLENBQUMsR0FBR0MsR0FBRyxDQUFDQyxDQUFBQSxNQUFRO29CQUMvQ0MsVUFBVUQsR0FBRyxDQUFDLEVBQUUsSUFBSTtvQkFDcEJFLE1BQU1DLE9BQU9DLFFBQVEsQ0FBQ0osR0FBRyxDQUFDLEVBQUUsS0FBSztvQkFDakNLLFdBQVdMLEdBQUcsQ0FBQyxFQUFFLElBQUk7b0JBQ3JCTSxjQUFjTixHQUFHLENBQUMsRUFBRSxJQUFJO29CQUN4Qk8sT0FBT1AsR0FBRyxDQUFDLEVBQUUsSUFBSTtvQkFDakJRLGlCQUFpQkwsT0FBT00sVUFBVSxDQUFDVCxHQUFHLENBQUMsRUFBRSxLQUFLO29CQUM5Q1UsR0FBR1YsR0FBRyxDQUFDLEVBQUUsSUFBSTtvQkFDYlcsY0FBY1gsR0FBRyxDQUFDLEVBQUUsSUFBSTtnQkFDMUI7WUFFQVQsUUFBUUMsR0FBRyxDQUFDLDRCQUE0Qks7WUFFeENOLFFBQVFDLEdBQUcsQ0FBQyx1Q0FBdUNLO1lBRW5ELE9BQU9sQixxREFBWUEsQ0FBQ2dCLElBQUksQ0FBQztnQkFDdkJDLFNBQVM7Z0JBQ1RDO2dCQUNBZSxXQUFXLElBQUlDLE9BQU9DLFdBQVc7WUFDbkM7UUFDRixFQUFFLE9BQU9DLGFBQWE7WUFDcEJ4QixRQUFReUIsS0FBSyxDQUFDLG1EQUFtREQ7WUFDakUsT0FBT3BDLHFEQUFZQSxDQUFDZ0IsSUFBSSxDQUN0QjtnQkFDRUMsU0FBUztnQkFDVG9CLE9BQU8sQ0FBQyw2SEFBNkgsQ0FBQztZQUN4SSxHQUNBO2dCQUFFQyxRQUFRO1lBQUk7UUFFbEI7SUFDRixFQUFFLE9BQU9ELE9BQU87UUFDZHpCLFFBQVF5QixLQUFLLENBQUMsNEJBQTRCQTtRQUMxQyxPQUFPckMscURBQVlBLENBQUNnQixJQUFJLENBQ3RCO1lBQ0VDLFNBQVM7WUFDVG9CLE9BQU87UUFDVCxHQUNBO1lBQUVDLFFBQVE7UUFBSTtJQUVsQjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL2FwcC9hcGkvYWRtaW4vc3VtbWFyeS9yb3V0ZS50cz9jZWYyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXNwb25zZSB9IGZyb20gXCJuZXh0L3NlcnZlclwiO1xyXG5pbXBvcnQgeyBnb29nbGVTaGVldHNTZXJ2aWNlIH0gZnJvbSBcIkAvbGliL2dvb2dsZS1zaGVldHNcIjtcclxuaW1wb3J0IHsgU1BSRUFEU0hFRVRfQ09ORklHIH0gZnJvbSBcIkAvbGliL3NwcmVhZHNoZWV0LWNvbmZpZ1wiOyAvLyBBZGp1c3QgdGhlIHBhdGggYXMgbmVlZGVkXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gR0VUKCkge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCBzaGVldHNTZXJ2aWNlID0gIGdvb2dsZVNoZWV0c1NlcnZpY2U7XHJcbiAgICBjb25zdCBhZG1pbk1hc3RlclNoZWV0SWQgPSBTUFJFQURTSEVFVF9DT05GSUcuQURNSU5fTUFTVEVSLmlkO1xyXG4gICAgY29uc3Qgc3VtbWFyeVNoZWV0TmFtZSA9IFwiU3VtbWFyeVwiO1xyXG4gICAgY29uc3Qgc3VtbWFyeVJhbmdlID0gYCR7c3VtbWFyeVNoZWV0TmFtZX0hQTpIYDsgLy8gU3RhbmRhcmQsIFJhbmssIFByb2plY3QgSUQsIFByb2plY3QgVGl0bGUsIFRoZW1lLCBQcm9qZWN0IEF2ZXJhZ2UgU2NvcmVcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgc2hlZXRzU2VydmljZS5nZXRTaGVldERhdGEoYWRtaW5NYXN0ZXJTaGVldElkLCBzdW1tYXJ5UmFuZ2UpO1xyXG4gICAgICBjb25zb2xlLmxvZyhcIkZldGNoZWQgYWRtaW4gc3VtbWFyeSBkYXRhOlwiLCBkYXRhKTtcclxuXHJcbiAgICAgIGlmICghZGF0YS52YWx1ZXMgfHwgZGF0YS52YWx1ZXMubGVuZ3RoIDw9IDEpIHsgLy8gTm8gZGF0YSBvciBvbmx5IGhlYWRlclxyXG4gICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7IHN1Y2Nlc3M6IHRydWUsIHN1bW1hcnk6IFtdIH0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCBzdW1tYXJ5ID0gZGF0YS52YWx1ZXMuc2xpY2UoMSkubWFwKHJvdyA9PiAoe1xyXG4gICAgICAgIHN0YW5kYXJkOiByb3dbMF0gfHwgJycsXHJcbiAgICAgICAgcmFuazogTnVtYmVyLnBhcnNlSW50KHJvd1sxXSkgfHwgMCxcclxuICAgICAgICBwcm9qZWN0SWQ6IHJvd1syXSB8fCAnJyxcclxuICAgICAgICBwcm9qZWN0VGl0bGU6IHJvd1szXSB8fCAnJyxcclxuICAgICAgICB0aGVtZTogcm93WzRdIHx8ICcnLFxyXG4gICAgICAgIHByb2plY3RBdmdTY29yZTogTnVtYmVyLnBhcnNlRmxvYXQocm93WzVdKSB8fCAwLFxyXG4gICAgICAgIGY6IHJvd1s2XSB8fCAnJywgLy8gQXNzdW1pbmcgJ2YnIGlzIHRoZSA3dGggY29sdW1uXHJcbiAgICAgICAgc3R1ZGVudE5hbWVzOiByb3dbNl0gfHwgJycsIC8vIEFzc3VtaW5nICdzdHVkZW50TmFtZXMnIGlzIHRoZSA4dGggY29sdW1uXHJcbiAgICAgIH0pKTtcclxuXHJcbiAgICAgIGNvbnNvbGUubG9nKFwiQWRtaW4gc3VtbWFyeSBwcm9jZXNzZWQ6XCIsIHN1bW1hcnkpO1xyXG5cclxuICAgICAgY29uc29sZS5sb2coXCJBZG1pbiBzdW1tYXJ5IGZldGNoZWQgc3VjY2Vzc2Z1bGx5OlwiLCBzdW1tYXJ5KTtcclxuXHJcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XHJcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcclxuICAgICAgICBzdW1tYXJ5LFxyXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxyXG4gICAgICB9KTtcclxuICAgIH0gY2F0Y2ggKHNoZWV0c0Vycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJHb29nbGUgU2hlZXRzIEFQSSBlcnJvciBmZXRjaGluZyBhZG1pbiBzdW1tYXJ5OlwiLCBzaGVldHNFcnJvcik7XHJcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcclxuICAgICAgICB7XHJcbiAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcclxuICAgICAgICAgIGVycm9yOiBgRmFpbGVkIHRvIGZldGNoIGFkbWluIHN1bW1hcnkuIFBsZWFzZSBlbnN1cmUgdGhlICdTdW1tYXJ5JyB0YWIgZXhpc3RzIGluIHlvdXIgQWRtaW4gTWFzdGVyIFNoZWV0IGFuZCBwZXJtaXNzaW9ucyBhcmUgY29ycmVjdC5gLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgeyBzdGF0dXM6IDUwMCB9LFxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKFwiQWRtaW4gc3VtbWFyeSBBUEkgZXJyb3I6XCIsIGVycm9yKTtcclxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcclxuICAgICAge1xyXG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICAgIGVycm9yOiBcIlNlcnZlciBlcnJvciB3aGlsZSBmZXRjaGluZyBhZG1pbiBzdW1tYXJ5XCIsXHJcbiAgICAgIH0sXHJcbiAgICAgIHsgc3RhdHVzOiA1MDAgfSxcclxuICAgICk7XHJcbiAgfVxyXG59XHJcbiJdLCJuYW1lcyI6WyJOZXh0UmVzcG9uc2UiLCJnb29nbGVTaGVldHNTZXJ2aWNlIiwiU1BSRUFEU0hFRVRfQ09ORklHIiwiR0VUIiwic2hlZXRzU2VydmljZSIsImFkbWluTWFzdGVyU2hlZXRJZCIsIkFETUlOX01BU1RFUiIsImlkIiwic3VtbWFyeVNoZWV0TmFtZSIsInN1bW1hcnlSYW5nZSIsImRhdGEiLCJnZXRTaGVldERhdGEiLCJjb25zb2xlIiwibG9nIiwidmFsdWVzIiwibGVuZ3RoIiwianNvbiIsInN1Y2Nlc3MiLCJzdW1tYXJ5Iiwic2xpY2UiLCJtYXAiLCJyb3ciLCJzdGFuZGFyZCIsInJhbmsiLCJOdW1iZXIiLCJwYXJzZUludCIsInByb2plY3RJZCIsInByb2plY3RUaXRsZSIsInRoZW1lIiwicHJvamVjdEF2Z1Njb3JlIiwicGFyc2VGbG9hdCIsImYiLCJzdHVkZW50TmFtZXMiLCJ0aW1lc3RhbXAiLCJEYXRlIiwidG9JU09TdHJpbmciLCJzaGVldHNFcnJvciIsImVycm9yIiwic3RhdHVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./app/api/admin/summary/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/google-sheets.ts":
/*!******************************!*\
  !*** ./lib/google-sheets.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCredentials: () => (/* binding */ getCredentials),\n/* harmony export */   getJudgeScores: () => (/* binding */ getJudgeScores),\n/* harmony export */   getProjectIds: () => (/* binding */ getProjectIds),\n/* harmony export */   getStudentsByProjectId: () => (/* binding */ getStudentsByProjectId),\n/* harmony export */   getTopProjects: () => (/* binding */ getTopProjects),\n/* harmony export */   googleSheetsService: () => (/* binding */ googleSheetsService),\n/* harmony export */   processClassScores: () => (/* binding */ processClassScores),\n/* harmony export */   saveJudgeScores: () => (/* binding */ saveJudgeScores),\n/* harmony export */   updateAdminSummary: () => (/* binding */ updateAdminSummary)\n/* harmony export */ });\n/* harmony import */ var google_auth_library__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! google-auth-library */ \"(rsc)/./node_modules/google-auth-library/build/src/index.js\");\n/* harmony import */ var googleapis__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! googleapis */ \"(rsc)/./node_modules/googleapis/build/src/index.js\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var os__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! os */ \"os\");\n/* harmony import */ var os__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(os__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _spreadsheet_config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./spreadsheet-config */ \"(rsc)/./lib/spreadsheet-config.ts\");\n\n\n\n\n\n// Import or define SPREADSHEET_CONFIG\n // Adjust the path as needed\nconst CLASS_SHEET_IDS_PATH = path__WEBPACK_IMPORTED_MODULE_2__.resolve(process.cwd(), \"lib/class-sheet-ids.json\");\nfunction loadClassSheetIds() {\n    try {\n        const raw = fs__WEBPACK_IMPORTED_MODULE_1__.readFileSync(CLASS_SHEET_IDS_PATH, \"utf-8\");\n        return JSON.parse(raw);\n    } catch  {\n        return {};\n    }\n}\nfunction saveClassSheetIds(ids) {\n    fs__WEBPACK_IMPORTED_MODULE_1__.writeFileSync(CLASS_SHEET_IDS_PATH, JSON.stringify(ids, null, 2), \"utf-8\");\n}\n// Cache mechanism\n// Removed duplicate declaration of sheetTitlesCache\n// Singleton service instance\nlet sheetsServiceInstance = null;\nclass GoogleSheetsService {\n    constructor(){\n        try {\n            const base64Key = process.env.GOOGLE_SERVICE_ACCOUNT_KEY_BASE64;\n            if (!base64Key) {\n                throw new Error(\"GOOGLE_SERVICE_ACCOUNT_KEY_BASE64 environment variable is not set.\");\n            }\n            const keyData = Buffer.from(base64Key, \"base64\").toString(\"utf8\");\n            const tmpDir = os__WEBPACK_IMPORTED_MODULE_3__.tmpdir();\n            const keyPath = path__WEBPACK_IMPORTED_MODULE_2__.join(tmpDir, \"service-account-key.json\");\n            fs__WEBPACK_IMPORTED_MODULE_1__.writeFileSync(keyPath, keyData);\n            this.auth = new google_auth_library__WEBPACK_IMPORTED_MODULE_0__.GoogleAuth({\n                keyFile: keyPath,\n                scopes: [\n                    \"https://www.googleapis.com/auth/spreadsheets\"\n                ]\n            });\n            this.sheets = googleapis__WEBPACK_IMPORTED_MODULE_5__.google.sheets({\n                version: \"v4\",\n                auth: this.auth\n            });\n        } catch (err) {\n            console.error(\"❌ Error initializing Google Sheets API:\", err);\n            throw err;\n        }\n    }\n    async getSheetData(spreadsheetId, range) {\n        try {\n            console.log(`🔗 Fetching data from Google Sheets: ${spreadsheetId}, Range: ${range}`);\n            const response = await this.sheets.spreadsheets.values.get({\n                spreadsheetId,\n                range\n            });\n            return {\n                values: response.data.values || [],\n                range,\n                spreadsheetId\n            };\n        } catch (error) {\n            console.error(\"Error fetching sheet data:\", error);\n            throw new Error(`Failed to fetch data from spreadsheet ${spreadsheetId}. Please check permissions and spreadsheet ID.`);\n        }\n    }\n    async batchGetSheetData(spreadsheetId, ranges) {\n        try {\n            const response = await this.sheets.spreadsheets.values.batchGet({\n                spreadsheetId,\n                ranges\n            });\n            const result = {};\n            (response.data.valueRanges || []).forEach((valueRange)=>{\n                result[valueRange.range] = valueRange.values || [];\n            });\n            return result;\n        } catch (error) {\n            console.error(\"Error in batchGetSheetData:\", error);\n            throw new Error(`Failed to batch get data from spreadsheet ${spreadsheetId}.`);\n        }\n    }\n    async getCredentials() {\n        try {\n            const data = await this.getSheetData(_spreadsheet_config__WEBPACK_IMPORTED_MODULE_4__.SPREADSHEET_CONFIG.CREDENTIALS.id, _spreadsheet_config__WEBPACK_IMPORTED_MODULE_4__.SPREADSHEET_CONFIG.CREDENTIALS.range);\n            if (!data.values || data.values.length === 0) {\n                throw new Error(\"No credentials found in the spreadsheet\");\n            }\n            // Skip header row and map to credential objects\n            return data.values.slice(1).map((row)=>({\n                    username: row[0] || \"\",\n                    password: row[1] || \"\",\n                    role: row[2] || \"\"\n                })).filter((cred)=>cred.username && cred.password && cred.role);\n        } catch (error) {\n            console.error(\"Error fetching credentials:\", error);\n            throw new Error(\"Failed to fetch credentials from Google Sheets\");\n        }\n    }\n    async getProjectIds(className) {\n        try {\n            const classConfig = this.getClassConfig(className);\n            if (!classConfig) {\n                throw new Error(`No configuration found for class: ${className}`);\n            }\n            const data = await this.getSheetData(classConfig.id, classConfig.range);\n            if (!data.values || data.values.length === 0) {\n                return [];\n            }\n            // Skip header row and extract Project IDs from column E (index 4)\n            const projectIds = data.values.slice(1) // Skip header row\n            .map((row)=>row[4]) // Column E (Project ID) is at index 4\n            .filter((id)=>id && id.trim() !== \"\") // Remove empty cells\n            .map((id)=>id.trim()) // Clean whitespace\n            ;\n            // Return unique project IDs only\n            return [\n                ...new Set(projectIds)\n            ];\n        } catch (error) {\n            console.error(`Error fetching project IDs for ${className}:`, error);\n            throw new Error(`Failed to fetch project IDs for ${className} from Google Sheets`);\n        }\n    }\n    async getStudentsByProjectId(className, projectId) {\n        try {\n            const classConfig = this.getClassConfig(className);\n            if (!classConfig) {\n                throw new Error(`No configuration found for class: ${className}`);\n            }\n            const data = await this.getSheetData(classConfig.id, classConfig.range);\n            if (!data.values || data.values.length === 0) {\n                return [];\n            }\n            // Skip header row and filter by Project ID\n            const students = data.values.slice(1) // Skip header row\n            .filter((row)=>row[4] && row[4].trim() === projectId.trim()) // Filter by Project ID\n            .map((row)=>({\n                    sno: row[0] || \"\",\n                    studentName: row[1] || \"\",\n                    grade: row[2] || \"\",\n                    projectTitle: row[3] || \"\",\n                    projectId: row[4] || \"\",\n                    theme: row[5] || \"\"\n                })).filter((student)=>student.studentName && student.projectId);\n            return students;\n        } catch (error) {\n            console.error(`Error fetching students for project ${projectId}:`, error);\n            throw new Error(`Failed to fetch students for project ${projectId} from Google Sheets`);\n        }\n    }\n    async getJudgeScores(className, judgeName, projectId) {\n        try {\n            const classConfig = this.getClassConfig(className);\n            if (!classConfig) {\n                throw new Error(`No configuration found for class: ${className}`);\n            }\n            const judgeSheetName = `Judge_${judgeName}`;\n            const judgeRange = `${judgeSheetName}!A:K` // Updated range to include Theme Fit (assuming column K)\n            ;\n            try {\n                const data = await this.getSheetData(classConfig.id, judgeRange);\n                if (!data.values || data.values.length === 0) {\n                    return [];\n                }\n                // Skip header row and optionally filter by Project ID\n                let scores = data.values.slice(1) // Skip header row\n                .map((row)=>({\n                        sno: row[0] || \"\",\n                        studentName: row[1] || \"\",\n                        grade: row[2] || \"\",\n                        projectTitle: row[3] || \"\",\n                        projectId: row[4] || \"\",\n                        creativity: row[5] ? Number.parseFloat(row[5]) : null,\n                        scientificThought: row[6] ? Number.parseFloat(row[6]) : null,\n                        technicalSkills: row[7] ? Number.parseFloat(row[7]) : null,\n                        presentation: row[8] ? Number.parseFloat(row[8]) : null,\n                        status: row[9] || \"Present\",\n                        themeFit: row[10] || null\n                    }));\n                console.log(`🔗 Fetched ${scores.length} scores from ${judgeSheetName} for class ${className}`);\n                // Filter by project ID if specified\n                if (projectId) {\n                    scores = scores.filter((score)=>score.projectId.trim() === projectId.trim());\n                }\n                return scores;\n            } catch (error) {\n                // Judge sheet doesn't exist yet or is empty, which is fine for initial fetch\n                console.log(`Judge sheet ${judgeSheetName} doesn't exist yet or is empty.`);\n                return [];\n            }\n        } catch (error) {\n            console.error(`Error fetching judge scores:`, error);\n            throw new Error(`Failed to fetch judge scores from Google Sheets`);\n        }\n    }\n    async saveJudgeScores(className, judgeName, scores) {\n        try {\n            const classConfig = this.getClassConfig(className);\n            if (!classConfig) {\n                throw new Error(`No configuration found for class: ${className}`);\n            }\n            const judgeSheetName = `Judge_${judgeName}`;\n            const judgeHeaderRow = [\n                \"S.No.\",\n                \"Name of the Student\",\n                \"Grade\",\n                \"Project Title\",\n                \"Project ID\",\n                \"Creativity & Imagination\",\n                \"Scientific Thought\",\n                \"Technical Skills\",\n                \"Presentation\",\n                \"Status\",\n                \"Theme Fit\"\n            ];\n            // Ensure judge sheet exists and has header\n            await this.ensureSheetExists(classConfig.id, judgeSheetName, judgeHeaderRow);\n            // Prepare new score rows for appending\n            const newRows = scores.map((score)=>[\n                    score.sno,\n                    score.studentName,\n                    score.grade,\n                    score.projectTitle,\n                    score.projectId,\n                    score.creativity?.toString() || \"\",\n                    score.scientificThought?.toString() || \"\",\n                    score.technicalSkills?.toString() || \"\",\n                    score.presentation?.toString() || \"\",\n                    score.status || \"Present\",\n                    score.themeFit || \"\"\n                ]);\n            // Append new scores (never overwrite)\n            await this.sheets.spreadsheets.values.append({\n                spreadsheetId: classConfig.id,\n                range: `${judgeSheetName}!A:K`,\n                valueInputOption: \"USER_ENTERED\",\n                resource: {\n                    values: newRows\n                }\n            });\n            console.log(`✅ Appended ${newRows.length} new score rows to ${judgeSheetName}`);\n        } catch (error) {\n            console.error(`Error appending judge scores:`, error);\n            throw new Error(`Failed to append judge scores to Google Sheets`);\n        }\n    }\n    async getExistingJudgeData(spreadsheetId, sheetName) {\n        try {\n            const response = await this.sheets.spreadsheets.values.get({\n                spreadsheetId,\n                range: `${sheetName}!A:K`\n            });\n            return response.data.values || [];\n        } catch (error) {\n            // Sheet doesn't exist or is empty\n            return [];\n        }\n    }\n    async ensureSheetExists(spreadsheetId, sheetName, headerRow) {\n        try {\n            const spreadsheet = await this.sheets.spreadsheets.get({\n                spreadsheetId: spreadsheetId,\n                fields: \"sheets.properties.title,sheets.properties.sheetId\"\n            });\n            const sheetExists = spreadsheet.data.sheets?.some((sheet)=>sheet.properties.title === sheetName);\n            if (!sheetExists) {\n                await this.sheets.spreadsheets.batchUpdate({\n                    spreadsheetId: spreadsheetId,\n                    resource: {\n                        requests: [\n                            {\n                                addSheet: {\n                                    properties: {\n                                        title: sheetName\n                                    }\n                                }\n                            }\n                        ]\n                    }\n                });\n                console.log(`✅ Created new sheet: ${sheetName} in spreadsheet ${spreadsheetId}`);\n                // If header row is provided, write it\n                if (headerRow && headerRow.length > 0) {\n                    await this.sheets.spreadsheets.values.append({\n                        spreadsheetId: spreadsheetId,\n                        range: `${sheetName}!A1`,\n                        valueInputOption: \"USER_ENTERED\",\n                        resource: {\n                            values: [\n                                headerRow\n                            ]\n                        }\n                    });\n                    console.log(`✅ Added header to new sheet: ${sheetName}`);\n                }\n            }\n        } catch (error) {\n            console.error(`Error ensuring sheet ${sheetName} exists in ${spreadsheetId}:`, error);\n            throw new Error(`Failed to create or verify sheet: ${sheetName}`);\n        }\n    }\n    async getAllSheetTitles(spreadsheetId) {\n        try {\n            const response = await this.sheets.spreadsheets.get({\n                spreadsheetId: spreadsheetId,\n                fields: \"sheets.properties.title\"\n            });\n            return response.data.sheets?.map((sheet)=>sheet.properties.title) || [];\n        } catch (error) {\n            console.error(`Error fetching sheet titles for ${spreadsheetId}:`, error);\n            throw new Error(`Failed to fetch sheet titles for spreadsheet ${spreadsheetId}.`);\n        }\n    }\n    async getAllJudgeSheetNames(classSpreadsheetId) {\n        const allSheetTitles = await this.getAllSheetTitles(classSpreadsheetId);\n        return allSheetTitles.filter((title)=>title.startsWith(\"Judge_\"));\n    }\n    async getProjectDetailsMap(className) {\n        const classConfig = this.getClassConfig(className);\n        if (!classConfig) {\n            throw new Error(`No configuration found for class: ${className}`);\n        }\n        const data = await this.getSheetData(classConfig.id, classConfig.range) // Reads Sheet1!A:F\n        ;\n        const projectMap = new Map();\n        if (data.values && data.values.length > 1) {\n            // Skip header\n            data.values.slice(1).forEach((row)=>{\n                const projectId = row[4]?.trim() // Column E\n                ;\n                const projectTitle = row[3]?.trim() // Column D\n                ;\n                const theme = row[5]?.trim() // Column F\n                ;\n                const studentName = row[1]?.trim() // Column B\n                ;\n                if (projectId) {\n                    if (!projectMap.has(projectId)) {\n                        projectMap.set(projectId, {\n                            title: projectTitle || \"\",\n                            theme: theme || \"\",\n                            studentNames: new Set()\n                        });\n                    }\n                    if (studentName) {\n                        projectMap.get(projectId)?.studentNames.add(studentName);\n                    }\n                }\n            });\n        }\n        return projectMap;\n    }\n    async processClassScores(className) {\n        const classConfig = this.getClassConfig(className);\n        if (!classConfig) {\n            throw new Error(`No configuration found for class: ${className}`);\n        }\n        const classSpreadsheetId = classConfig.id;\n        const projectDetailsMap = await this.getProjectDetailsMap(className);\n        console.log(`[${className}] Found ${projectDetailsMap.size} unique projects from BaseSheet.`);\n        const judgeSheetNames = await this.getAllJudgeSheetNames(classSpreadsheetId);\n        console.log(`[${className}] Found ${judgeSheetNames.length} judge sheets.`);\n        // Map to store the latest score for each project by each judge\n        const latestProjectScoresByJudge = new Map() // projectId -> (judgeName -> latestScore)\n        ;\n        const judgeRanges = judgeSheetNames.map((judgeSheetName)=>`${judgeSheetName}!A:K`);\n        console.log(\"judgeRangeMAddy\");\n        console.log(`[${className}] Fetching data for judgeRangeMAddy sheets: ${judgeRanges}`);\n        const batchData = await this.batchGetSheetData(classSpreadsheetId, judgeRanges);\n        console.log(\"batchData:\", JSON.stringify(batchData, null, 2));\n        console.log(`[${className}] FetchedMaddy data for ${judgeRanges.length} ${judgeRanges} ${batchData} judge sheets in batch.`);\n        for (const judgeSheetName of judgeSheetNames){\n            console.log(`[${className}] Processing judge sheet maddy: ${judgeSheetName}`);\n            const judgeName = judgeSheetName.replace(\"Judge_\", \"\");\n            const values = batchData[`${judgeSheetName}!A1:K1000`] || [];\n            console.log(`[${className}] FoundMAddys ${values.length} rows in sheet ${judgeSheetName} for Judge ${judgeName}.`);\n            if (values.length <= 1) continue; // skip if only header or empty\n            // Parse scores as in getJudgeScores\n            const scoresForJudge = values.slice(1).map((row)=>({\n                    sno: row[0] || \"\",\n                    studentName: row[1] || \"\",\n                    grade: row[2] || \"\",\n                    projectTitle: row[3] || \"\",\n                    projectId: row[4] || \"\",\n                    creativity: row[5] ? Number.parseFloat(row[5]) : null,\n                    scientificThought: row[6] ? Number.parseFloat(row[6]) : null,\n                    technicalSkills: row[7] ? Number.parseFloat(row[7]) : null,\n                    presentation: row[8] ? Number.parseFloat(row[8]) : null,\n                    status: row[9] || \"Present\",\n                    themeFit: row[10] || null\n                }));\n            console.log(`[${className}] FoundMaddy ${scoresForJudge.length} scores for Judge ${judgeName} in sheet ${judgeSheetName}.`);\n            for (const score of scoresForJudge){\n                const pId = score.projectId.trim();\n                console.log(`[${className}] Processing score for Project ${pId} by Judge ${judgeName}:`, score);\n                if (!latestProjectScoresByJudge.has(pId)) {\n                    latestProjectScoresByJudge.set(pId, new Map());\n                }\n                latestProjectScoresByJudge.get(pId)?.set(judgeName, score);\n            }\n        }\n        console.log(`[${className}] Collected latest scores for projects from each judge.`);\n        console.log(`[${className}] latestProjectScoresByJudge for a sample project (e.g., P4001):`, latestProjectScoresByJudge.get(\"P4001\"));\n        // Aggregate scores per project\n        const projectAggregatedScores = {};\n        // Initialize projectAggregatedScores with details from BaseSheet\n        for (const [pId, details] of projectDetailsMap.entries()){\n            projectAggregatedScores[pId] = {\n                projectTitle: details.title,\n                theme: details.theme,\n                creativitySum: 0,\n                scientificThoughtSum: 0,\n                technicalSkillsSum: 0,\n                presentationSum: 0,\n                judgeCount: 0,\n                absentCount: 0,\n                studentNames: Array.from(details.studentNames).sort()\n            };\n        }\n        // Populate aggregated scores from judge submissions\n        for (const [pId, judgeScoresMap] of latestProjectScoresByJudge.entries()){\n            console.log(`[${className}] Processing scores for Project ${pId} from judges:`, Array.from(judgeScoresMap.keys()));\n            console.log(`[${className}] judgeScoresMap for Project ${pId} has ${judgeScoresMap.size} entries.`);\n            if (!projectAggregatedScores[pId]) {\n                // This project was scored but not found in BaseSheet (e.g., if BaseSheet is incomplete)\n                // Try to get details from the first score entry for this project\n                const firstScore = Array.from(judgeScoresMap.values())[0];\n                projectAggregatedScores[pId] = {\n                    projectTitle: firstScore?.projectTitle || \"\",\n                    theme: projectDetailsMap.get(pId)?.theme || \"\",\n                    creativitySum: 0,\n                    scientificThoughtSum: 0,\n                    technicalSkillsSum: 0,\n                    presentationSum: 0,\n                    judgeCount: 0,\n                    absentCount: 0,\n                    studentNames: []\n                };\n                console.warn(`[${className}] Project ${pId} found in judge sheets but not in BaseSheet. Student names might be incomplete.`);\n            }\n            for (const [judgeName, score] of judgeScoresMap.entries()){\n                if (score.status === \"Absent\") {\n                    console.log(`[${className}] Judge ${judgeName} marked Project ${pId} as Absent.`);\n                    projectAggregatedScores[pId].absentCount++;\n                } else {\n                    // Present\n                    console.log(`[${className}] Adding score for Project ${pId} by Judge ${judgeName}: Creativity=${score.creativity}, ScientificThought=${score.scientificThought}, TechnicalSkills=${score.technicalSkills}, Presentation=${score.presentation}`);\n                    projectAggregatedScores[pId].judgeCount++;\n                    projectAggregatedScores[pId].creativitySum += score.creativity || 0;\n                    projectAggregatedScores[pId].scientificThoughtSum += score.scientificThought || 0;\n                    projectAggregatedScores[pId].technicalSkillsSum += score.technicalSkills || 0;\n                    projectAggregatedScores[pId].presentationSum += score.presentation || 0;\n                }\n            }\n        }\n        console.log(`[${className}] Aggregation complete for project scores.`);\n        console.log(`[${className}] projectAggregatedScores for a sample project (e.g., P4001):`, projectAggregatedScores[\"P4001\"]);\n        // Calculate project averages and prepare rows for \"Score\" tab\n        const scoreTabRows = [];\n        scoreTabRows.push([\n            \"Project ID\",\n            \"Project Title\",\n            \"Theme\",\n            \"Avg Creativity\",\n            \"Avg Scientific Thought\",\n            \"Avg Technical Skills\",\n            \"Avg Presentation\",\n            \"Project Average Score\",\n            \"Student Names\"\n        ]) // New Header for Score tab\n        ;\n        const projectsForScoreTab = [];\n        for(const pId in projectAggregatedScores){\n            const projectData = projectAggregatedScores[pId];\n            let avgCreativity = 0;\n            let avgScientificThought = 0;\n            let avgTechnicalSkills = 0;\n            let avgPresentation = 0;\n            let projectAvgScore = 0;\n            if (projectData.judgeCount > 0) {\n                avgCreativity = projectData.creativitySum / projectData.judgeCount;\n                avgScientificThought = projectData.scientificThoughtSum / projectData.judgeCount;\n                avgTechnicalSkills = projectData.technicalSkillsSum / projectData.judgeCount;\n                avgPresentation = projectData.presentationSum / projectData.judgeCount;\n                projectAvgScore = (avgCreativity + avgScientificThought + avgTechnicalSkills + avgPresentation) / 4;\n                console.log(\"jaguuu\", judgeSheetNames, avgCreativity, avgScientificThought, avgTechnicalSkills, avgPresentation, projectAvgScore);\n            } else if (projectData.absentCount > 0 && projectData.judgeCount === 0) {\n                // All judges marked project absent, so all scores are 0\n                avgCreativity = 0;\n                avgScientificThought = 0;\n                avgTechnicalSkills = 0;\n                avgPresentation = 0;\n                projectAvgScore = 0;\n            }\n            // If no judges scored the project (judgeCount and absentCount are 0), all averages remain 0 (initialized)\n            projectsForScoreTab.push({\n                projectId: pId,\n                projectTitle: projectData.projectTitle,\n                theme: projectData.theme,\n                avgCreativity: avgCreativity,\n                avgScientificThought: avgScientificThought,\n                avgTechnicalSkills: avgTechnicalSkills,\n                avgPresentation: avgPresentation,\n                projectAvgScore: projectAvgScore,\n                studentNames: projectData.studentNames.join(\", \")\n            });\n        }\n        // Sort projects for the Score tab by Project ID for consistent ordering\n        projectsForScoreTab.sort((a, b)=>a.projectId.localeCompare(b.projectId));\n        projectsForScoreTab.forEach((project)=>{\n            scoreTabRows.push([\n                project.projectId,\n                project.projectTitle,\n                project.theme,\n                project.avgCreativity.toFixed(2),\n                project.avgScientificThought.toFixed(2),\n                project.avgTechnicalSkills.toFixed(2),\n                project.avgPresentation.toFixed(2),\n                project.projectAvgScore.toFixed(2),\n                project.studentNames\n            ]);\n        });\n        console.log(`[${className}] Prepared ${scoreTabRows.length - 1} rows for \"Score\" tab (excluding header).`);\n        console.log(`[${className}] Final scoreTabRows before writing:`, scoreTabRows);\n        const scoreSheetName = \"Score\";\n        await this.ensureSheetExists(classSpreadsheetId, scoreSheetName, scoreTabRows[0]) // Pass header for creation\n        ;\n        // Clear existing content before writing new data (excluding header)\n        await this.sheets.spreadsheets.values.clear({\n            spreadsheetId: classSpreadsheetId,\n            range: `${scoreSheetName}!A2:I`\n        });\n        // Write new data (including header)\n        if (scoreTabRows.length > 1) {\n            // Only update if there's data beyond the header\n            await this.sheets.spreadsheets.values.update({\n                spreadsheetId: classSpreadsheetId,\n                range: `${scoreSheetName}!A1`,\n                valueInputOption: \"USER_ENTERED\",\n                resource: {\n                    values: scoreTabRows\n                }\n            });\n            console.log(`✅ Updated \"Score\" tab for ${className} with ${scoreTabRows.length - 1} project average entries.`);\n        } else {\n            console.log(`[${className}] No project average scores to write to \"Score\" tab.`);\n        }\n    }\n    async getTopProjects(className) {\n        const classConfig = this.getClassConfig(className);\n        if (!classConfig) {\n            throw new Error(`No configuration found for class: ${className}`);\n        }\n        const scoreSheetName = \"Score\";\n        const scoreRange = `${scoreSheetName}!A:I` // Updated range for new Score tab columns\n        ;\n        try {\n            const data = await this.getSheetData(classConfig.id, scoreRange);\n            console.log(`[${className}] Read \"Score\" tab for top projects. Rows fetched: ${data.values.length}.`);\n            if (!data.values || data.values.length <= 1) {\n                // No data or only header\n                console.log(`[${className}] \"Score\" tab is empty or only has header. No projects to rank.`);\n                return [];\n            }\n            const projects = [];\n            data.values.slice(1).forEach((row)=>{\n                const projectId = row[0]?.trim() // Project ID is now column A\n                ;\n                const projectTitle = row[1]?.trim() // Project Title is now column B\n                ;\n                const theme = row[2]?.trim() // Theme is now column C\n                ;\n                const projectAvgScore = Number.parseFloat(row[7]) || 0 // Project Average Score is now column H (index 7)\n                ;\n                const studentNames = row[8]?.trim() || \"\" // Student Names is now column I (index 8)\n                ;\n                if (projectId) {\n                    projects.push({\n                        projectId: projectId,\n                        projectTitle: projectTitle,\n                        theme: theme,\n                        projectAvgScore: projectAvgScore,\n                        studentNames: studentNames\n                    });\n                } else {\n                    console.warn(`[${className}] Skipping row in \"Score\" tab for top projects due to missing Project ID: ${row.join(\", \")}`);\n                }\n            });\n            console.log(`[${className}] Parsed ${projects.length} projects from \"Score\" tab.`);\n            // Sort by project average score descending\n            projects.sort((a, b)=>b.projectAvgScore - a.projectAvgScore);\n            console.log(`[${className}] Projects sorted by average score.`);\n            const topProjects = [];\n            let currentRank = 1;\n            let projectsAdded = 0;\n            for(let i = 0; i < projects.length; i++){\n                const project = projects[i];\n                if (projectsAdded < 3) {\n                    topProjects.push({\n                        ...project,\n                        standard: className,\n                        rank: currentRank\n                    });\n                    projectsAdded++;\n                } else if (project.projectAvgScore === topProjects[topProjects.length - 1].projectAvgScore) {\n                    // Handle ties for 3rd place\n                    topProjects.push({\n                        ...project,\n                        standard: className,\n                        rank: currentRank\n                    });\n                } else {\n                    break; // Stop after top 3 (and ties)\n                }\n                // Update rank for next distinct score, only if current project's score is different from the last added project's score\n                if (i < projects.length - 1 && projects[i + 1].projectAvgScore < project.projectAvgScore) {\n                    currentRank = topProjects.length + 1;\n                }\n            }\n            console.log(`[${className}] Identified ${topProjects.length} top projects.`);\n            return topProjects;\n        } catch (error) {\n            console.error(`Error getting top projects for ${className}:`, error);\n            throw new Error(`Failed to get top projects for ${className}.`);\n        }\n    }\n    async updateAdminSummary(summaryData) {\n        const adminMasterSheetId = _spreadsheet_config__WEBPACK_IMPORTED_MODULE_4__.SPREADSHEET_CONFIG.ADMIN_MASTER.id;\n        const summarySheetName = \"Summary\";\n        const summaryHeader = [\n            \"Standard\",\n            \"Rank\",\n            \"Project ID\",\n            \"Project Title\",\n            \"Theme\",\n            \"Project Avg Score\",\n            \"Student Names\"\n        ] // Added Student Names\n        ;\n        await this.ensureSheetExists(adminMasterSheetId, summarySheetName, summaryHeader);\n        // Clear existing content in Summary tab (excluding header)\n        await this.sheets.spreadsheets.values.clear({\n            spreadsheetId: adminMasterSheetId,\n            range: `${summarySheetName}!A2:G`\n        });\n        if (summaryData.length === 0) {\n            console.log(\"No summary data to append to Admin Master Sheet.\");\n            return;\n        }\n        const rowsToAppend = summaryData.map((data)=>[\n                data.standard,\n                data.rank.toString(),\n                data.projectId,\n                data.projectTitle,\n                data.theme,\n                data.projectAvgScore.toFixed(2),\n                data.studentNames\n            ]);\n        await this.sheets.spreadsheets.values.append({\n            spreadsheetId: adminMasterSheetId,\n            range: `${summarySheetName}!A2`,\n            valueInputOption: \"USER_ENTERED\",\n            resource: {\n                values: rowsToAppend\n            }\n        });\n        console.log(`✅ Appended ${rowsToAppend.length} rows to \"Summary\" tab in Admin Master Sheet.`);\n    }\n    getClassConfig(className) {\n        return _spreadsheet_config__WEBPACK_IMPORTED_MODULE_4__.SPREADSHEET_CONFIG.CLASSES[className];\n    }\n    getSpreadsheetId(className) {\n        const classConfig = this.getClassConfig(className);\n        return classConfig?.id || \"\";\n    }\n    // New function to update a class's spreadsheet ID\n    updateClassSpreadsheetId(className, newId) {\n        // Persist to file only, do not attempt to mutate imported config\n        const ids = loadClassSheetIds();\n        ids[className] = newId;\n        saveClassSheetIds(ids);\n        console.log(`[Backend Simulation] Updated classSheetIds for ${className} to ID: ${newId} and persisted to file`);\n    }\n}\n// Export singleton instance\nconst googleSheetsService = new GoogleSheetsService();\nconst sheetTitlesCache = {};\nasync function getAllSheetTitlesCached(spreadsheetId) {\n    if (sheetTitlesCache[spreadsheetId]) {\n        return sheetTitlesCache[spreadsheetId];\n    }\n    const titles = await googleSheetsService.getAllSheetTitles(spreadsheetId);\n    sheetTitlesCache[spreadsheetId] = titles;\n    return titles;\n}\n// Helper to get/create service instance\nfunction getService() {\n    if (!sheetsServiceInstance) {\n        sheetsServiceInstance = new GoogleSheetsService();\n    }\n    return sheetsServiceInstance;\n}\n// Exported async functions that use the service\nasync function getCredentials() {\n    const service = getService();\n    return service.getCredentials();\n}\nasync function getProjectIds(className) {\n    const service = getService();\n    return service.getProjectIds(className);\n}\nasync function getStudentsByProjectId(className, projectId) {\n    const service = getService();\n    return service.getStudentsByProjectId(className, projectId);\n}\nasync function getJudgeScores(className, judgeName, projectId) {\n    const service = getService();\n    return service.getJudgeScores(className, judgeName, projectId);\n}\nasync function saveJudgeScores(className, judgeName, scores) {\n    const service = getService();\n    return service.saveJudgeScores(className, judgeName, scores);\n}\nasync function processClassScores(className) {\n    const service = getService();\n    return service.processClassScores(className);\n}\nasync function getTopProjects(className) {\n    const service = getService();\n    return service.getTopProjects(className);\n}\nasync function updateAdminSummary(summaryData) {\n    const service = getService();\n    return service.updateAdminSummary(summaryData);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/google-sheets.ts\n");

/***/ }),

/***/ "(rsc)/./lib/spreadsheet-config.ts":
/*!***********************************!*\
  !*** ./lib/spreadsheet-config.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SPREADSHEET_CONFIG: () => (/* binding */ SPREADSHEET_CONFIG)\n/* harmony export */ });\n// Define persistedIds with placeholder values or import from another file if needed\nconst persistedIds = {\n    \"Class 4\": \"1E3TH6Z-LFCUxkG3zLeS_lQqyaTaaHfox-keZoiDudKw\",\n    \"Class 5\": \"1k20S_yaFPXNPcZoWIBx60ePJpMx2LfLRj8TQTdoHXms\",\n    \"Class 7\": \"1wyPgb9eOjOLaVQAJl11AlZAXow3H--j_AWjsSTIAwiA\",\n    \"Class 11\": \"1NlCkOtJf445H-JuZWDp12i8m61FKQxSJAdnt2-2_r-A\",\n    \"Class 6\": \"1TmkP-nLF40wbfi5hfiWt7eXkW3PE9EnuvojhlU7ooBM\",\n    \"Class 8\": \"15KvL4WVwlv9wEs_TFJML1ZVfCpbli5iLhyM6EXWNbLw\",\n    \"Class 9\": \"1SsEAJvXthHQ4UYP9LuPoRBaagPoWquuPtyqOUR-LFME\",\n    \"Class 10\": \"1iBXGlafBNIp1T_EQitrqDBJU4ELzN1TzlabHD2Z4u7Y\",\n    \"Class 12\": \"1ikZZeEVGKB12noeHCoaTUoYlq6O4s415Lu940N55A2M\"\n};\nconst SPREADSHEET_CONFIG = {\n    CREDENTIALS: {\n        id: process.env.CREDENTIALS_SPREADSHEET_ID || \"1juP3Eg24GYgOmFcxpNMfbUSXK4m7xTqzlN-Cw9ndYQc\",\n        range: \"Sheet1!A:C\"\n    },\n    ADMIN_MASTER: {\n        id: process.env.ADMIN_MASTER_SPREADSHEET_ID || \"1snk-FZaxyZbSu_Ww-oPnam8JxZ2RLg3etI5TBkr-T1A\"\n    },\n    CLASSES: {\n        \"Class 4\": {\n            id: persistedIds[\"Class 4\"],\n            baseSheet: \"BaseSheet\",\n            range: \"Sheet1!A:F\"\n        },\n        \"Class 5\": {\n            id: persistedIds[\"Class 5\"],\n            baseSheet: \"BaseSheet\",\n            range: \"Sheet1!A:F\"\n        },\n        \"Class 6\": {\n            id: persistedIds[\"Class 6\"],\n            baseSheet: \"BaseSheet\",\n            range: \"Sheet1!A:F\"\n        },\n        \"Class 7\": {\n            id: persistedIds[\"Class 7\"],\n            baseSheet: \"BaseSheet\",\n            range: \"Sheet1!A:F\"\n        },\n        \"Class 8\": {\n            id: persistedIds[\"Class 8\"],\n            baseSheet: \"BaseSheet\",\n            range: \"Sheet1!A:F\"\n        },\n        \"Class 9\": {\n            id: persistedIds[\"Class 9\"],\n            baseSheet: \"BaseSheet\",\n            range: \"Sheet1!A:F\"\n        },\n        \"Class 10\": {\n            id: persistedIds[\"Class 10\"],\n            baseSheet: \"BaseSheet\",\n            range: \"Sheet1!A:F\"\n        },\n        \"Class 11\": {\n            id: persistedIds[\"Class 11\"],\n            baseSheet: \"BaseSheet\",\n            range: \"Sheet1!A:F\"\n        },\n        \"Class 12\": {\n            id: persistedIds[\"Class 12\"],\n            baseSheet: \"BaseSheet\",\n            range: \"Sheet1!A:F\"\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvc3ByZWFkc2hlZXQtY29uZmlnLnRzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxvRkFBb0Y7QUFDcEYsTUFBTUEsZUFBMEM7SUFDOUMsV0FBVztJQUNYLFdBQVc7SUFDWCxXQUFXO0lBQ1gsWUFBWTtJQUNaLFdBQVc7SUFDWCxXQUFXO0lBQ1gsV0FBVztJQUNYLFlBQVk7SUFDWixZQUFZO0FBQ2Q7QUFFTyxNQUFNQyxxQkFBcUI7SUFDaENDLGFBQWE7UUFDWEMsSUFBSUMsUUFBUUMsR0FBRyxDQUFDQywwQkFBMEIsSUFBSTtRQUM5Q0MsT0FBTztJQUNUO0lBQ0FDLGNBQWM7UUFDWkwsSUFBSUMsUUFBUUMsR0FBRyxDQUFDSSwyQkFBMkIsSUFBSTtJQUNqRDtJQUNBQyxTQUFTO1FBQ1AsV0FBVztZQUNUUCxJQUFJSCxZQUFZLENBQUMsVUFBVTtZQUMzQlcsV0FBVztZQUNYSixPQUFPO1FBQ1Q7UUFDQSxXQUFXO1lBQ1RKLElBQUlILFlBQVksQ0FBQyxVQUFVO1lBQzNCVyxXQUFXO1lBQ1hKLE9BQU87UUFDVDtRQUNBLFdBQVc7WUFDVEosSUFBSUgsWUFBWSxDQUFDLFVBQVU7WUFDM0JXLFdBQVc7WUFDWEosT0FBTztRQUNUO1FBQ0EsV0FBVztZQUNUSixJQUFJSCxZQUFZLENBQUMsVUFBVTtZQUMzQlcsV0FBVztZQUNYSixPQUFPO1FBQ1Q7UUFDQSxXQUFXO1lBQ1RKLElBQUlILFlBQVksQ0FBQyxVQUFVO1lBQzNCVyxXQUFXO1lBQ1hKLE9BQU87UUFDVDtRQUNBLFdBQVc7WUFDVEosSUFBSUgsWUFBWSxDQUFDLFVBQVU7WUFDM0JXLFdBQVc7WUFDWEosT0FBTztRQUNUO1FBQ0EsWUFBWTtZQUNWSixJQUFJSCxZQUFZLENBQUMsV0FBVztZQUM1QlcsV0FBVztZQUNYSixPQUFPO1FBQ1Q7UUFDQSxZQUFZO1lBQ1ZKLElBQUlILFlBQVksQ0FBQyxXQUFXO1lBQzVCVyxXQUFXO1lBQ1hKLE9BQU87UUFDVDtRQUNBLFlBQVk7WUFDVkosSUFBSUgsWUFBWSxDQUFDLFdBQVc7WUFDNUJXLFdBQVc7WUFDWEosT0FBTztRQUNUO0lBQ0Y7QUFDRixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL2xpYi9zcHJlYWRzaGVldC1jb25maWcudHM/ZmJkNiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBEZWZpbmUgcGVyc2lzdGVkSWRzIHdpdGggcGxhY2Vob2xkZXIgdmFsdWVzIG9yIGltcG9ydCBmcm9tIGFub3RoZXIgZmlsZSBpZiBuZWVkZWRcclxuY29uc3QgcGVyc2lzdGVkSWRzOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9ID0ge1xyXG4gIFwiQ2xhc3MgNFwiOiBcIjFFM1RINlotTEZDVXhrRzN6TGVTX2xRcXlhVGFhSGZveC1rZVpvaUR1ZEt3XCIsXHJcbiAgXCJDbGFzcyA1XCI6IFwiMWsyMFNfeWFGUFhOUGNab1dJQng2MGVQSnBNeDJMZkxSajhUUVRkb0hYbXNcIixcclxuICBcIkNsYXNzIDdcIjogXCIxd3lQZ2I5ZU9qT0xhVlFBSmwxMUFsWkFYb3czSC0tal9BV2pzU1RJQXdpQVwiLFxyXG4gIFwiQ2xhc3MgMTFcIjogXCIxTmxDa090SmY0NDVILUp1WldEcDEyaThtNjFGS1F4U0pBZG50Mi0yX3ItQVwiLFxyXG4gIFwiQ2xhc3MgNlwiOiBcIjFUbWtQLW5MRjQwd2JmaTVoZmlXdDdlWGtXM1BFOUVudXZvamhsVTdvb0JNXCIsXHJcbiAgXCJDbGFzcyA4XCI6IFwiMTVLdkw0V1Z3bHY5d0VzX1RGSk1MMVpWZkNwYmxpNWlMaHlNNkVYV05iTHdcIixcclxuICBcIkNsYXNzIDlcIjogXCIxU3NFQUp2WHRoSFE0VVlQOUx1UG9SQmFhZ1BvV3F1dVB0eXFPVVItTEZNRVwiLFxyXG4gIFwiQ2xhc3MgMTBcIjogXCIxaUJYR2xhZkJOSXAxVF9FUWl0cnFEQkpVNEVMek4xVHpsYWJIRDJaNHU3WVwiLFxyXG4gIFwiQ2xhc3MgMTJcIjogXCIxaWtaWmVFVkdLQjEybm9lSENvYVRVb1lscTZPNHM0MTVMdTk0ME41NUEyTVwiXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgU1BSRUFEU0hFRVRfQ09ORklHID0ge1xyXG4gIENSRURFTlRJQUxTOiB7XHJcbiAgICBpZDogcHJvY2Vzcy5lbnYuQ1JFREVOVElBTFNfU1BSRUFEU0hFRVRfSUQgfHwgXCIxanVQM0VnMjRHWWdPbUZjeHBOTWZiVVNYSzRtN3hUcXpsTi1DdzluZFlRY1wiLCAvLyBSRVBMQUNFIFdJVEggWU9VUiBDUkVERU5USUFMUyBTSEVFVCBJRFxyXG4gICAgcmFuZ2U6IFwiU2hlZXQxIUE6Q1wiLCAvLyBVc2VybmFtZSwgUGFzc3dvcmQsIFJvbGVcclxuICB9LFxyXG4gIEFETUlOX01BU1RFUjoge1xyXG4gICAgaWQ6IHByb2Nlc3MuZW52LkFETUlOX01BU1RFUl9TUFJFQURTSEVFVF9JRCB8fCBcIjFzbmstRlpheHlaYlN1X1d3LW9QbmFtOEp4WjJSTGczZXRJNVRCa3ItVDFBXCIsIC8vIE5ldzogQWRtaW4gTWFzdGVyIFNoZWV0IElELCBkZWZhdWx0cyB0byBjcmVkZW50aWFscyBzaGVldFxyXG4gIH0sXHJcbiAgQ0xBU1NFUzoge1xyXG4gICAgXCJDbGFzcyA0XCI6IHtcclxuICAgICAgaWQ6IHBlcnNpc3RlZElkc1tcIkNsYXNzIDRcIl0sIC8vIFJFUExBQ0VcclxuICAgICAgYmFzZVNoZWV0OiBcIkJhc2VTaGVldFwiLFxyXG4gICAgICByYW5nZTogXCJTaGVldDEhQTpGXCIsIC8vIFVwZGF0ZWQgcmFuZ2UgdG8gaW5jbHVkZSBUaGVtZSAoYXNzdW1pbmcgY29sdW1uIEYpXHJcbiAgICB9LFxyXG4gICAgXCJDbGFzcyA1XCI6IHtcclxuICAgICAgaWQ6IHBlcnNpc3RlZElkc1tcIkNsYXNzIDVcIl0sIC8vIFJFUExBQ0VcclxuICAgICAgYmFzZVNoZWV0OiBcIkJhc2VTaGVldFwiLFxyXG4gICAgICByYW5nZTogXCJTaGVldDEhQTpGXCIsIC8vIFVwZGF0ZWQgcmFuZ2UgdG8gaW5jbHVkZSBUaGVtZSAoYXNzdW1pbmcgY29sdW1uIEYpXHJcbiAgICB9LFxyXG4gICAgXCJDbGFzcyA2XCI6IHtcclxuICAgICAgaWQ6IHBlcnNpc3RlZElkc1tcIkNsYXNzIDZcIl0sIC8vIFJFUExBQ0VcclxuICAgICAgYmFzZVNoZWV0OiBcIkJhc2VTaGVldFwiLFxyXG4gICAgICByYW5nZTogXCJTaGVldDEhQTpGXCIsIC8vIFVwZGF0ZWQgcmFuZ2UgdG8gaW5jbHVkZSBUaGVtZSAoYXNzdW1pbmcgY29sdW1uIEYpXHJcbiAgICB9LFxyXG4gICAgXCJDbGFzcyA3XCI6IHtcclxuICAgICAgaWQ6IHBlcnNpc3RlZElkc1tcIkNsYXNzIDdcIl0sIC8vIFJFUExBQ0VcclxuICAgICAgYmFzZVNoZWV0OiBcIkJhc2VTaGVldFwiLFxyXG4gICAgICByYW5nZTogXCJTaGVldDEhQTpGXCIsIC8vIFVwZGF0ZWQgcmFuZ2UgdG8gaW5jbHVkZSBUaGVtZSAoYXNzdW1pbmcgY29sdW1uIEYpXHJcbiAgICB9LFxyXG4gICAgXCJDbGFzcyA4XCI6IHtcclxuICAgICAgaWQ6IHBlcnNpc3RlZElkc1tcIkNsYXNzIDhcIl0sIC8vIFJFUExBQ0VcclxuICAgICAgYmFzZVNoZWV0OiBcIkJhc2VTaGVldFwiLFxyXG4gICAgICByYW5nZTogXCJTaGVldDEhQTpGXCIsIC8vIFVwZGF0ZWQgcmFuZ2UgdG8gaW5jbHVkZSBUaGVtZSAoYXNzdW1pbmcgY29sdW1uIEYpXHJcbiAgICB9LFxyXG4gICAgXCJDbGFzcyA5XCI6IHtcclxuICAgICAgaWQ6IHBlcnNpc3RlZElkc1tcIkNsYXNzIDlcIl0sIC8vIFJFUExBQ0VcclxuICAgICAgYmFzZVNoZWV0OiBcIkJhc2VTaGVldFwiLFxyXG4gICAgICByYW5nZTogXCJTaGVldDEhQTpGXCIsIC8vIFVwZGF0ZWQgcmFuZ2UgdG8gaW5jbHVkZSBUaGVtZSAoYXNzdW1pbmcgY29sdW1uIEYpXHJcbiAgICB9LFxyXG4gICAgXCJDbGFzcyAxMFwiOiB7XHJcbiAgICAgIGlkOiBwZXJzaXN0ZWRJZHNbXCJDbGFzcyAxMFwiXSwgLy8gUkVQTEFDRVxyXG4gICAgICBiYXNlU2hlZXQ6IFwiQmFzZVNoZWV0XCIsXHJcbiAgICAgIHJhbmdlOiBcIlNoZWV0MSFBOkZcIiwgLy8gVXBkYXRlZCByYW5nZSB0byBpbmNsdWRlIFRoZW1lIChhc3N1bWluZyBjb2x1bW4gRilcclxuICAgIH0sXHJcbiAgICBcIkNsYXNzIDExXCI6IHtcclxuICAgICAgaWQ6IHBlcnNpc3RlZElkc1tcIkNsYXNzIDExXCJdLCAvLyBSRVBMQUNFXHJcbiAgICAgIGJhc2VTaGVldDogXCJCYXNlU2hlZXRcIixcclxuICAgICAgcmFuZ2U6IFwiU2hlZXQxIUE6RlwiLCAvLyBVcGRhdGVkIHJhbmdlIHRvIGluY2x1ZGUgVGhlbWUgKGFzc3VtaW5nIGNvbHVtbiBGKVxyXG4gICAgfSxcclxuICAgIFwiQ2xhc3MgMTJcIjoge1xyXG4gICAgICBpZDogcGVyc2lzdGVkSWRzW1wiQ2xhc3MgMTJcIl0sIC8vIFJFUExBQ0VcclxuICAgICAgYmFzZVNoZWV0OiBcIkJhc2VTaGVldFwiLFxyXG4gICAgICByYW5nZTogXCJTaGVldDEhQTpGXCIsIC8vIFVwZGF0ZWQgcmFuZ2UgdG8gaW5jbHVkZSBUaGVtZSAoYXNzdW1pbmcgY29sdW1uIEYpXHJcbiAgICB9LFxyXG4gIH0sXHJcbn0iXSwibmFtZXMiOlsicGVyc2lzdGVkSWRzIiwiU1BSRUFEU0hFRVRfQ09ORklHIiwiQ1JFREVOVElBTFMiLCJpZCIsInByb2Nlc3MiLCJlbnYiLCJDUkVERU5USUFMU19TUFJFQURTSEVFVF9JRCIsInJhbmdlIiwiQURNSU5fTUFTVEVSIiwiQURNSU5fTUFTVEVSX1NQUkVBRFNIRUVUX0lEIiwiQ0xBU1NFUyIsImJhc2VTaGVldCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./lib/spreadsheet-config.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/googleapis","vendor-chunks/google-auth-library","vendor-chunks/bignumber.js","vendor-chunks/googleapis-common","vendor-chunks/gaxios","vendor-chunks/qs","vendor-chunks/json-bigint","vendor-chunks/gtoken","vendor-chunks/google-logging-utils","vendor-chunks/gcp-metadata","vendor-chunks/object-inspect","vendor-chunks/get-intrinsic","vendor-chunks/jws","vendor-chunks/jwa","vendor-chunks/url-template","vendor-chunks/ecdsa-sig-formatter","vendor-chunks/base64-js","vendor-chunks/side-channel-list","vendor-chunks/extend","vendor-chunks/side-channel-weakmap","vendor-chunks/has-symbols","vendor-chunks/function-bind","vendor-chunks/side-channel-map","vendor-chunks/safe-buffer","vendor-chunks/side-channel","vendor-chunks/get-proto","vendor-chunks/call-bind-apply-helpers","vendor-chunks/buffer-equal-constant-time","vendor-chunks/dunder-proto","vendor-chunks/math-intrinsics","vendor-chunks/call-bound","vendor-chunks/es-errors","vendor-chunks/gopd","vendor-chunks/es-define-property","vendor-chunks/hasown","vendor-chunks/es-object-atoms"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fadmin%2Fsummary%2Froute&page=%2Fapi%2Fadmin%2Fsummary%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fsummary%2Froute.ts&appDir=C%3A%5CUsers%5Carunm%5CDownloads%5Cjudge-dashboard-nextjs-v29-judgePanelv1%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Carunm%5CDownloads%5Cjudge-dashboard-nextjs-v29-judgePanelv1&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();