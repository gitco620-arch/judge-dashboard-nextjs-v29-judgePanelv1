"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/admin/summary/route";
exports.ids = ["app/api/admin/summary/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("assert");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("buffer");

/***/ }),

/***/ "child_process":
/*!********************************!*\
  !*** external "child_process" ***!
  \********************************/
/***/ ((module) => {

module.exports = require("child_process");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "http2":
/*!************************!*\
  !*** external "http2" ***!
  \************************/
/***/ ((module) => {

module.exports = require("http2");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("net");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "process":
/*!**************************!*\
  !*** external "process" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("process");

/***/ }),

/***/ "querystring":
/*!******************************!*\
  !*** external "querystring" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("querystring");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("tls");

/***/ }),

/***/ "tty":
/*!**********************!*\
  !*** external "tty" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("tty");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "worker_threads":
/*!*********************************!*\
  !*** external "worker_threads" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("worker_threads");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "node:buffer":
/*!******************************!*\
  !*** external "node:buffer" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:buffer");

/***/ }),

/***/ "node:fs":
/*!**************************!*\
  !*** external "node:fs" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("node:fs");

/***/ }),

/***/ "node:http":
/*!****************************!*\
  !*** external "node:http" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("node:http");

/***/ }),

/***/ "node:https":
/*!*****************************!*\
  !*** external "node:https" ***!
  \*****************************/
/***/ ((module) => {

module.exports = require("node:https");

/***/ }),

/***/ "node:net":
/*!***************************!*\
  !*** external "node:net" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("node:net");

/***/ }),

/***/ "node:path":
/*!****************************!*\
  !*** external "node:path" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("node:path");

/***/ }),

/***/ "node:process":
/*!*******************************!*\
  !*** external "node:process" ***!
  \*******************************/
/***/ ((module) => {

module.exports = require("node:process");

/***/ }),

/***/ "node:stream":
/*!******************************!*\
  !*** external "node:stream" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:stream");

/***/ }),

/***/ "node:stream/web":
/*!**********************************!*\
  !*** external "node:stream/web" ***!
  \**********************************/
/***/ ((module) => {

module.exports = require("node:stream/web");

/***/ }),

/***/ "node:url":
/*!***************************!*\
  !*** external "node:url" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("node:url");

/***/ }),

/***/ "node:util":
/*!****************************!*\
  !*** external "node:util" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("node:util");

/***/ }),

/***/ "node:zlib":
/*!****************************!*\
  !*** external "node:zlib" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("node:zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fadmin%2Fsummary%2Froute&page=%2Fapi%2Fadmin%2Fsummary%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fsummary%2Froute.ts&appDir=C%3A%5CUsers%5Carunm%5CDownloads%5Cjudge-dashboard-nextjs-v29-judgePanelv1%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Carunm%5CDownloads%5Cjudge-dashboard-nextjs-v29-judgePanelv1&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fadmin%2Fsummary%2Froute&page=%2Fapi%2Fadmin%2Fsummary%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fsummary%2Froute.ts&appDir=C%3A%5CUsers%5Carunm%5CDownloads%5Cjudge-dashboard-nextjs-v29-judgePanelv1%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Carunm%5CDownloads%5Cjudge-dashboard-nextjs-v29-judgePanelv1&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_arunm_Downloads_judge_dashboard_nextjs_v29_judgePanelv1_app_api_admin_summary_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/admin/summary/route.ts */ \"(rsc)/./app/api/admin/summary/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/admin/summary/route\",\n        pathname: \"/api/admin/summary\",\n        filename: \"route\",\n        bundlePath: \"app/api/admin/summary/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\arunm\\\\Downloads\\\\judge-dashboard-nextjs-v29-judgePanelv1\\\\app\\\\api\\\\admin\\\\summary\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_arunm_Downloads_judge_dashboard_nextjs_v29_judgePanelv1_app_api_admin_summary_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/admin/summary/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZhZG1pbiUyRnN1bW1hcnklMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRmFkbWluJTJGc3VtbWFyeSUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRmFkbWluJTJGc3VtbWFyeSUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNhcnVubSU1Q0Rvd25sb2FkcyU1Q2p1ZGdlLWRhc2hib2FyZC1uZXh0anMtdjI5LWp1ZGdlUGFuZWx2MSU1Q2FwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9QyUzQSU1Q1VzZXJzJTVDYXJ1bm0lNUNEb3dubG9hZHMlNUNqdWRnZS1kYXNoYm9hcmQtbmV4dGpzLXYyOS1qdWRnZVBhbmVsdjEmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQ3dEO0FBQ3JJO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsaUVBQWlFO0FBQ3pFO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDdUg7O0FBRXZIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8/MWRkNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCJDOlxcXFxVc2Vyc1xcXFxhcnVubVxcXFxEb3dubG9hZHNcXFxcanVkZ2UtZGFzaGJvYXJkLW5leHRqcy12MjktanVkZ2VQYW5lbHYxXFxcXGFwcFxcXFxhcGlcXFxcYWRtaW5cXFxcc3VtbWFyeVxcXFxyb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvYWRtaW4vc3VtbWFyeS9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2FkbWluL3N1bW1hcnlcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL2FkbWluL3N1bW1hcnkvcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCJDOlxcXFxVc2Vyc1xcXFxhcnVubVxcXFxEb3dubG9hZHNcXFxcanVkZ2UtZGFzaGJvYXJkLW5leHRqcy12MjktanVkZ2VQYW5lbHYxXFxcXGFwcFxcXFxhcGlcXFxcYWRtaW5cXFxcc3VtbWFyeVxcXFxyb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9hcGkvYWRtaW4vc3VtbWFyeS9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBvcmlnaW5hbFBhdGhuYW1lLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fadmin%2Fsummary%2Froute&page=%2Fapi%2Fadmin%2Fsummary%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fsummary%2Froute.ts&appDir=C%3A%5CUsers%5Carunm%5CDownloads%5Cjudge-dashboard-nextjs-v29-judgePanelv1%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Carunm%5CDownloads%5Cjudge-dashboard-nextjs-v29-judgePanelv1&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/admin/summary/route.ts":
/*!****************************************!*\
  !*** ./app/api/admin/summary/route.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_google_sheets__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/google-sheets */ \"(rsc)/./lib/google-sheets.ts\");\n\n\nasync function GET() {\n    try {\n        const sheetsService = new _lib_google_sheets__WEBPACK_IMPORTED_MODULE_1__.GoogleSheetsService();\n        const adminMasterSheetId = _lib_google_sheets__WEBPACK_IMPORTED_MODULE_1__.SPREADSHEET_CONFIG.ADMIN_MASTER.id;\n        const summarySheetName = \"Summary\";\n        const summaryRange = `${summarySheetName}!A:H`; // Standard, Rank, Project ID, Project Title, Theme, Project Average Score\n        try {\n            const data = await sheetsService.getSheetData(adminMasterSheetId, summaryRange);\n            console.log(\"Fetched admin summary data:\", data);\n            if (!data.values || data.values.length <= 1) {\n                return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                    success: true,\n                    summary: []\n                });\n            }\n            const summary = data.values.slice(1).map((row)=>({\n                    standard: row[0] || \"\",\n                    rank: Number.parseInt(row[1]) || 0,\n                    projectId: row[2] || \"\",\n                    projectTitle: row[3] || \"\",\n                    theme: row[4] || \"\",\n                    projectAvgScore: Number.parseFloat(row[5]) || 0,\n                    f: row[6] || \"\",\n                    studentNames: row[6] || \"\"\n                }));\n            console.log(\"Admin summary processed:\", summary);\n            console.log(\"Admin summary fetched successfully:\", summary);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: true,\n                summary,\n                timestamp: new Date().toISOString()\n            });\n        } catch (sheetsError) {\n            console.error(\"Google Sheets API error fetching admin summary:\", sheetsError);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: false,\n                error: `Failed to fetch admin summary. Please ensure the 'Summary' tab exists in your Admin Master Sheet and permissions are correct.`\n            }, {\n                status: 500\n            });\n        }\n    } catch (error) {\n        console.error(\"Admin summary API error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: \"Server error while fetching admin summary\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL2FkbWluL3N1bW1hcnkvcm91dGUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTJDO0FBQ21DO0FBRXZFLGVBQWVHO0lBQ3BCLElBQUk7UUFDRixNQUFNQyxnQkFBZ0IsSUFBSUgsbUVBQW1CQTtRQUM3QyxNQUFNSSxxQkFBcUJILGtFQUFrQkEsQ0FBQ0ksWUFBWSxDQUFDQyxFQUFFO1FBQzdELE1BQU1DLG1CQUFtQjtRQUN6QixNQUFNQyxlQUFlLENBQUMsRUFBRUQsaUJBQWlCLElBQUksQ0FBQyxFQUFFLDBFQUEwRTtRQUUxSCxJQUFJO1lBQ0YsTUFBTUUsT0FBTyxNQUFNTixjQUFjTyxZQUFZLENBQUNOLG9CQUFvQkk7WUFDbEVHLFFBQVFDLEdBQUcsQ0FBQywrQkFBK0JIO1lBRTNDLElBQUksQ0FBQ0EsS0FBS0ksTUFBTSxJQUFJSixLQUFLSSxNQUFNLENBQUNDLE1BQU0sSUFBSSxHQUFHO2dCQUMzQyxPQUFPZixxREFBWUEsQ0FBQ2dCLElBQUksQ0FBQztvQkFBRUMsU0FBUztvQkFBTUMsU0FBUyxFQUFFO2dCQUFDO1lBQ3hEO1lBRUEsTUFBTUEsVUFBVVIsS0FBS0ksTUFBTSxDQUFDSyxLQUFLLENBQUMsR0FBR0MsR0FBRyxDQUFDQyxDQUFBQSxNQUFRO29CQUMvQ0MsVUFBVUQsR0FBRyxDQUFDLEVBQUUsSUFBSTtvQkFDcEJFLE1BQU1DLE9BQU9DLFFBQVEsQ0FBQ0osR0FBRyxDQUFDLEVBQUUsS0FBSztvQkFDakNLLFdBQVdMLEdBQUcsQ0FBQyxFQUFFLElBQUk7b0JBQ3JCTSxjQUFjTixHQUFHLENBQUMsRUFBRSxJQUFJO29CQUN4Qk8sT0FBT1AsR0FBRyxDQUFDLEVBQUUsSUFBSTtvQkFDakJRLGlCQUFpQkwsT0FBT00sVUFBVSxDQUFDVCxHQUFHLENBQUMsRUFBRSxLQUFLO29CQUM5Q1UsR0FBR1YsR0FBRyxDQUFDLEVBQUUsSUFBSTtvQkFDYlcsY0FBY1gsR0FBRyxDQUFDLEVBQUUsSUFBSTtnQkFDMUI7WUFFQVQsUUFBUUMsR0FBRyxDQUFDLDRCQUE0Qks7WUFFeENOLFFBQVFDLEdBQUcsQ0FBQyx1Q0FBdUNLO1lBRW5ELE9BQU9sQixxREFBWUEsQ0FBQ2dCLElBQUksQ0FBQztnQkFDdkJDLFNBQVM7Z0JBQ1RDO2dCQUNBZSxXQUFXLElBQUlDLE9BQU9DLFdBQVc7WUFDbkM7UUFDRixFQUFFLE9BQU9DLGFBQWE7WUFDcEJ4QixRQUFReUIsS0FBSyxDQUFDLG1EQUFtREQ7WUFDakUsT0FBT3BDLHFEQUFZQSxDQUFDZ0IsSUFBSSxDQUN0QjtnQkFDRUMsU0FBUztnQkFDVG9CLE9BQU8sQ0FBQyw2SEFBNkgsQ0FBQztZQUN4SSxHQUNBO2dCQUFFQyxRQUFRO1lBQUk7UUFFbEI7SUFDRixFQUFFLE9BQU9ELE9BQU87UUFDZHpCLFFBQVF5QixLQUFLLENBQUMsNEJBQTRCQTtRQUMxQyxPQUFPckMscURBQVlBLENBQUNnQixJQUFJLENBQ3RCO1lBQ0VDLFNBQVM7WUFDVG9CLE9BQU87UUFDVCxHQUNBO1lBQUVDLFFBQVE7UUFBSTtJQUVsQjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXktdjAtcHJvamVjdC8uL2FwcC9hcGkvYWRtaW4vc3VtbWFyeS9yb3V0ZS50cz9jZWYyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXNwb25zZSB9IGZyb20gXCJuZXh0L3NlcnZlclwiO1xyXG5pbXBvcnQgeyBHb29nbGVTaGVldHNTZXJ2aWNlLCBTUFJFQURTSEVFVF9DT05GSUcgfSBmcm9tIFwiQC9saWIvZ29vZ2xlLXNoZWV0c1wiO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIEdFVCgpIHtcclxuICB0cnkge1xyXG4gICAgY29uc3Qgc2hlZXRzU2VydmljZSA9IG5ldyBHb29nbGVTaGVldHNTZXJ2aWNlKCk7XHJcbiAgICBjb25zdCBhZG1pbk1hc3RlclNoZWV0SWQgPSBTUFJFQURTSEVFVF9DT05GSUcuQURNSU5fTUFTVEVSLmlkO1xyXG4gICAgY29uc3Qgc3VtbWFyeVNoZWV0TmFtZSA9IFwiU3VtbWFyeVwiO1xyXG4gICAgY29uc3Qgc3VtbWFyeVJhbmdlID0gYCR7c3VtbWFyeVNoZWV0TmFtZX0hQTpIYDsgLy8gU3RhbmRhcmQsIFJhbmssIFByb2plY3QgSUQsIFByb2plY3QgVGl0bGUsIFRoZW1lLCBQcm9qZWN0IEF2ZXJhZ2UgU2NvcmVcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgc2hlZXRzU2VydmljZS5nZXRTaGVldERhdGEoYWRtaW5NYXN0ZXJTaGVldElkLCBzdW1tYXJ5UmFuZ2UpO1xyXG4gICAgICBjb25zb2xlLmxvZyhcIkZldGNoZWQgYWRtaW4gc3VtbWFyeSBkYXRhOlwiLCBkYXRhKTtcclxuXHJcbiAgICAgIGlmICghZGF0YS52YWx1ZXMgfHwgZGF0YS52YWx1ZXMubGVuZ3RoIDw9IDEpIHsgLy8gTm8gZGF0YSBvciBvbmx5IGhlYWRlclxyXG4gICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7IHN1Y2Nlc3M6IHRydWUsIHN1bW1hcnk6IFtdIH0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCBzdW1tYXJ5ID0gZGF0YS52YWx1ZXMuc2xpY2UoMSkubWFwKHJvdyA9PiAoe1xyXG4gICAgICAgIHN0YW5kYXJkOiByb3dbMF0gfHwgJycsXHJcbiAgICAgICAgcmFuazogTnVtYmVyLnBhcnNlSW50KHJvd1sxXSkgfHwgMCxcclxuICAgICAgICBwcm9qZWN0SWQ6IHJvd1syXSB8fCAnJyxcclxuICAgICAgICBwcm9qZWN0VGl0bGU6IHJvd1szXSB8fCAnJyxcclxuICAgICAgICB0aGVtZTogcm93WzRdIHx8ICcnLFxyXG4gICAgICAgIHByb2plY3RBdmdTY29yZTogTnVtYmVyLnBhcnNlRmxvYXQocm93WzVdKSB8fCAwLFxyXG4gICAgICAgIGY6IHJvd1s2XSB8fCAnJywgLy8gQXNzdW1pbmcgJ2YnIGlzIHRoZSA3dGggY29sdW1uXHJcbiAgICAgICAgc3R1ZGVudE5hbWVzOiByb3dbNl0gfHwgJycsIC8vIEFzc3VtaW5nICdzdHVkZW50TmFtZXMnIGlzIHRoZSA4dGggY29sdW1uXHJcbiAgICAgIH0pKTtcclxuXHJcbiAgICAgIGNvbnNvbGUubG9nKFwiQWRtaW4gc3VtbWFyeSBwcm9jZXNzZWQ6XCIsIHN1bW1hcnkpO1xyXG5cclxuICAgICAgY29uc29sZS5sb2coXCJBZG1pbiBzdW1tYXJ5IGZldGNoZWQgc3VjY2Vzc2Z1bGx5OlwiLCBzdW1tYXJ5KTtcclxuXHJcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XHJcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcclxuICAgICAgICBzdW1tYXJ5LFxyXG4gICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxyXG4gICAgICB9KTtcclxuICAgIH0gY2F0Y2ggKHNoZWV0c0Vycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJHb29nbGUgU2hlZXRzIEFQSSBlcnJvciBmZXRjaGluZyBhZG1pbiBzdW1tYXJ5OlwiLCBzaGVldHNFcnJvcik7XHJcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcclxuICAgICAgICB7XHJcbiAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcclxuICAgICAgICAgIGVycm9yOiBgRmFpbGVkIHRvIGZldGNoIGFkbWluIHN1bW1hcnkuIFBsZWFzZSBlbnN1cmUgdGhlICdTdW1tYXJ5JyB0YWIgZXhpc3RzIGluIHlvdXIgQWRtaW4gTWFzdGVyIFNoZWV0IGFuZCBwZXJtaXNzaW9ucyBhcmUgY29ycmVjdC5gLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgeyBzdGF0dXM6IDUwMCB9LFxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKFwiQWRtaW4gc3VtbWFyeSBBUEkgZXJyb3I6XCIsIGVycm9yKTtcclxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcclxuICAgICAge1xyXG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICAgIGVycm9yOiBcIlNlcnZlciBlcnJvciB3aGlsZSBmZXRjaGluZyBhZG1pbiBzdW1tYXJ5XCIsXHJcbiAgICAgIH0sXHJcbiAgICAgIHsgc3RhdHVzOiA1MDAgfSxcclxuICAgICk7XHJcbiAgfVxyXG59XHJcbiJdLCJuYW1lcyI6WyJOZXh0UmVzcG9uc2UiLCJHb29nbGVTaGVldHNTZXJ2aWNlIiwiU1BSRUFEU0hFRVRfQ09ORklHIiwiR0VUIiwic2hlZXRzU2VydmljZSIsImFkbWluTWFzdGVyU2hlZXRJZCIsIkFETUlOX01BU1RFUiIsImlkIiwic3VtbWFyeVNoZWV0TmFtZSIsInN1bW1hcnlSYW5nZSIsImRhdGEiLCJnZXRTaGVldERhdGEiLCJjb25zb2xlIiwibG9nIiwidmFsdWVzIiwibGVuZ3RoIiwianNvbiIsInN1Y2Nlc3MiLCJzdW1tYXJ5Iiwic2xpY2UiLCJtYXAiLCJyb3ciLCJzdGFuZGFyZCIsInJhbmsiLCJOdW1iZXIiLCJwYXJzZUludCIsInByb2plY3RJZCIsInByb2plY3RUaXRsZSIsInRoZW1lIiwicHJvamVjdEF2Z1Njb3JlIiwicGFyc2VGbG9hdCIsImYiLCJzdHVkZW50TmFtZXMiLCJ0aW1lc3RhbXAiLCJEYXRlIiwidG9JU09TdHJpbmciLCJzaGVldHNFcnJvciIsImVycm9yIiwic3RhdHVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./app/api/admin/summary/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/google-sheets.ts":
/*!******************************!*\
  !*** ./lib/google-sheets.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GOOGLE_SHEETS_CONFIG: () => (/* binding */ GOOGLE_SHEETS_CONFIG),\n/* harmony export */   GoogleSheetsService: () => (/* binding */ GoogleSheetsService),\n/* harmony export */   SPREADSHEET_CONFIG: () => (/* binding */ SPREADSHEET_CONFIG),\n/* harmony export */   googleSheetsService: () => (/* binding */ googleSheetsService)\n/* harmony export */ });\n/* harmony import */ var google_auth_library__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! google-auth-library */ \"(rsc)/./node_modules/google-auth-library/build/src/index.js\");\n/* harmony import */ var googleapis__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! googleapis */ \"(rsc)/./node_modules/googleapis/build/src/index.js\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var os__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! os */ \"os\");\n/* harmony import */ var os__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(os__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\n\nconst CLASS_SHEET_IDS_PATH = path__WEBPACK_IMPORTED_MODULE_2__.resolve(process.cwd(), \"lib/class-sheet-ids.json\");\nfunction loadClassSheetIds() {\n    try {\n        const raw = fs__WEBPACK_IMPORTED_MODULE_1__.readFileSync(CLASS_SHEET_IDS_PATH, \"utf-8\");\n        return JSON.parse(raw);\n    } catch  {\n        return {};\n    }\n}\nfunction saveClassSheetIds(ids) {\n    fs__WEBPACK_IMPORTED_MODULE_1__.writeFileSync(CLASS_SHEET_IDS_PATH, JSON.stringify(ids, null, 2), \"utf-8\");\n}\n// Configuration for Google Sheets API\nconst GOOGLE_SHEETS_CONFIG = {\n    scopes: [\n        \"https://www.googleapis.com/auth/spreadsheets\"\n    ]\n};\n// Spreadsheet configurations - changed to 'let' to allow dynamic updates for demonstration\nconst persistedIds = loadClassSheetIds();\nlet SPREADSHEET_CONFIG = {\n    CREDENTIALS: {\n        id: process.env.CREDENTIALS_SPREADSHEET_ID || \"1juP3Eg24GYgOmFcxpNMfbUSXK4m7xTqzlN-Cw9ndYQc\",\n        range: \"Sheet1!A:C\"\n    },\n    ADMIN_MASTER: {\n        id: process.env.ADMIN_MASTER_SPREADSHEET_ID || \"1snk-FZaxyZbSu_Ww-oPnam8JxZ2RLg3etI5TBkr-T1A\"\n    },\n    CLASSES: {\n        \"Class 4\": {\n            id: persistedIds[\"Class 4\"],\n            baseSheet: \"BaseSheet\",\n            range: \"Sheet1!A:F\"\n        },\n        \"Class 5\": {\n            id: persistedIds[\"Class 5\"],\n            baseSheet: \"BaseSheet\",\n            range: \"Sheet1!A:F\"\n        },\n        \"Class 6\": {\n            id: persistedIds[\"Class 6\"],\n            baseSheet: \"BaseSheet\",\n            range: \"Sheet1!A:F\"\n        },\n        \"Class 7\": {\n            id: persistedIds[\"Class 7\"],\n            baseSheet: \"BaseSheet\",\n            range: \"Sheet1!A:F\"\n        },\n        \"Class 8\": {\n            id: persistedIds[\"Class 8\"],\n            baseSheet: \"BaseSheet\",\n            range: \"Sheet1!A:F\"\n        },\n        \"Class 9\": {\n            id: persistedIds[\"Class 9\"],\n            baseSheet: \"BaseSheet\",\n            range: \"Sheet1!A:F\"\n        },\n        \"Class 10\": {\n            id: persistedIds[\"Class 10\"],\n            baseSheet: \"BaseSheet\",\n            range: \"Sheet1!A:F\"\n        },\n        \"Class 11\": {\n            id: persistedIds[\"Class 11\"],\n            baseSheet: \"BaseSheet\",\n            range: \"Sheet1!A:F\"\n        },\n        \"Class 12\": {\n            id: persistedIds[\"Class 12\"],\n            baseSheet: \"BaseSheet\",\n            range: \"Sheet1!A:F\"\n        }\n    }\n};\nclass GoogleSheetsService {\n    constructor(){\n        try {\n            const base64Key = process.env.GOOGLE_SERVICE_ACCOUNT_KEY_BASE64;\n            if (!base64Key) {\n                throw new Error(\"GOOGLE_SERVICE_ACCOUNT_KEY_BASE64 environment variable is not set. Please configure your service account key as a Base64 encoded string.\");\n            }\n            // Decode and write to a temp file in the OS temp directory\n            const keyData = Buffer.from(base64Key, \"base64\").toString(\"utf8\");\n            const tmpDir = os__WEBPACK_IMPORTED_MODULE_3__.tmpdir();\n            const keyPath = path__WEBPACK_IMPORTED_MODULE_2__.join(tmpDir, \"service-account-key.json\");\n            fs__WEBPACK_IMPORTED_MODULE_1__.writeFileSync(keyPath, keyData);\n            this.auth = new google_auth_library__WEBPACK_IMPORTED_MODULE_0__.GoogleAuth({\n                keyFile: keyPath,\n                scopes: GOOGLE_SHEETS_CONFIG.scopes\n            });\n            this.sheets = googleapis__WEBPACK_IMPORTED_MODULE_4__.google.sheets({\n                version: \"v4\",\n                auth: this.auth\n            });\n            console.log(\"\\uD83D\\uDD17 Google Sheets API initialized with service account key from Base64.\");\n        } catch (err) {\n            console.error(\"❌ Error initializing Google Sheets API:\", err);\n            throw err;\n        }\n    }\n    async getSheetData(spreadsheetId, range) {\n        try {\n            console.log(`🔗 Fetching data from Google Sheets: ${spreadsheetId}, Range: ${range}`);\n            const response = await this.sheets.spreadsheets.values.get({\n                spreadsheetId,\n                range\n            });\n            return {\n                values: response.data.values || [],\n                range,\n                spreadsheetId\n            };\n        } catch (error) {\n            console.error(\"Error fetching sheet data:\", error);\n            throw new Error(`Failed to fetch data from spreadsheet ${spreadsheetId}. Please check permissions and spreadsheet ID.`);\n        }\n    }\n    async batchGetSheetData(spreadsheetId, ranges) {\n        try {\n            const response = await this.sheets.spreadsheets.values.batchGet({\n                spreadsheetId,\n                ranges\n            });\n            const result = {};\n            (response.data.valueRanges || []).forEach((valueRange)=>{\n                result[valueRange.range] = valueRange.values || [];\n            });\n            return result;\n        } catch (error) {\n            console.error(\"Error in batchGetSheetData:\", error);\n            throw new Error(`Failed to batch get data from spreadsheet ${spreadsheetId}.`);\n        }\n    }\n    async getCredentials() {\n        try {\n            const data = await this.getSheetData(SPREADSHEET_CONFIG.CREDENTIALS.id, SPREADSHEET_CONFIG.CREDENTIALS.range);\n            if (!data.values || data.values.length === 0) {\n                throw new Error(\"No credentials found in the spreadsheet\");\n            }\n            // Skip header row and map to credential objects\n            return data.values.slice(1).map((row)=>({\n                    username: row[0] || \"\",\n                    password: row[1] || \"\",\n                    role: row[2] || \"\"\n                })).filter((cred)=>cred.username && cred.password && cred.role);\n        } catch (error) {\n            console.error(\"Error fetching credentials:\", error);\n            throw new Error(\"Failed to fetch credentials from Google Sheets\");\n        }\n    }\n    async getProjectIds(className) {\n        try {\n            const classConfig = this.getClassConfig(className);\n            if (!classConfig) {\n                throw new Error(`No configuration found for class: ${className}`);\n            }\n            const data = await this.getSheetData(classConfig.id, classConfig.range);\n            if (!data.values || data.values.length === 0) {\n                return [];\n            }\n            // Skip header row and extract Project IDs from column E (index 4)\n            const projectIds = data.values.slice(1) // Skip header row\n            .map((row)=>row[4]) // Column E (Project ID) is at index 4\n            .filter((id)=>id && id.trim() !== \"\") // Remove empty cells\n            .map((id)=>id.trim()) // Clean whitespace\n            ;\n            // Return unique project IDs only\n            return [\n                ...new Set(projectIds)\n            ];\n        } catch (error) {\n            console.error(`Error fetching project IDs for ${className}:`, error);\n            throw new Error(`Failed to fetch project IDs for ${className} from Google Sheets`);\n        }\n    }\n    async getStudentsByProjectId(className, projectId) {\n        try {\n            const classConfig = this.getClassConfig(className);\n            if (!classConfig) {\n                throw new Error(`No configuration found for class: ${className}`);\n            }\n            const data = await this.getSheetData(classConfig.id, classConfig.range);\n            if (!data.values || data.values.length === 0) {\n                return [];\n            }\n            // Skip header row and filter by Project ID\n            const students = data.values.slice(1) // Skip header row\n            .filter((row)=>row[4] && row[4].trim() === projectId.trim()) // Filter by Project ID\n            .map((row)=>({\n                    sno: row[0] || \"\",\n                    studentName: row[1] || \"\",\n                    grade: row[2] || \"\",\n                    projectTitle: row[3] || \"\",\n                    projectId: row[4] || \"\",\n                    theme: row[5] || \"\"\n                })).filter((student)=>student.studentName && student.projectId);\n            return students;\n        } catch (error) {\n            console.error(`Error fetching students for project ${projectId}:`, error);\n            throw new Error(`Failed to fetch students for project ${projectId} from Google Sheets`);\n        }\n    }\n    async getJudgeScores(className, judgeName, projectId) {\n        try {\n            const classConfig = this.getClassConfig(className);\n            if (!classConfig) {\n                throw new Error(`No configuration found for class: ${className}`);\n            }\n            const judgeSheetName = `Judge_${judgeName}`;\n            const judgeRange = `${judgeSheetName}!A:K` // Updated range to include Theme Fit (assuming column K)\n            ;\n            try {\n                const data = await this.getSheetData(classConfig.id, judgeRange);\n                if (!data.values || data.values.length === 0) {\n                    return [];\n                }\n                // Skip header row and optionally filter by Project ID\n                let scores = data.values.slice(1) // Skip header row\n                .map((row)=>({\n                        sno: row[0] || \"\",\n                        studentName: row[1] || \"\",\n                        grade: row[2] || \"\",\n                        projectTitle: row[3] || \"\",\n                        projectId: row[4] || \"\",\n                        creativity: row[5] ? Number.parseFloat(row[5]) : null,\n                        scientificThought: row[6] ? Number.parseFloat(row[6]) : null,\n                        technicalSkills: row[7] ? Number.parseFloat(row[7]) : null,\n                        presentation: row[8] ? Number.parseFloat(row[8]) : null,\n                        status: row[9] || \"Present\",\n                        themeFit: row[10] || null\n                    }));\n                console.log(`🔗 Fetched ${scores.length} scores from ${judgeSheetName} for class ${className}`);\n                // Filter by project ID if specified\n                if (projectId) {\n                    scores = scores.filter((score)=>score.projectId.trim() === projectId.trim());\n                }\n                return scores;\n            } catch (error) {\n                // Judge sheet doesn't exist yet or is empty, which is fine for initial fetch\n                console.log(`Judge sheet ${judgeSheetName} doesn't exist yet or is empty.`);\n                return [];\n            }\n        } catch (error) {\n            console.error(`Error fetching judge scores:`, error);\n            throw new Error(`Failed to fetch judge scores from Google Sheets`);\n        }\n    }\n    async saveJudgeScores(className, judgeName, scores) {\n        try {\n            const classConfig = this.getClassConfig(className);\n            if (!classConfig) {\n                throw new Error(`No configuration found for class: ${className}`);\n            }\n            const judgeSheetName = `Judge_${judgeName}`;\n            const judgeHeaderRow = [\n                \"S.No.\",\n                \"Name of the Student\",\n                \"Grade\",\n                \"Project Title\",\n                \"Project ID\",\n                \"Creativity & Imagination\",\n                \"Scientific Thought\",\n                \"Technical Skills\",\n                \"Presentation\",\n                \"Status\",\n                \"Theme Fit\"\n            ];\n            // Ensure judge sheet exists and has header\n            await this.ensureSheetExists(classConfig.id, judgeSheetName, judgeHeaderRow);\n            // Prepare new score rows for appending\n            const newRows = scores.map((score)=>[\n                    score.sno,\n                    score.studentName,\n                    score.grade,\n                    score.projectTitle,\n                    score.projectId,\n                    score.creativity?.toString() || \"\",\n                    score.scientificThought?.toString() || \"\",\n                    score.technicalSkills?.toString() || \"\",\n                    score.presentation?.toString() || \"\",\n                    score.status || \"Present\",\n                    score.themeFit || \"\"\n                ]);\n            // Append new scores (never overwrite)\n            await this.sheets.spreadsheets.values.append({\n                spreadsheetId: classConfig.id,\n                range: `${judgeSheetName}!A:K`,\n                valueInputOption: \"USER_ENTERED\",\n                resource: {\n                    values: newRows\n                }\n            });\n            console.log(`✅ Appended ${newRows.length} new score rows to ${judgeSheetName}`);\n        } catch (error) {\n            console.error(`Error appending judge scores:`, error);\n            throw new Error(`Failed to append judge scores to Google Sheets`);\n        }\n    }\n    async getExistingJudgeData(spreadsheetId, sheetName) {\n        try {\n            const response = await this.sheets.spreadsheets.values.get({\n                spreadsheetId,\n                range: `${sheetName}!A:K`\n            });\n            return response.data.values || [];\n        } catch (error) {\n            // Sheet doesn't exist or is empty\n            return [];\n        }\n    }\n    async ensureSheetExists(spreadsheetId, sheetName, headerRow) {\n        try {\n            const spreadsheet = await this.sheets.spreadsheets.get({\n                spreadsheetId: spreadsheetId,\n                fields: \"sheets.properties.title,sheets.properties.sheetId\"\n            });\n            const sheetExists = spreadsheet.data.sheets?.some((sheet)=>sheet.properties.title === sheetName);\n            if (!sheetExists) {\n                await this.sheets.spreadsheets.batchUpdate({\n                    spreadsheetId: spreadsheetId,\n                    resource: {\n                        requests: [\n                            {\n                                addSheet: {\n                                    properties: {\n                                        title: sheetName\n                                    }\n                                }\n                            }\n                        ]\n                    }\n                });\n                console.log(`✅ Created new sheet: ${sheetName} in spreadsheet ${spreadsheetId}`);\n                // If header row is provided, write it\n                if (headerRow && headerRow.length > 0) {\n                    await this.sheets.spreadsheets.values.append({\n                        spreadsheetId: spreadsheetId,\n                        range: `${sheetName}!A1`,\n                        valueInputOption: \"USER_ENTERED\",\n                        resource: {\n                            values: [\n                                headerRow\n                            ]\n                        }\n                    });\n                    console.log(`✅ Added header to new sheet: ${sheetName}`);\n                }\n            }\n        } catch (error) {\n            console.error(`Error ensuring sheet ${sheetName} exists in ${spreadsheetId}:`, error);\n            throw new Error(`Failed to create or verify sheet: ${sheetName}`);\n        }\n    }\n    async getAllSheetTitles(spreadsheetId) {\n        try {\n            const response = await this.sheets.spreadsheets.get({\n                spreadsheetId: spreadsheetId,\n                fields: \"sheets.properties.title\"\n            });\n            return response.data.sheets?.map((sheet)=>sheet.properties.title) || [];\n        } catch (error) {\n            console.error(`Error fetching sheet titles for ${spreadsheetId}:`, error);\n            throw new Error(`Failed to fetch sheet titles for spreadsheet ${spreadsheetId}.`);\n        }\n    }\n    async getAllJudgeSheetNames(classSpreadsheetId) {\n        const allSheetTitles = await this.getAllSheetTitles(classSpreadsheetId);\n        return allSheetTitles.filter((title)=>title.startsWith(\"Judge_\"));\n    }\n    async getProjectDetailsMap(className) {\n        const classConfig = this.getClassConfig(className);\n        if (!classConfig) {\n            throw new Error(`No configuration found for class: ${className}`);\n        }\n        const data = await this.getSheetData(classConfig.id, classConfig.range) // Reads Sheet1!A:F\n        ;\n        const projectMap = new Map();\n        if (data.values && data.values.length > 1) {\n            // Skip header\n            data.values.slice(1).forEach((row)=>{\n                const projectId = row[4]?.trim() // Column E\n                ;\n                const projectTitle = row[3]?.trim() // Column D\n                ;\n                const theme = row[5]?.trim() // Column F\n                ;\n                const studentName = row[1]?.trim() // Column B\n                ;\n                if (projectId) {\n                    if (!projectMap.has(projectId)) {\n                        projectMap.set(projectId, {\n                            title: projectTitle || \"\",\n                            theme: theme || \"\",\n                            studentNames: new Set()\n                        });\n                    }\n                    if (studentName) {\n                        projectMap.get(projectId)?.studentNames.add(studentName);\n                    }\n                }\n            });\n        }\n        return projectMap;\n    }\n    async processClassScores(className) {\n        const classConfig = this.getClassConfig(className);\n        if (!classConfig) {\n            throw new Error(`No configuration found for class: ${className}`);\n        }\n        const classSpreadsheetId = classConfig.id;\n        const projectDetailsMap = await this.getProjectDetailsMap(className);\n        console.log(`[${className}] Found ${projectDetailsMap.size} unique projects from BaseSheet.`);\n        const judgeSheetNames = await this.getAllJudgeSheetNames(classSpreadsheetId);\n        console.log(`[${className}] Found ${judgeSheetNames.length} judge sheets.`);\n        // Map to store the latest score for each project by each judge\n        const latestProjectScoresByJudge = new Map() // projectId -> (judgeName -> latestScore)\n        ;\n        const judgeRanges = judgeSheetNames.map((judgeSheetName)=>`${judgeSheetName}!A:K`);\n        console.log(\"judgeRangeMAddy\");\n        console.log(`[${className}] Fetching data for judgeRangeMAddy sheets: ${judgeRanges}`);\n        const batchData = await this.batchGetSheetData(classSpreadsheetId, judgeRanges);\n        console.log(\"batchData:\", JSON.stringify(batchData, null, 2));\n        console.log(`[${className}] FetchedMaddy data for ${judgeRanges.length} ${judgeRanges} ${batchData} judge sheets in batch.`);\n        for (const judgeSheetName of judgeSheetNames){\n            console.log(`[${className}] Processing judge sheet maddy: ${judgeSheetName}`);\n            const judgeName = judgeSheetName.replace(\"Judge_\", \"\");\n            const values = batchData[`${judgeSheetName}!A1:K1000`] || [];\n            console.log(`[${className}] FoundMAddys ${values.length} rows in sheet ${judgeSheetName} for Judge ${judgeName}.`);\n            if (values.length <= 1) continue; // skip if only header or empty\n            // Parse scores as in getJudgeScores\n            const scoresForJudge = values.slice(1).map((row)=>({\n                    sno: row[0] || \"\",\n                    studentName: row[1] || \"\",\n                    grade: row[2] || \"\",\n                    projectTitle: row[3] || \"\",\n                    projectId: row[4] || \"\",\n                    creativity: row[5] ? Number.parseFloat(row[5]) : null,\n                    scientificThought: row[6] ? Number.parseFloat(row[6]) : null,\n                    technicalSkills: row[7] ? Number.parseFloat(row[7]) : null,\n                    presentation: row[8] ? Number.parseFloat(row[8]) : null,\n                    status: row[9] || \"Present\",\n                    themeFit: row[10] || null\n                }));\n            console.log(`[${className}] FoundMaddy ${scoresForJudge.length} scores for Judge ${judgeName} in sheet ${judgeSheetName}.`);\n            for (const score of scoresForJudge){\n                const pId = score.projectId.trim();\n                console.log(`[${className}] Processing score for Project ${pId} by Judge ${judgeName}:`, score);\n                if (!latestProjectScoresByJudge.has(pId)) {\n                    latestProjectScoresByJudge.set(pId, new Map());\n                }\n                latestProjectScoresByJudge.get(pId)?.set(judgeName, score);\n            }\n        }\n        console.log(`[${className}] Collected latest scores for projects from each judge.`);\n        console.log(`[${className}] latestProjectScoresByJudge for a sample project (e.g., P4001):`, latestProjectScoresByJudge.get(\"P4001\"));\n        // Aggregate scores per project\n        const projectAggregatedScores = {};\n        // Initialize projectAggregatedScores with details from BaseSheet\n        for (const [pId, details] of projectDetailsMap.entries()){\n            projectAggregatedScores[pId] = {\n                projectTitle: details.title,\n                theme: details.theme,\n                creativitySum: 0,\n                scientificThoughtSum: 0,\n                technicalSkillsSum: 0,\n                presentationSum: 0,\n                judgeCount: 0,\n                absentCount: 0,\n                studentNames: Array.from(details.studentNames).sort()\n            };\n        }\n        // Populate aggregated scores from judge submissions\n        for (const [pId, judgeScoresMap] of latestProjectScoresByJudge.entries()){\n            console.log(`[${className}] Processing scores for Project ${pId} from judges:`, Array.from(judgeScoresMap.keys()));\n            console.log(`[${className}] judgeScoresMap for Project ${pId} has ${judgeScoresMap.size} entries.`);\n            if (!projectAggregatedScores[pId]) {\n                // This project was scored but not found in BaseSheet (e.g., if BaseSheet is incomplete)\n                // Try to get details from the first score entry for this project\n                const firstScore = Array.from(judgeScoresMap.values())[0];\n                projectAggregatedScores[pId] = {\n                    projectTitle: firstScore?.projectTitle || \"\",\n                    theme: projectDetailsMap.get(pId)?.theme || \"\",\n                    creativitySum: 0,\n                    scientificThoughtSum: 0,\n                    technicalSkillsSum: 0,\n                    presentationSum: 0,\n                    judgeCount: 0,\n                    absentCount: 0,\n                    studentNames: []\n                };\n                console.warn(`[${className}] Project ${pId} found in judge sheets but not in BaseSheet. Student names might be incomplete.`);\n            }\n            for (const [judgeName, score] of judgeScoresMap.entries()){\n                if (score.status === \"Absent\") {\n                    console.log(`[${className}] Judge ${judgeName} marked Project ${pId} as Absent.`);\n                    projectAggregatedScores[pId].absentCount++;\n                } else {\n                    // Present\n                    console.log(`[${className}] Adding score for Project ${pId} by Judge ${judgeName}: Creativity=${score.creativity}, ScientificThought=${score.scientificThought}, TechnicalSkills=${score.technicalSkills}, Presentation=${score.presentation}`);\n                    projectAggregatedScores[pId].judgeCount++;\n                    projectAggregatedScores[pId].creativitySum += score.creativity || 0;\n                    projectAggregatedScores[pId].scientificThoughtSum += score.scientificThought || 0;\n                    projectAggregatedScores[pId].technicalSkillsSum += score.technicalSkills || 0;\n                    projectAggregatedScores[pId].presentationSum += score.presentation || 0;\n                }\n            }\n        }\n        console.log(`[${className}] Aggregation complete for project scores.`);\n        console.log(`[${className}] projectAggregatedScores for a sample project (e.g., P4001):`, projectAggregatedScores[\"P4001\"]);\n        // Calculate project averages and prepare rows for \"Score\" tab\n        const scoreTabRows = [];\n        scoreTabRows.push([\n            \"Project ID\",\n            \"Project Title\",\n            \"Theme\",\n            \"Avg Creativity\",\n            \"Avg Scientific Thought\",\n            \"Avg Technical Skills\",\n            \"Avg Presentation\",\n            \"Project Average Score\",\n            \"Student Names\"\n        ]) // New Header for Score tab\n        ;\n        const projectsForScoreTab = [];\n        for(const pId in projectAggregatedScores){\n            const projectData = projectAggregatedScores[pId];\n            let avgCreativity = 0;\n            let avgScientificThought = 0;\n            let avgTechnicalSkills = 0;\n            let avgPresentation = 0;\n            let projectAvgScore = 0;\n            if (projectData.judgeCount > 0) {\n                avgCreativity = projectData.creativitySum / projectData.judgeCount;\n                avgScientificThought = projectData.scientificThoughtSum / projectData.judgeCount;\n                avgTechnicalSkills = projectData.technicalSkillsSum / projectData.judgeCount;\n                avgPresentation = projectData.presentationSum / projectData.judgeCount;\n                projectAvgScore = (avgCreativity + avgScientificThought + avgTechnicalSkills + avgPresentation) / 4;\n                console.log(\"jaguuu\", judgeSheetNames, avgCreativity, avgScientificThought, avgTechnicalSkills, avgPresentation, projectAvgScore);\n            } else if (projectData.absentCount > 0 && projectData.judgeCount === 0) {\n                // All judges marked project absent, so all scores are 0\n                avgCreativity = 0;\n                avgScientificThought = 0;\n                avgTechnicalSkills = 0;\n                avgPresentation = 0;\n                projectAvgScore = 0;\n            }\n            // If no judges scored the project (judgeCount and absentCount are 0), all averages remain 0 (initialized)\n            projectsForScoreTab.push({\n                projectId: pId,\n                projectTitle: projectData.projectTitle,\n                theme: projectData.theme,\n                avgCreativity: avgCreativity,\n                avgScientificThought: avgScientificThought,\n                avgTechnicalSkills: avgTechnicalSkills,\n                avgPresentation: avgPresentation,\n                projectAvgScore: projectAvgScore,\n                studentNames: projectData.studentNames.join(\", \")\n            });\n        }\n        // Sort projects for the Score tab by Project ID for consistent ordering\n        projectsForScoreTab.sort((a, b)=>a.projectId.localeCompare(b.projectId));\n        projectsForScoreTab.forEach((project)=>{\n            scoreTabRows.push([\n                project.projectId,\n                project.projectTitle,\n                project.theme,\n                project.avgCreativity.toFixed(2),\n                project.avgScientificThought.toFixed(2),\n                project.avgTechnicalSkills.toFixed(2),\n                project.avgPresentation.toFixed(2),\n                project.projectAvgScore.toFixed(2),\n                project.studentNames\n            ]);\n        });\n        console.log(`[${className}] Prepared ${scoreTabRows.length - 1} rows for \"Score\" tab (excluding header).`);\n        console.log(`[${className}] Final scoreTabRows before writing:`, scoreTabRows);\n        const scoreSheetName = \"Score\";\n        await this.ensureSheetExists(classSpreadsheetId, scoreSheetName, scoreTabRows[0]) // Pass header for creation\n        ;\n        // Clear existing content before writing new data (excluding header)\n        await this.sheets.spreadsheets.values.clear({\n            spreadsheetId: classSpreadsheetId,\n            range: `${scoreSheetName}!A2:I`\n        });\n        // Write new data (including header)\n        if (scoreTabRows.length > 1) {\n            // Only update if there's data beyond the header\n            await this.sheets.spreadsheets.values.update({\n                spreadsheetId: classSpreadsheetId,\n                range: `${scoreSheetName}!A1`,\n                valueInputOption: \"USER_ENTERED\",\n                resource: {\n                    values: scoreTabRows\n                }\n            });\n            console.log(`✅ Updated \"Score\" tab for ${className} with ${scoreTabRows.length - 1} project average entries.`);\n        } else {\n            console.log(`[${className}] No project average scores to write to \"Score\" tab.`);\n        }\n    }\n    async getTopProjects(className) {\n        const classConfig = this.getClassConfig(className);\n        if (!classConfig) {\n            throw new Error(`No configuration found for class: ${className}`);\n        }\n        const scoreSheetName = \"Score\";\n        const scoreRange = `${scoreSheetName}!A:I` // Updated range for new Score tab columns\n        ;\n        try {\n            const data = await this.getSheetData(classConfig.id, scoreRange);\n            console.log(`[${className}] Read \"Score\" tab for top projects. Rows fetched: ${data.values.length}.`);\n            if (!data.values || data.values.length <= 1) {\n                // No data or only header\n                console.log(`[${className}] \"Score\" tab is empty or only has header. No projects to rank.`);\n                return [];\n            }\n            const projects = [];\n            data.values.slice(1).forEach((row)=>{\n                const projectId = row[0]?.trim() // Project ID is now column A\n                ;\n                const projectTitle = row[1]?.trim() // Project Title is now column B\n                ;\n                const theme = row[2]?.trim() // Theme is now column C\n                ;\n                const projectAvgScore = Number.parseFloat(row[7]) || 0 // Project Average Score is now column H (index 7)\n                ;\n                const studentNames = row[8]?.trim() || \"\" // Student Names is now column I (index 8)\n                ;\n                if (projectId) {\n                    projects.push({\n                        projectId: projectId,\n                        projectTitle: projectTitle,\n                        theme: theme,\n                        projectAvgScore: projectAvgScore,\n                        studentNames: studentNames\n                    });\n                } else {\n                    console.warn(`[${className}] Skipping row in \"Score\" tab for top projects due to missing Project ID: ${row.join(\", \")}`);\n                }\n            });\n            console.log(`[${className}] Parsed ${projects.length} projects from \"Score\" tab.`);\n            // Sort by project average score descending\n            projects.sort((a, b)=>b.projectAvgScore - a.projectAvgScore);\n            console.log(`[${className}] Projects sorted by average score.`);\n            const topProjects = [];\n            let currentRank = 1;\n            let projectsAdded = 0;\n            for(let i = 0; i < projects.length; i++){\n                const project = projects[i];\n                if (projectsAdded < 3) {\n                    topProjects.push({\n                        ...project,\n                        standard: className,\n                        rank: currentRank\n                    });\n                    projectsAdded++;\n                } else if (project.projectAvgScore === topProjects[topProjects.length - 1].projectAvgScore) {\n                    // Handle ties for 3rd place\n                    topProjects.push({\n                        ...project,\n                        standard: className,\n                        rank: currentRank\n                    });\n                } else {\n                    break; // Stop after top 3 (and ties)\n                }\n                // Update rank for next distinct score, only if current project's score is different from the last added project's score\n                if (i < projects.length - 1 && projects[i + 1].projectAvgScore < project.projectAvgScore) {\n                    currentRank = topProjects.length + 1;\n                }\n            }\n            console.log(`[${className}] Identified ${topProjects.length} top projects.`);\n            return topProjects;\n        } catch (error) {\n            console.error(`Error getting top projects for ${className}:`, error);\n            throw new Error(`Failed to get top projects for ${className}.`);\n        }\n    }\n    async updateAdminSummary(summaryData) {\n        const adminMasterSheetId = SPREADSHEET_CONFIG.ADMIN_MASTER.id;\n        const summarySheetName = \"Summary\";\n        const summaryHeader = [\n            \"Standard\",\n            \"Rank\",\n            \"Project ID\",\n            \"Project Title\",\n            \"Theme\",\n            \"Project Avg Score\",\n            \"Student Names\"\n        ] // Added Student Names\n        ;\n        await this.ensureSheetExists(adminMasterSheetId, summarySheetName, summaryHeader);\n        // Clear existing content in Summary tab (excluding header)\n        await this.sheets.spreadsheets.values.clear({\n            spreadsheetId: adminMasterSheetId,\n            range: `${summarySheetName}!A2:G`\n        });\n        if (summaryData.length === 0) {\n            console.log(\"No summary data to append to Admin Master Sheet.\");\n            return;\n        }\n        const rowsToAppend = summaryData.map((data)=>[\n                data.standard,\n                data.rank.toString(),\n                data.projectId,\n                data.projectTitle,\n                data.theme,\n                data.projectAvgScore.toFixed(2),\n                data.studentNames\n            ]);\n        await this.sheets.spreadsheets.values.append({\n            spreadsheetId: adminMasterSheetId,\n            range: `${summarySheetName}!A2`,\n            valueInputOption: \"USER_ENTERED\",\n            resource: {\n                values: rowsToAppend\n            }\n        });\n        console.log(`✅ Appended ${rowsToAppend.length} rows to \"Summary\" tab in Admin Master Sheet.`);\n    }\n    getClassConfig(className) {\n        return SPREADSHEET_CONFIG.CLASSES[className];\n    }\n    getSpreadsheetId(className) {\n        const classConfig = this.getClassConfig(className);\n        return classConfig?.id || \"\";\n    }\n    // New function to update a class's spreadsheet ID\n    updateClassSpreadsheetId(className, newId) {\n        if (SPREADSHEET_CONFIG.CLASSES[className]) {\n            // Update in-memory config\n            SPREADSHEET_CONFIG = {\n                ...SPREADSHEET_CONFIG,\n                CLASSES: {\n                    ...SPREADSHEET_CONFIG.CLASSES,\n                    [className]: {\n                        ...SPREADSHEET_CONFIG.CLASSES[className],\n                        id: newId\n                    }\n                }\n            };\n            // Persist to file\n            const ids = loadClassSheetIds();\n            ids[className] = newId;\n            saveClassSheetIds(ids);\n            console.log(`[Backend Simulation] Updated SPREADSHEET_CONFIG for ${className} to ID: ${newId} and persisted to file`);\n        } else {\n            console.warn(`[Backend Simulation] Class ${className} not found in SPREADSHEET_CONFIG.`);\n        }\n    }\n}\n// Export singleton instance\nconst googleSheetsService = new GoogleSheetsService();\nconst sheetTitlesCache = {};\nasync function getAllSheetTitlesCached(spreadsheetId) {\n    if (sheetTitlesCache[spreadsheetId]) {\n        return sheetTitlesCache[spreadsheetId];\n    }\n    const titles = await googleSheetsService.getAllSheetTitles(spreadsheetId);\n    sheetTitlesCache[spreadsheetId] = titles;\n    return titles;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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bUJBQW1CUSxPQUFPLENBQUNnRCxVQUFxRDt3QkFDbkZ0RCxJQUFJOEs7b0JBQ047Z0JBQ0Y7WUFDRjtZQUNBLGtCQUFrQjtZQUNsQixNQUFNdEwsTUFBTU47WUFDWk0sR0FBRyxDQUFDOEQsVUFBVSxHQUFHd0g7WUFDakJ2TCxrQkFBa0JDO1lBQ2xCaUMsUUFBUUMsR0FBRyxDQUFDLENBQUMsb0RBQW9ELEVBQUU0QixVQUFVLFFBQVEsRUFBRXdILE1BQU0sc0JBQXNCLENBQUM7UUFDdEgsT0FBTztZQUNMckosUUFBUWtILElBQUksQ0FBQyxDQUFDLDJCQUEyQixFQUFFckYsVUFBVSxpQ0FBaUMsQ0FBQztRQUN6RjtJQUNGO0FBQ0Y7QUFFQSw0QkFBNEI7QUFDckIsTUFBTXlILHNCQUFzQixJQUFJdkssc0JBQXFCO0FBRTVELE1BQU13SyxtQkFBMEQsQ0FBQztBQUVqRSxlQUFlQyx3QkFBd0JuSixhQUFxQjtJQUMxRCxJQUFJa0osZ0JBQWdCLENBQUNsSixjQUFjLEVBQUU7UUFDbkMsT0FBT2tKLGdCQUFnQixDQUFDbEosY0FBYztJQUN4QztJQUNBLE1BQU1vSixTQUFTLE1BQU1ILG9CQUFvQnhFLGlCQUFpQixDQUFDekU7SUFDM0RrSixnQkFBZ0IsQ0FBQ2xKLGNBQWMsR0FBR29KO0lBQ2xDLE9BQU9BO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Ly4vbGliL2dvb2dsZS1zaGVldHMudHM/NjJkNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHb29nbGVBdXRoIH0gZnJvbSBcImdvb2dsZS1hdXRoLWxpYnJhcnlcIlxuaW1wb3J0IHsgZ29vZ2xlIH0gZnJvbSBcImdvb2dsZWFwaXNcIlxuaW1wb3J0ICogYXMgZnMgZnJvbSBcImZzXCJcbmltcG9ydCAqIGFzIHBhdGggZnJvbSBcInBhdGhcIlxuaW1wb3J0ICogYXMgb3MgZnJvbSBcIm9zXCJcblxuY29uc3QgQ0xBU1NfU0hFRVRfSURTX1BBVEggPSBwYXRoLnJlc29sdmUocHJvY2Vzcy5jd2QoKSwgXCJsaWIvY2xhc3Mtc2hlZXQtaWRzLmpzb25cIilcblxuZnVuY3Rpb24gbG9hZENsYXNzU2hlZXRJZHMoKTogUmVjb3JkPHN0cmluZywgc3RyaW5nPiB7XG4gIHRyeSB7XG4gICAgY29uc3QgcmF3ID0gZnMucmVhZEZpbGVTeW5jKENMQVNTX1NIRUVUX0lEU19QQVRILCBcInV0Zi04XCIpXG4gICAgcmV0dXJuIEpTT04ucGFyc2UocmF3KVxuICB9IGNhdGNoIHtcbiAgICByZXR1cm4ge31cbiAgfVxufVxuXG5mdW5jdGlvbiBzYXZlQ2xhc3NTaGVldElkcyhpZHM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4pIHtcbiAgZnMud3JpdGVGaWxlU3luYyhDTEFTU19TSEVFVF9JRFNfUEFUSCwgSlNPTi5zdHJpbmdpZnkoaWRzLCBudWxsLCAyKSwgXCJ1dGYtOFwiKVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNoZWV0Q3JlZGVudGlhbCB7XG4gIHVzZXJuYW1lOiBzdHJpbmdcbiAgcGFzc3dvcmQ6IHN0cmluZ1xuICByb2xlOiBzdHJpbmdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTdHVkZW50UHJvamVjdCB7XG4gIHNubzogc3RyaW5nXG4gIHN0dWRlbnROYW1lOiBzdHJpbmdcbiAgZ3JhZGU6IHN0cmluZ1xuICBwcm9qZWN0VGl0bGU6IHN0cmluZ1xuICBwcm9qZWN0SWQ6IHN0cmluZ1xuICB0aGVtZT86IHN0cmluZyAvLyBBZGRlZCB0aGVtZSBmaWVsZFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEp1ZGdlU2NvcmUge1xuICBzbm86IHN0cmluZ1xuICBzdHVkZW50TmFtZTogc3RyaW5nXG4gIGdyYWRlOiBzdHJpbmdcbiAgcHJvamVjdFRpdGxlOiBzdHJpbmdcbiAgcHJvamVjdElkOiBzdHJpbmdcbiAgY3JlYXRpdml0eTogbnVtYmVyIHwgbnVsbFxuICBzY2llbnRpZmljVGhvdWdodDogbnVtYmVyIHwgbnVsbFxuICB0ZWNobmljYWxTa2lsbHM6IG51bWJlciB8IG51bGxcbiAgcHJlc2VudGF0aW9uOiBudW1iZXIgfCBudWxsXG4gIHN0YXR1cz86IHN0cmluZyAvLyBBZGRlZCBzdGF0dXMgZmllbGQgKGUuZy4sIFwiUHJlc2VudFwiLCBcIkFic2VudFwiKVxuICB0aGVtZUZpdD86IHN0cmluZyB8IG51bGwgLy8gQWRkZWQgdGhlbWVGaXQgZmllbGRcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTaGVldERhdGEge1xuICB2YWx1ZXM6IHN0cmluZ1tdW11cbiAgcmFuZ2U6IHN0cmluZ1xuICBzcHJlYWRzaGVldElkOiBzdHJpbmdcbn1cblxuaW50ZXJmYWNlIENsYXNzQ29uZmlnIHtcbiAgaWQ6IHN0cmluZ1xuICBiYXNlU2hlZXQ6IHN0cmluZ1xuICByYW5nZTogc3RyaW5nXG59XG5cbi8vIENvbmZpZ3VyYXRpb24gZm9yIEdvb2dsZSBTaGVldHMgQVBJXG5leHBvcnQgY29uc3QgR09PR0xFX1NIRUVUU19DT05GSUcgPSB7XG4gIHNjb3BlczogW1wiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9zcHJlYWRzaGVldHNcIl0sXG59XG5cbi8vIFNwcmVhZHNoZWV0IGNvbmZpZ3VyYXRpb25zIC0gY2hhbmdlZCB0byAnbGV0JyB0byBhbGxvdyBkeW5hbWljIHVwZGF0ZXMgZm9yIGRlbW9uc3RyYXRpb25cbmNvbnN0IHBlcnNpc3RlZElkcyA9IGxvYWRDbGFzc1NoZWV0SWRzKClcbmV4cG9ydCBsZXQgU1BSRUFEU0hFRVRfQ09ORklHID0ge1xuICBDUkVERU5USUFMUzoge1xuICAgIGlkOiBwcm9jZXNzLmVudi5DUkVERU5USUFMU19TUFJFQURTSEVFVF9JRCB8fCBcIjFqdVAzRWcyNEdZZ09tRmN4cE5NZmJVU1hLNG03eFRxemxOLUN3OW5kWVFjXCIsIC8vIFJFUExBQ0UgV0lUSCBZT1VSIENSRURFTlRJQUxTIFNIRUVUIElEXG4gICAgcmFuZ2U6IFwiU2hlZXQxIUE6Q1wiLCAvLyBVc2VybmFtZSwgUGFzc3dvcmQsIFJvbGVcbiAgfSxcbiAgQURNSU5fTUFTVEVSOiB7XG4gICAgaWQ6IHByb2Nlc3MuZW52LkFETUlOX01BU1RFUl9TUFJFQURTSEVFVF9JRCB8fCBcIjFzbmstRlpheHlaYlN1X1d3LW9QbmFtOEp4WjJSTGczZXRJNVRCa3ItVDFBXCIsIC8vIE5ldzogQWRtaW4gTWFzdGVyIFNoZWV0IElELCBkZWZhdWx0cyB0byBjcmVkZW50aWFscyBzaGVldFxuICB9LFxuICBDTEFTU0VTOiB7XG4gICAgXCJDbGFzcyA0XCI6IHtcbiAgICAgIGlkOiBwZXJzaXN0ZWRJZHNbXCJDbGFzcyA0XCJdLCAvLyBSRVBMQUNFXG4gICAgICBiYXNlU2hlZXQ6IFwiQmFzZVNoZWV0XCIsXG4gICAgICByYW5nZTogXCJTaGVldDEhQTpGXCIsIC8vIFVwZGF0ZWQgcmFuZ2UgdG8gaW5jbHVkZSBUaGVtZSAoYXNzdW1pbmcgY29sdW1uIEYpXG4gICAgfSxcbiAgICBcIkNsYXNzIDVcIjoge1xuICAgICAgaWQ6IHBlcnNpc3RlZElkc1tcIkNsYXNzIDVcIl0sIC8vIFJFUExBQ0VcbiAgICAgIGJhc2VTaGVldDogXCJCYXNlU2hlZXRcIixcbiAgICAgIHJhbmdlOiBcIlNoZWV0MSFBOkZcIiwgLy8gVXBkYXRlZCByYW5nZSB0byBpbmNsdWRlIFRoZW1lIChhc3N1bWluZyBjb2x1bW4gRilcbiAgICB9LFxuICAgIFwiQ2xhc3MgNlwiOiB7XG4gICAgICBpZDogcGVyc2lzdGVkSWRzW1wiQ2xhc3MgNlwiXSwgLy8gUkVQTEFDRVxuICAgICAgYmFzZVNoZWV0OiBcIkJhc2VTaGVldFwiLFxuICAgICAgcmFuZ2U6IFwiU2hlZXQxIUE6RlwiLCAvLyBVcGRhdGVkIHJhbmdlIHRvIGluY2x1ZGUgVGhlbWUgKGFzc3VtaW5nIGNvbHVtbiBGKVxuICAgIH0sXG4gICAgXCJDbGFzcyA3XCI6IHtcbiAgICAgIGlkOiBwZXJzaXN0ZWRJZHNbXCJDbGFzcyA3XCJdLCAvLyBSRVBMQUNFXG4gICAgICBiYXNlU2hlZXQ6IFwiQmFzZVNoZWV0XCIsXG4gICAgICByYW5nZTogXCJTaGVldDEhQTpGXCIsIC8vIFVwZGF0ZWQgcmFuZ2UgdG8gaW5jbHVkZSBUaGVtZSAoYXNzdW1pbmcgY29sdW1uIEYpXG4gICAgfSxcbiAgICBcIkNsYXNzIDhcIjoge1xuICAgICAgaWQ6IHBlcnNpc3RlZElkc1tcIkNsYXNzIDhcIl0sIC8vIFJFUExBQ0VcbiAgICAgIGJhc2VTaGVldDogXCJCYXNlU2hlZXRcIixcbiAgICAgIHJhbmdlOiBcIlNoZWV0MSFBOkZcIiwgLy8gVXBkYXRlZCByYW5nZSB0byBpbmNsdWRlIFRoZW1lIChhc3N1bWluZyBjb2x1bW4gRilcbiAgICB9LFxuICAgIFwiQ2xhc3MgOVwiOiB7XG4gICAgICBpZDogcGVyc2lzdGVkSWRzW1wiQ2xhc3MgOVwiXSwgLy8gUkVQTEFDRVxuICAgICAgYmFzZVNoZWV0OiBcIkJhc2VTaGVldFwiLFxuICAgICAgcmFuZ2U6IFwiU2hlZXQxIUE6RlwiLCAvLyBVcGRhdGVkIHJhbmdlIHRvIGluY2x1ZGUgVGhlbWUgKGFzc3VtaW5nIGNvbHVtbiBGKVxuICAgIH0sXG4gICAgXCJDbGFzcyAxMFwiOiB7XG4gICAgICBpZDogcGVyc2lzdGVkSWRzW1wiQ2xhc3MgMTBcIl0sIC8vIFJFUExBQ0VcbiAgICAgIGJhc2VTaGVldDogXCJCYXNlU2hlZXRcIixcbiAgICAgIHJhbmdlOiBcIlNoZWV0MSFBOkZcIiwgLy8gVXBkYXRlZCByYW5nZSB0byBpbmNsdWRlIFRoZW1lIChhc3N1bWluZyBjb2x1bW4gRilcbiAgICB9LFxuICAgIFwiQ2xhc3MgMTFcIjoge1xuICAgICAgaWQ6IHBlcnNpc3RlZElkc1tcIkNsYXNzIDExXCJdLCAvLyBSRVBMQUNFXG4gICAgICBiYXNlU2hlZXQ6IFwiQmFzZVNoZWV0XCIsXG4gICAgICByYW5nZTogXCJTaGVldDEhQTpGXCIsIC8vIFVwZGF0ZWQgcmFuZ2UgdG8gaW5jbHVkZSBUaGVtZSAoYXNzdW1pbmcgY29sdW1uIEYpXG4gICAgfSxcbiAgICBcIkNsYXNzIDEyXCI6IHtcbiAgICAgIGlkOiBwZXJzaXN0ZWRJZHNbXCJDbGFzcyAxMlwiXSwgLy8gUkVQTEFDRVxuICAgICAgYmFzZVNoZWV0OiBcIkJhc2VTaGVldFwiLFxuICAgICAgcmFuZ2U6IFwiU2hlZXQxIUE6RlwiLCAvLyBVcGRhdGVkIHJhbmdlIHRvIGluY2x1ZGUgVGhlbWUgKGFzc3VtaW5nIGNvbHVtbiBGKVxuICAgIH0sXG4gIH0sXG59XG5cbmV4cG9ydCBjbGFzcyBHb29nbGVTaGVldHNTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBhdXRoOiBHb29nbGVBdXRoXG4gIHByaXZhdGUgc2hlZXRzOiBhbnlcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgYmFzZTY0S2V5ID0gcHJvY2Vzcy5lbnYuR09PR0xFX1NFUlZJQ0VfQUNDT1VOVF9LRVlfQkFTRTY0O1xuICAgICAgaWYgKCFiYXNlNjRLZXkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIFwiR09PR0xFX1NFUlZJQ0VfQUNDT1VOVF9LRVlfQkFTRTY0IGVudmlyb25tZW50IHZhcmlhYmxlIGlzIG5vdCBzZXQuIFBsZWFzZSBjb25maWd1cmUgeW91ciBzZXJ2aWNlIGFjY291bnQga2V5IGFzIGEgQmFzZTY0IGVuY29kZWQgc3RyaW5nLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICAvLyBEZWNvZGUgYW5kIHdyaXRlIHRvIGEgdGVtcCBmaWxlIGluIHRoZSBPUyB0ZW1wIGRpcmVjdG9yeVxuICAgICAgY29uc3Qga2V5RGF0YSA9IEJ1ZmZlci5mcm9tKGJhc2U2NEtleSwgXCJiYXNlNjRcIikudG9TdHJpbmcoXCJ1dGY4XCIpO1xuICAgICAgY29uc3QgdG1wRGlyID0gb3MudG1wZGlyKCk7XG4gICAgICBjb25zdCBrZXlQYXRoID0gcGF0aC5qb2luKHRtcERpciwgXCJzZXJ2aWNlLWFjY291bnQta2V5Lmpzb25cIik7XG4gICAgICBmcy53cml0ZUZpbGVTeW5jKGtleVBhdGgsIGtleURhdGEpO1xuXG4gICAgICB0aGlzLmF1dGggPSBuZXcgR29vZ2xlQXV0aCh7XG4gICAgICAgIGtleUZpbGU6IGtleVBhdGgsXG4gICAgICAgIHNjb3BlczogR09PR0xFX1NIRUVUU19DT05GSUcuc2NvcGVzLFxuICAgICAgfSk7XG4gICAgICB0aGlzLnNoZWV0cyA9IGdvb2dsZS5zaGVldHMoeyB2ZXJzaW9uOiBcInY0XCIsIGF1dGg6IHRoaXMuYXV0aCB9KTtcbiAgICAgIGNvbnNvbGUubG9nKFwi8J+UlyBHb29nbGUgU2hlZXRzIEFQSSBpbml0aWFsaXplZCB3aXRoIHNlcnZpY2UgYWNjb3VudCBrZXkgZnJvbSBCYXNlNjQuXCIpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgY29uc29sZS5lcnJvcihcIuKdjCBFcnJvciBpbml0aWFsaXppbmcgR29vZ2xlIFNoZWV0cyBBUEk6XCIsIGVycik7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZ2V0U2hlZXREYXRhKHNwcmVhZHNoZWV0SWQ6IHN0cmluZywgcmFuZ2U6IHN0cmluZyk6IFByb21pc2U8U2hlZXREYXRhPiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnNvbGUubG9nKGDwn5SXIEZldGNoaW5nIGRhdGEgZnJvbSBHb29nbGUgU2hlZXRzOiAke3NwcmVhZHNoZWV0SWR9LCBSYW5nZTogJHtyYW5nZX1gKVxuXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuc2hlZXRzLnNwcmVhZHNoZWV0cy52YWx1ZXMuZ2V0KHtcbiAgICAgICAgc3ByZWFkc2hlZXRJZCxcbiAgICAgICAgcmFuZ2UsXG4gICAgICB9KVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZXM6IHJlc3BvbnNlLmRhdGEudmFsdWVzIHx8IFtdLFxuICAgICAgICByYW5nZSxcbiAgICAgICAgc3ByZWFkc2hlZXRJZCxcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGZldGNoaW5nIHNoZWV0IGRhdGE6XCIsIGVycm9yKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgRmFpbGVkIHRvIGZldGNoIGRhdGEgZnJvbSBzcHJlYWRzaGVldCAke3NwcmVhZHNoZWV0SWR9LiBQbGVhc2UgY2hlY2sgcGVybWlzc2lvbnMgYW5kIHNwcmVhZHNoZWV0IElELmAsXG4gICAgICApXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgYmF0Y2hHZXRTaGVldERhdGEoc3ByZWFkc2hlZXRJZDogc3RyaW5nLCByYW5nZXM6IHN0cmluZ1tdKTogUHJvbWlzZTx7IFtyYW5nZTogc3RyaW5nXTogc3RyaW5nW11bXSB9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5zaGVldHMuc3ByZWFkc2hlZXRzLnZhbHVlcy5iYXRjaEdldCh7XG4gICAgICAgIHNwcmVhZHNoZWV0SWQsXG4gICAgICAgIHJhbmdlcyxcbiAgICAgIH0pXG4gICAgICBjb25zdCByZXN1bHQ6IHsgW3JhbmdlOiBzdHJpbmddOiBzdHJpbmdbXVtdIH0gPSB7fVxuICAgICAgOyhyZXNwb25zZS5kYXRhLnZhbHVlUmFuZ2VzIHx8IFtdKS5mb3JFYWNoKCh2YWx1ZVJhbmdlOiBhbnkpID0+IHtcbiAgICAgICAgcmVzdWx0W3ZhbHVlUmFuZ2UucmFuZ2VdID0gdmFsdWVSYW5nZS52YWx1ZXMgfHwgW11cbiAgICAgIH0pXG4gICAgICByZXR1cm4gcmVzdWx0XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBpbiBiYXRjaEdldFNoZWV0RGF0YTpcIiwgZXJyb3IpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBiYXRjaCBnZXQgZGF0YSBmcm9tIHNwcmVhZHNoZWV0ICR7c3ByZWFkc2hlZXRJZH0uYClcbiAgICB9XG4gIH1cblxuICBhc3luYyBnZXRDcmVkZW50aWFscygpOiBQcm9taXNlPFNoZWV0Q3JlZGVudGlhbFtdPiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCB0aGlzLmdldFNoZWV0RGF0YShTUFJFQURTSEVFVF9DT05GSUcuQ1JFREVOVElBTFMuaWQsIFNQUkVBRFNIRUVUX0NPTkZJRy5DUkVERU5USUFMUy5yYW5nZSlcblxuICAgICAgaWYgKCFkYXRhLnZhbHVlcyB8fCBkYXRhLnZhbHVlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gY3JlZGVudGlhbHMgZm91bmQgaW4gdGhlIHNwcmVhZHNoZWV0XCIpXG4gICAgICB9XG5cbiAgICAgIC8vIFNraXAgaGVhZGVyIHJvdyBhbmQgbWFwIHRvIGNyZWRlbnRpYWwgb2JqZWN0c1xuICAgICAgcmV0dXJuIGRhdGEudmFsdWVzXG4gICAgICAgIC5zbGljZSgxKVxuICAgICAgICAubWFwKChyb3cpID0+ICh7XG4gICAgICAgICAgdXNlcm5hbWU6IHJvd1swXSB8fCBcIlwiLFxuICAgICAgICAgIHBhc3N3b3JkOiByb3dbMV0gfHwgXCJcIixcbiAgICAgICAgICByb2xlOiByb3dbMl0gfHwgXCJcIixcbiAgICAgICAgfSkpXG4gICAgICAgIC5maWx0ZXIoKGNyZWQpID0+IGNyZWQudXNlcm5hbWUgJiYgY3JlZC5wYXNzd29yZCAmJiBjcmVkLnJvbGUpXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBmZXRjaGluZyBjcmVkZW50aWFsczpcIiwgZXJyb3IpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gZmV0Y2ggY3JlZGVudGlhbHMgZnJvbSBHb29nbGUgU2hlZXRzXCIpXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZ2V0UHJvamVjdElkcyhjbGFzc05hbWU6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nW10+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgY2xhc3NDb25maWcgPSB0aGlzLmdldENsYXNzQ29uZmlnKGNsYXNzTmFtZSlcblxuICAgICAgaWYgKCFjbGFzc0NvbmZpZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIGNvbmZpZ3VyYXRpb24gZm91bmQgZm9yIGNsYXNzOiAke2NsYXNzTmFtZX1gKVxuICAgICAgfVxuXG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgdGhpcy5nZXRTaGVldERhdGEoY2xhc3NDb25maWcuaWQsIGNsYXNzQ29uZmlnLnJhbmdlKVxuXG4gICAgICBpZiAoIWRhdGEudmFsdWVzIHx8IGRhdGEudmFsdWVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gW11cbiAgICAgIH1cblxuICAgICAgLy8gU2tpcCBoZWFkZXIgcm93IGFuZCBleHRyYWN0IFByb2plY3QgSURzIGZyb20gY29sdW1uIEUgKGluZGV4IDQpXG4gICAgICBjb25zdCBwcm9qZWN0SWRzID0gZGF0YS52YWx1ZXNcbiAgICAgICAgLnNsaWNlKDEpIC8vIFNraXAgaGVhZGVyIHJvd1xuICAgICAgICAubWFwKChyb3cpID0+IHJvd1s0XSkgLy8gQ29sdW1uIEUgKFByb2plY3QgSUQpIGlzIGF0IGluZGV4IDRcbiAgICAgICAgLmZpbHRlcigoaWQpID0+IGlkICYmIGlkLnRyaW0oKSAhPT0gXCJcIikgLy8gUmVtb3ZlIGVtcHR5IGNlbGxzXG4gICAgICAgIC5tYXAoKGlkKSA9PiBpZC50cmltKCkpIC8vIENsZWFuIHdoaXRlc3BhY2VcblxuICAgICAgLy8gUmV0dXJuIHVuaXF1ZSBwcm9qZWN0IElEcyBvbmx5XG4gICAgICByZXR1cm4gWy4uLm5ldyBTZXQocHJvamVjdElkcyldXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIGZldGNoaW5nIHByb2plY3QgSURzIGZvciAke2NsYXNzTmFtZX06YCwgZXJyb3IpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBmZXRjaCBwcm9qZWN0IElEcyBmb3IgJHtjbGFzc05hbWV9IGZyb20gR29vZ2xlIFNoZWV0c2ApXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZ2V0U3R1ZGVudHNCeVByb2plY3RJZChjbGFzc05hbWU6IHN0cmluZywgcHJvamVjdElkOiBzdHJpbmcpOiBQcm9taXNlPFN0dWRlbnRQcm9qZWN0W10+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgY2xhc3NDb25maWcgPSB0aGlzLmdldENsYXNzQ29uZmlnKGNsYXNzTmFtZSlcblxuICAgICAgaWYgKCFjbGFzc0NvbmZpZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIGNvbmZpZ3VyYXRpb24gZm91bmQgZm9yIGNsYXNzOiAke2NsYXNzTmFtZX1gKVxuICAgICAgfVxuXG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgdGhpcy5nZXRTaGVldERhdGEoY2xhc3NDb25maWcuaWQsIGNsYXNzQ29uZmlnLnJhbmdlKVxuXG4gICAgICBpZiAoIWRhdGEudmFsdWVzIHx8IGRhdGEudmFsdWVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gW11cbiAgICAgIH1cblxuICAgICAgLy8gU2tpcCBoZWFkZXIgcm93IGFuZCBmaWx0ZXIgYnkgUHJvamVjdCBJRFxuICAgICAgY29uc3Qgc3R1ZGVudHMgPSBkYXRhLnZhbHVlc1xuICAgICAgICAuc2xpY2UoMSkgLy8gU2tpcCBoZWFkZXIgcm93XG4gICAgICAgIC5maWx0ZXIoKHJvdykgPT4gcm93WzRdICYmIHJvd1s0XS50cmltKCkgPT09IHByb2plY3RJZC50cmltKCkpIC8vIEZpbHRlciBieSBQcm9qZWN0IElEXG4gICAgICAgIC5tYXAoKHJvdykgPT4gKHtcbiAgICAgICAgICBzbm86IHJvd1swXSB8fCBcIlwiLFxuICAgICAgICAgIHN0dWRlbnROYW1lOiByb3dbMV0gfHwgXCJcIixcbiAgICAgICAgICBncmFkZTogcm93WzJdIHx8IFwiXCIsXG4gICAgICAgICAgcHJvamVjdFRpdGxlOiByb3dbM10gfHwgXCJcIixcbiAgICAgICAgICBwcm9qZWN0SWQ6IHJvd1s0XSB8fCBcIlwiLFxuICAgICAgICAgIHRoZW1lOiByb3dbNV0gfHwgXCJcIiwgLy8gQXNzdW1pbmcgVGhlbWUgaXMgaW4gY29sdW1uIEYgKGluZGV4IDUpXG4gICAgICAgIH0pKVxuICAgICAgICAuZmlsdGVyKChzdHVkZW50KSA9PiBzdHVkZW50LnN0dWRlbnROYW1lICYmIHN0dWRlbnQucHJvamVjdElkKVxuXG4gICAgICByZXR1cm4gc3R1ZGVudHNcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihgRXJyb3IgZmV0Y2hpbmcgc3R1ZGVudHMgZm9yIHByb2plY3QgJHtwcm9qZWN0SWR9OmAsIGVycm9yKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gZmV0Y2ggc3R1ZGVudHMgZm9yIHByb2plY3QgJHtwcm9qZWN0SWR9IGZyb20gR29vZ2xlIFNoZWV0c2ApXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZ2V0SnVkZ2VTY29yZXMoY2xhc3NOYW1lOiBzdHJpbmcsIGp1ZGdlTmFtZTogc3RyaW5nLCBwcm9qZWN0SWQ/OiBzdHJpbmcpOiBQcm9taXNlPEp1ZGdlU2NvcmVbXT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBjbGFzc0NvbmZpZyA9IHRoaXMuZ2V0Q2xhc3NDb25maWcoY2xhc3NOYW1lKVxuICAgICAgaWYgKCFjbGFzc0NvbmZpZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIGNvbmZpZ3VyYXRpb24gZm91bmQgZm9yIGNsYXNzOiAke2NsYXNzTmFtZX1gKVxuICAgICAgfVxuXG4gICAgICBjb25zdCBqdWRnZVNoZWV0TmFtZSA9IGBKdWRnZV8ke2p1ZGdlTmFtZX1gXG4gICAgICBjb25zdCBqdWRnZVJhbmdlID0gYCR7anVkZ2VTaGVldE5hbWV9IUE6S2AgLy8gVXBkYXRlZCByYW5nZSB0byBpbmNsdWRlIFRoZW1lIEZpdCAoYXNzdW1pbmcgY29sdW1uIEspXG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCB0aGlzLmdldFNoZWV0RGF0YShjbGFzc0NvbmZpZy5pZCwganVkZ2VSYW5nZSlcblxuICAgICAgICBpZiAoIWRhdGEudmFsdWVzIHx8IGRhdGEudmFsdWVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiBbXVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2tpcCBoZWFkZXIgcm93IGFuZCBvcHRpb25hbGx5IGZpbHRlciBieSBQcm9qZWN0IElEXG4gICAgICAgIGxldCBzY29yZXMgPSBkYXRhLnZhbHVlc1xuICAgICAgICAgIC5zbGljZSgxKSAvLyBTa2lwIGhlYWRlciByb3dcbiAgICAgICAgICAubWFwKChyb3cpID0+ICh7XG4gICAgICAgICAgICBzbm86IHJvd1swXSB8fCBcIlwiLFxuICAgICAgICAgICAgc3R1ZGVudE5hbWU6IHJvd1sxXSB8fCBcIlwiLFxuICAgICAgICAgICAgZ3JhZGU6IHJvd1syXSB8fCBcIlwiLFxuICAgICAgICAgICAgcHJvamVjdFRpdGxlOiByb3dbM10gfHwgXCJcIixcbiAgICAgICAgICAgIHByb2plY3RJZDogcm93WzRdIHx8IFwiXCIsXG4gICAgICAgICAgICBjcmVhdGl2aXR5OiByb3dbNV0gPyBOdW1iZXIucGFyc2VGbG9hdChyb3dbNV0pIDogbnVsbCxcbiAgICAgICAgICAgIHNjaWVudGlmaWNUaG91Z2h0OiByb3dbNl0gPyBOdW1iZXIucGFyc2VGbG9hdChyb3dbNl0pIDogbnVsbCxcbiAgICAgICAgICAgIHRlY2huaWNhbFNraWxsczogcm93WzddID8gTnVtYmVyLnBhcnNlRmxvYXQocm93WzddKSA6IG51bGwsXG4gICAgICAgICAgICBwcmVzZW50YXRpb246IHJvd1s4XSA/IE51bWJlci5wYXJzZUZsb2F0KHJvd1s4XSkgOiBudWxsLFxuICAgICAgICAgICAgc3RhdHVzOiByb3dbOV0gfHwgXCJQcmVzZW50XCIsIC8vIEFzc3VtaW5nIFN0YXR1cyBpcyBpbiBjb2x1bW4gSiAoaW5kZXggOSksIGRlZmF1bHQgdG8gXCJQcmVzZW50XCJcbiAgICAgICAgICAgIHRoZW1lRml0OiByb3dbMTBdIHx8IG51bGwsIC8vIEFzc3VtaW5nIFRoZW1lIEZpdCBpcyBpbiBjb2x1bW4gSyAoaW5kZXggMTApXG4gICAgICAgICAgfSkpXG5cbiAgICAgICAgICBjb25zb2xlLmxvZyhg8J+UlyBGZXRjaGVkICR7c2NvcmVzLmxlbmd0aH0gc2NvcmVzIGZyb20gJHtqdWRnZVNoZWV0TmFtZX0gZm9yIGNsYXNzICR7Y2xhc3NOYW1lfWApXG5cbiAgICAgICAgLy8gRmlsdGVyIGJ5IHByb2plY3QgSUQgaWYgc3BlY2lmaWVkXG4gICAgICAgIGlmIChwcm9qZWN0SWQpIHtcbiAgICAgICAgICBzY29yZXMgPSBzY29yZXMuZmlsdGVyKChzY29yZSkgPT4gc2NvcmUucHJvamVjdElkLnRyaW0oKSA9PT0gcHJvamVjdElkLnRyaW0oKSlcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzY29yZXNcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIC8vIEp1ZGdlIHNoZWV0IGRvZXNuJ3QgZXhpc3QgeWV0IG9yIGlzIGVtcHR5LCB3aGljaCBpcyBmaW5lIGZvciBpbml0aWFsIGZldGNoXG4gICAgICAgIGNvbnNvbGUubG9nKGBKdWRnZSBzaGVldCAke2p1ZGdlU2hlZXROYW1lfSBkb2Vzbid0IGV4aXN0IHlldCBvciBpcyBlbXB0eS5gKVxuICAgICAgICByZXR1cm4gW11cbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihgRXJyb3IgZmV0Y2hpbmcganVkZ2Ugc2NvcmVzOmAsIGVycm9yKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gZmV0Y2gganVkZ2Ugc2NvcmVzIGZyb20gR29vZ2xlIFNoZWV0c2ApXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgc2F2ZUp1ZGdlU2NvcmVzKGNsYXNzTmFtZTogc3RyaW5nLCBqdWRnZU5hbWU6IHN0cmluZywgc2NvcmVzOiBKdWRnZVNjb3JlW10pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgY2xhc3NDb25maWcgPSB0aGlzLmdldENsYXNzQ29uZmlnKGNsYXNzTmFtZSlcbiAgICAgIGlmICghY2xhc3NDb25maWcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyBjb25maWd1cmF0aW9uIGZvdW5kIGZvciBjbGFzczogJHtjbGFzc05hbWV9YClcbiAgICAgIH1cblxuICAgICAgY29uc3QganVkZ2VTaGVldE5hbWUgPSBgSnVkZ2VfJHtqdWRnZU5hbWV9YFxuICAgICAgY29uc3QganVkZ2VIZWFkZXJSb3cgPSBbXG4gICAgICAgIFwiUy5Oby5cIixcbiAgICAgICAgXCJOYW1lIG9mIHRoZSBTdHVkZW50XCIsXG4gICAgICAgIFwiR3JhZGVcIixcbiAgICAgICAgXCJQcm9qZWN0IFRpdGxlXCIsXG4gICAgICAgIFwiUHJvamVjdCBJRFwiLFxuICAgICAgICBcIkNyZWF0aXZpdHkgJiBJbWFnaW5hdGlvblwiLFxuICAgICAgICBcIlNjaWVudGlmaWMgVGhvdWdodFwiLFxuICAgICAgICBcIlRlY2huaWNhbCBTa2lsbHNcIixcbiAgICAgICAgXCJQcmVzZW50YXRpb25cIixcbiAgICAgICAgXCJTdGF0dXNcIixcbiAgICAgICAgXCJUaGVtZSBGaXRcIiwgLy8gQWRkZWQgVGhlbWUgRml0IHRvIGhlYWRlclxuICAgICAgXVxuXG4gICAgICAvLyBFbnN1cmUganVkZ2Ugc2hlZXQgZXhpc3RzIGFuZCBoYXMgaGVhZGVyXG4gICAgICBhd2FpdCB0aGlzLmVuc3VyZVNoZWV0RXhpc3RzKGNsYXNzQ29uZmlnLmlkLCBqdWRnZVNoZWV0TmFtZSwganVkZ2VIZWFkZXJSb3cpXG5cbiAgICAgIC8vIFByZXBhcmUgbmV3IHNjb3JlIHJvd3MgZm9yIGFwcGVuZGluZ1xuICAgICAgY29uc3QgbmV3Um93cyA9IHNjb3Jlcy5tYXAoKHNjb3JlKSA9PiBbXG4gICAgICAgIHNjb3JlLnNubyxcbiAgICAgICAgc2NvcmUuc3R1ZGVudE5hbWUsXG4gICAgICAgIHNjb3JlLmdyYWRlLFxuICAgICAgICBzY29yZS5wcm9qZWN0VGl0bGUsXG4gICAgICAgIHNjb3JlLnByb2plY3RJZCxcbiAgICAgICAgc2NvcmUuY3JlYXRpdml0eT8udG9TdHJpbmcoKSB8fCBcIlwiLFxuICAgICAgICBzY29yZS5zY2llbnRpZmljVGhvdWdodD8udG9TdHJpbmcoKSB8fCBcIlwiLFxuICAgICAgICBzY29yZS50ZWNobmljYWxTa2lsbHM/LnRvU3RyaW5nKCkgfHwgXCJcIixcbiAgICAgICAgc2NvcmUucHJlc2VudGF0aW9uPy50b1N0cmluZygpIHx8IFwiXCIsXG4gICAgICAgIHNjb3JlLnN0YXR1cyB8fCBcIlByZXNlbnRcIiwgLy8gSW5jbHVkZSBzdGF0dXNcbiAgICAgICAgc2NvcmUudGhlbWVGaXQgfHwgXCJcIiwgLy8gSW5jbHVkZSB0aGVtZUZpdFxuICAgICAgXSlcblxuICAgICAgLy8gQXBwZW5kIG5ldyBzY29yZXMgKG5ldmVyIG92ZXJ3cml0ZSlcbiAgICAgIGF3YWl0IHRoaXMuc2hlZXRzLnNwcmVhZHNoZWV0cy52YWx1ZXMuYXBwZW5kKHtcbiAgICAgICAgc3ByZWFkc2hlZXRJZDogY2xhc3NDb25maWcuaWQsXG4gICAgICAgIHJhbmdlOiBgJHtqdWRnZVNoZWV0TmFtZX0hQTpLYCwgLy8gVXBkYXRlZCByYW5nZSBmb3IgYXBwZW5kaW5nXG4gICAgICAgIHZhbHVlSW5wdXRPcHRpb246IFwiVVNFUl9FTlRFUkVEXCIsXG4gICAgICAgIHJlc291cmNlOiB7XG4gICAgICAgICAgdmFsdWVzOiBuZXdSb3dzLFxuICAgICAgICB9LFxuICAgICAgfSlcblxuICAgICAgY29uc29sZS5sb2coYOKchSBBcHBlbmRlZCAke25ld1Jvd3MubGVuZ3RofSBuZXcgc2NvcmUgcm93cyB0byAke2p1ZGdlU2hlZXROYW1lfWApXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIGFwcGVuZGluZyBqdWRnZSBzY29yZXM6YCwgZXJyb3IpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBhcHBlbmQganVkZ2Ugc2NvcmVzIHRvIEdvb2dsZSBTaGVldHNgKVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgZ2V0RXhpc3RpbmdKdWRnZURhdGEoc3ByZWFkc2hlZXRJZDogc3RyaW5nLCBzaGVldE5hbWU6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nW11bXT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuc2hlZXRzLnNwcmVhZHNoZWV0cy52YWx1ZXMuZ2V0KHtcbiAgICAgICAgc3ByZWFkc2hlZXRJZCxcbiAgICAgICAgcmFuZ2U6IGAke3NoZWV0TmFtZX0hQTpLYCwgLy8gVXBkYXRlZCByYW5nZVxuICAgICAgfSlcbiAgICAgIHJldHVybiByZXNwb25zZS5kYXRhLnZhbHVlcyB8fCBbXVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAvLyBTaGVldCBkb2Vzbid0IGV4aXN0IG9yIGlzIGVtcHR5XG4gICAgICByZXR1cm4gW11cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGVuc3VyZVNoZWV0RXhpc3RzKHNwcmVhZHNoZWV0SWQ6IHN0cmluZywgc2hlZXROYW1lOiBzdHJpbmcsIGhlYWRlclJvdz86IHN0cmluZ1tdKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHNwcmVhZHNoZWV0ID0gYXdhaXQgdGhpcy5zaGVldHMuc3ByZWFkc2hlZXRzLmdldCh7XG4gICAgICAgIHNwcmVhZHNoZWV0SWQ6IHNwcmVhZHNoZWV0SWQsXG4gICAgICAgIGZpZWxkczogXCJzaGVldHMucHJvcGVydGllcy50aXRsZSxzaGVldHMucHJvcGVydGllcy5zaGVldElkXCIsXG4gICAgICB9KVxuXG4gICAgICBjb25zdCBzaGVldEV4aXN0cyA9IHNwcmVhZHNoZWV0LmRhdGEuc2hlZXRzPy5zb21lKChzaGVldDogYW55KSA9PiBzaGVldC5wcm9wZXJ0aWVzLnRpdGxlID09PSBzaGVldE5hbWUpXG5cbiAgICAgIGlmICghc2hlZXRFeGlzdHMpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5zaGVldHMuc3ByZWFkc2hlZXRzLmJhdGNoVXBkYXRlKHtcbiAgICAgICAgICBzcHJlYWRzaGVldElkOiBzcHJlYWRzaGVldElkLFxuICAgICAgICAgIHJlc291cmNlOiB7XG4gICAgICAgICAgICByZXF1ZXN0czogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYWRkU2hlZXQ6IHtcbiAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHNoZWV0TmFtZSxcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSlcbiAgICAgICAgY29uc29sZS5sb2coYOKchSBDcmVhdGVkIG5ldyBzaGVldDogJHtzaGVldE5hbWV9IGluIHNwcmVhZHNoZWV0ICR7c3ByZWFkc2hlZXRJZH1gKVxuXG4gICAgICAgIC8vIElmIGhlYWRlciByb3cgaXMgcHJvdmlkZWQsIHdyaXRlIGl0XG4gICAgICAgIGlmIChoZWFkZXJSb3cgJiYgaGVhZGVyUm93Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBhd2FpdCB0aGlzLnNoZWV0cy5zcHJlYWRzaGVldHMudmFsdWVzLmFwcGVuZCh7XG4gICAgICAgICAgICBzcHJlYWRzaGVldElkOiBzcHJlYWRzaGVldElkLFxuICAgICAgICAgICAgcmFuZ2U6IGAke3NoZWV0TmFtZX0hQTFgLFxuICAgICAgICAgICAgdmFsdWVJbnB1dE9wdGlvbjogXCJVU0VSX0VOVEVSRURcIixcbiAgICAgICAgICAgIHJlc291cmNlOiB7XG4gICAgICAgICAgICAgIHZhbHVlczogW2hlYWRlclJvd10sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0pXG4gICAgICAgICAgY29uc29sZS5sb2coYOKchSBBZGRlZCBoZWFkZXIgdG8gbmV3IHNoZWV0OiAke3NoZWV0TmFtZX1gKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIGVuc3VyaW5nIHNoZWV0ICR7c2hlZXROYW1lfSBleGlzdHMgaW4gJHtzcHJlYWRzaGVldElkfTpgLCBlcnJvcilcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGNyZWF0ZSBvciB2ZXJpZnkgc2hlZXQ6ICR7c2hlZXROYW1lfWApXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZ2V0QWxsU2hlZXRUaXRsZXMoc3ByZWFkc2hlZXRJZDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuc2hlZXRzLnNwcmVhZHNoZWV0cy5nZXQoe1xuICAgICAgICBzcHJlYWRzaGVldElkOiBzcHJlYWRzaGVldElkLFxuICAgICAgICBmaWVsZHM6IFwic2hlZXRzLnByb3BlcnRpZXMudGl0bGVcIixcbiAgICAgIH0pXG4gICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YS5zaGVldHM/Lm1hcCgoc2hlZXQ6IGFueSkgPT4gc2hlZXQucHJvcGVydGllcy50aXRsZSkgfHwgW11cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihgRXJyb3IgZmV0Y2hpbmcgc2hlZXQgdGl0bGVzIGZvciAke3NwcmVhZHNoZWV0SWR9OmAsIGVycm9yKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gZmV0Y2ggc2hlZXQgdGl0bGVzIGZvciBzcHJlYWRzaGVldCAke3NwcmVhZHNoZWV0SWR9LmApXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZ2V0QWxsSnVkZ2VTaGVldE5hbWVzKGNsYXNzU3ByZWFkc2hlZXRJZDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuICAgIGNvbnN0IGFsbFNoZWV0VGl0bGVzID0gYXdhaXQgdGhpcy5nZXRBbGxTaGVldFRpdGxlcyhjbGFzc1NwcmVhZHNoZWV0SWQpXG4gICAgcmV0dXJuIGFsbFNoZWV0VGl0bGVzLmZpbHRlcigodGl0bGUpID0+IHRpdGxlLnN0YXJ0c1dpdGgoXCJKdWRnZV9cIikpXG4gIH1cblxuICBhc3luYyBnZXRQcm9qZWN0RGV0YWlsc01hcChcbiAgICBjbGFzc05hbWU6IHN0cmluZyxcbiAgKTogUHJvbWlzZTxNYXA8c3RyaW5nLCB7IHRpdGxlOiBzdHJpbmc7IHRoZW1lOiBzdHJpbmc7IHN0dWRlbnROYW1lczogU2V0PHN0cmluZz4gfT4+IHtcbiAgICBjb25zdCBjbGFzc0NvbmZpZyA9IHRoaXMuZ2V0Q2xhc3NDb25maWcoY2xhc3NOYW1lKVxuICAgIGlmICghY2xhc3NDb25maWcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gY29uZmlndXJhdGlvbiBmb3VuZCBmb3IgY2xhc3M6ICR7Y2xhc3NOYW1lfWApXG4gICAgfVxuXG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHRoaXMuZ2V0U2hlZXREYXRhKGNsYXNzQ29uZmlnLmlkLCBjbGFzc0NvbmZpZy5yYW5nZSkgLy8gUmVhZHMgU2hlZXQxIUE6RlxuXG4gICAgY29uc3QgcHJvamVjdE1hcCA9IG5ldyBNYXA8c3RyaW5nLCB7IHRpdGxlOiBzdHJpbmc7IHRoZW1lOiBzdHJpbmc7IHN0dWRlbnROYW1lczogU2V0PHN0cmluZz4gfT4oKVxuICAgIGlmIChkYXRhLnZhbHVlcyAmJiBkYXRhLnZhbHVlcy5sZW5ndGggPiAxKSB7XG4gICAgICAvLyBTa2lwIGhlYWRlclxuICAgICAgZGF0YS52YWx1ZXMuc2xpY2UoMSkuZm9yRWFjaCgocm93KSA9PiB7XG4gICAgICAgIGNvbnN0IHByb2plY3RJZCA9IHJvd1s0XT8udHJpbSgpIC8vIENvbHVtbiBFXG4gICAgICAgIGNvbnN0IHByb2plY3RUaXRsZSA9IHJvd1szXT8udHJpbSgpIC8vIENvbHVtbiBEXG4gICAgICAgIGNvbnN0IHRoZW1lID0gcm93WzVdPy50cmltKCkgLy8gQ29sdW1uIEZcbiAgICAgICAgY29uc3Qgc3R1ZGVudE5hbWUgPSByb3dbMV0/LnRyaW0oKSAvLyBDb2x1bW4gQlxuXG4gICAgICAgIGlmIChwcm9qZWN0SWQpIHtcbiAgICAgICAgICBpZiAoIXByb2plY3RNYXAuaGFzKHByb2plY3RJZCkpIHtcbiAgICAgICAgICAgIHByb2plY3RNYXAuc2V0KHByb2plY3RJZCwge1xuICAgICAgICAgICAgICB0aXRsZTogcHJvamVjdFRpdGxlIHx8IFwiXCIsXG4gICAgICAgICAgICAgIHRoZW1lOiB0aGVtZSB8fCBcIlwiLFxuICAgICAgICAgICAgICBzdHVkZW50TmFtZXM6IG5ldyBTZXQ8c3RyaW5nPigpLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHN0dWRlbnROYW1lKSB7XG4gICAgICAgICAgICBwcm9qZWN0TWFwLmdldChwcm9qZWN0SWQpPy5zdHVkZW50TmFtZXMuYWRkKHN0dWRlbnROYW1lKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gICAgcmV0dXJuIHByb2plY3RNYXBcbiAgfVxuXG4gIGFzeW5jIHByb2Nlc3NDbGFzc1Njb3JlcyhjbGFzc05hbWU6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IGNsYXNzQ29uZmlnID0gdGhpcy5nZXRDbGFzc0NvbmZpZyhjbGFzc05hbWUpXG4gICAgaWYgKCFjbGFzc0NvbmZpZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyBjb25maWd1cmF0aW9uIGZvdW5kIGZvciBjbGFzczogJHtjbGFzc05hbWV9YClcbiAgICB9XG5cbiAgICBjb25zdCBjbGFzc1NwcmVhZHNoZWV0SWQgPSBjbGFzc0NvbmZpZy5pZFxuICAgIGNvbnN0IHByb2plY3REZXRhaWxzTWFwID0gYXdhaXQgdGhpcy5nZXRQcm9qZWN0RGV0YWlsc01hcChjbGFzc05hbWUpXG4gICAgY29uc29sZS5sb2coYFske2NsYXNzTmFtZX1dIEZvdW5kICR7cHJvamVjdERldGFpbHNNYXAuc2l6ZX0gdW5pcXVlIHByb2plY3RzIGZyb20gQmFzZVNoZWV0LmApXG5cbiAgICBjb25zdCBqdWRnZVNoZWV0TmFtZXMgPSBhd2FpdCB0aGlzLmdldEFsbEp1ZGdlU2hlZXROYW1lcyhjbGFzc1NwcmVhZHNoZWV0SWQpXG4gICAgY29uc29sZS5sb2coYFske2NsYXNzTmFtZX1dIEZvdW5kICR7anVkZ2VTaGVldE5hbWVzLmxlbmd0aH0ganVkZ2Ugc2hlZXRzLmApXG5cbiAgICAvLyBNYXAgdG8gc3RvcmUgdGhlIGxhdGVzdCBzY29yZSBmb3IgZWFjaCBwcm9qZWN0IGJ5IGVhY2gganVkZ2VcbiAgICBjb25zdCBsYXRlc3RQcm9qZWN0U2NvcmVzQnlKdWRnZSA9IG5ldyBNYXA8c3RyaW5nLCBNYXA8c3RyaW5nLCBKdWRnZVNjb3JlPj4oKSAvLyBwcm9qZWN0SWQgLT4gKGp1ZGdlTmFtZSAtPiBsYXRlc3RTY29yZSlcblxuICAgICAgICBjb25zdCBqdWRnZVJhbmdlcyA9IGp1ZGdlU2hlZXROYW1lcy5tYXAoanVkZ2VTaGVldE5hbWUgPT4gYCR7anVkZ2VTaGVldE5hbWV9IUE6S2ApO1xuICAgICAgICBjb25zb2xlLmxvZyhcImp1ZGdlUmFuZ2VNQWRkeVwiKTtcbiAgICBjb25zb2xlLmxvZyhgWyR7Y2xhc3NOYW1lfV0gRmV0Y2hpbmcgZGF0YSBmb3IganVkZ2VSYW5nZU1BZGR5IHNoZWV0czogJHtqdWRnZVJhbmdlc31gKTtcblxuICAgIGNvbnN0IGJhdGNoRGF0YSA9IGF3YWl0IHRoaXMuYmF0Y2hHZXRTaGVldERhdGEoY2xhc3NTcHJlYWRzaGVldElkLCBqdWRnZVJhbmdlcyk7XG4gICAgY29uc29sZS5sb2coXCJiYXRjaERhdGE6XCIsIEpTT04uc3RyaW5naWZ5KGJhdGNoRGF0YSwgbnVsbCwgMikpO1xuICAgIGNvbnNvbGUubG9nKGBbJHtjbGFzc05hbWV9XSBGZXRjaGVkTWFkZHkgZGF0YSBmb3IgJHtqdWRnZVJhbmdlcy5sZW5ndGh9ICR7anVkZ2VSYW5nZXN9ICR7YmF0Y2hEYXRhfSBqdWRnZSBzaGVldHMgaW4gYmF0Y2guYClcbiAgICBcbiAgICBmb3IgKGNvbnN0IGp1ZGdlU2hlZXROYW1lIG9mIGp1ZGdlU2hlZXROYW1lcykge1xuICAgICAgY29uc29sZS5sb2coYFske2NsYXNzTmFtZX1dIFByb2Nlc3NpbmcganVkZ2Ugc2hlZXQgbWFkZHk6ICR7anVkZ2VTaGVldE5hbWV9YCk7XG4gICAgICBjb25zdCBqdWRnZU5hbWUgPSBqdWRnZVNoZWV0TmFtZS5yZXBsYWNlKFwiSnVkZ2VfXCIsIFwiXCIpO1xuICAgICAgY29uc3QgdmFsdWVzID0gYmF0Y2hEYXRhW2Ake2p1ZGdlU2hlZXROYW1lfSFBMTpLMTAwMGBdIHx8IFtdO1xuICAgICAgY29uc29sZS5sb2coYFske2NsYXNzTmFtZX1dIEZvdW5kTUFkZHlzICR7dmFsdWVzLmxlbmd0aH0gcm93cyBpbiBzaGVldCAke2p1ZGdlU2hlZXROYW1lfSBmb3IgSnVkZ2UgJHtqdWRnZU5hbWV9LmApO1xuICAgICAgaWYgKHZhbHVlcy5sZW5ndGggPD0gMSkgY29udGludWU7IC8vIHNraXAgaWYgb25seSBoZWFkZXIgb3IgZW1wdHlcbiAgICBcbiAgICAgIC8vIFBhcnNlIHNjb3JlcyBhcyBpbiBnZXRKdWRnZVNjb3Jlc1xuICAgICAgY29uc3Qgc2NvcmVzRm9ySnVkZ2UgPSB2YWx1ZXNcbiAgICAgICAgLnNsaWNlKDEpXG4gICAgICAgIC5tYXAoKHJvdykgPT4gKHtcbiAgICAgICAgICBzbm86IHJvd1swXSB8fCBcIlwiLFxuICAgICAgICAgIHN0dWRlbnROYW1lOiByb3dbMV0gfHwgXCJcIixcbiAgICAgICAgICBncmFkZTogcm93WzJdIHx8IFwiXCIsXG4gICAgICAgICAgcHJvamVjdFRpdGxlOiByb3dbM10gfHwgXCJcIixcbiAgICAgICAgICBwcm9qZWN0SWQ6IHJvd1s0XSB8fCBcIlwiLFxuICAgICAgICAgIGNyZWF0aXZpdHk6IHJvd1s1XSA/IE51bWJlci5wYXJzZUZsb2F0KHJvd1s1XSkgOiBudWxsLFxuICAgICAgICAgIHNjaWVudGlmaWNUaG91Z2h0OiByb3dbNl0gPyBOdW1iZXIucGFyc2VGbG9hdChyb3dbNl0pIDogbnVsbCxcbiAgICAgICAgICB0ZWNobmljYWxTa2lsbHM6IHJvd1s3XSA/IE51bWJlci5wYXJzZUZsb2F0KHJvd1s3XSkgOiBudWxsLFxuICAgICAgICAgIHByZXNlbnRhdGlvbjogcm93WzhdID8gTnVtYmVyLnBhcnNlRmxvYXQocm93WzhdKSA6IG51bGwsXG4gICAgICAgICAgc3RhdHVzOiByb3dbOV0gfHwgXCJQcmVzZW50XCIsXG4gICAgICAgICAgdGhlbWVGaXQ6IHJvd1sxMF0gfHwgbnVsbCxcbiAgICAgICAgfSkpXG5cbiAgICBjb25zb2xlLmxvZyhgWyR7Y2xhc3NOYW1lfV0gRm91bmRNYWRkeSAke3Njb3Jlc0Zvckp1ZGdlLmxlbmd0aH0gc2NvcmVzIGZvciBKdWRnZSAke2p1ZGdlTmFtZX0gaW4gc2hlZXQgJHtqdWRnZVNoZWV0TmFtZX0uYCk7XG4gICAgICBcbiAgICBmb3IgKGNvbnN0IHNjb3JlIG9mIHNjb3Jlc0Zvckp1ZGdlKSB7XG4gICAgICAgIGNvbnN0IHBJZCA9IHNjb3JlLnByb2plY3RJZC50cmltKCk7XG4gICAgICAgIGNvbnNvbGUubG9nKGBbJHtjbGFzc05hbWV9XSBQcm9jZXNzaW5nIHNjb3JlIGZvciBQcm9qZWN0ICR7cElkfSBieSBKdWRnZSAke2p1ZGdlTmFtZX06YCwgc2NvcmUpO1xuICAgICAgICBpZiAoIWxhdGVzdFByb2plY3RTY29yZXNCeUp1ZGdlLmhhcyhwSWQpKSB7XG4gICAgICAgICAgbGF0ZXN0UHJvamVjdFNjb3Jlc0J5SnVkZ2Uuc2V0KHBJZCwgbmV3IE1hcDxzdHJpbmcsIEp1ZGdlU2NvcmU+KCkpO1xuICAgICAgICB9XG4gICAgICAgIGxhdGVzdFByb2plY3RTY29yZXNCeUp1ZGdlLmdldChwSWQpPy5zZXQoanVkZ2VOYW1lLCBzY29yZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKGBbJHtjbGFzc05hbWV9XSBDb2xsZWN0ZWQgbGF0ZXN0IHNjb3JlcyBmb3IgcHJvamVjdHMgZnJvbSBlYWNoIGp1ZGdlLmApXG4gICAgY29uc29sZS5sb2coXG4gICAgICBgWyR7Y2xhc3NOYW1lfV0gbGF0ZXN0UHJvamVjdFNjb3Jlc0J5SnVkZ2UgZm9yIGEgc2FtcGxlIHByb2plY3QgKGUuZy4sIFA0MDAxKTpgLFxuICAgICAgbGF0ZXN0UHJvamVjdFNjb3Jlc0J5SnVkZ2UuZ2V0KFwiUDQwMDFcIiksXG4gICAgKVxuXG4gICAgLy8gQWdncmVnYXRlIHNjb3JlcyBwZXIgcHJvamVjdFxuICAgIGNvbnN0IHByb2plY3RBZ2dyZWdhdGVkU2NvcmVzOiB7XG4gICAgICBbcHJvamVjdElkOiBzdHJpbmddOiB7XG4gICAgICAgIHByb2plY3RUaXRsZTogc3RyaW5nXG4gICAgICAgIHRoZW1lOiBzdHJpbmdcbiAgICAgICAgY3JlYXRpdml0eVN1bTogbnVtYmVyXG4gICAgICAgIHNjaWVudGlmaWNUaG91Z2h0U3VtOiBudW1iZXJcbiAgICAgICAgdGVjaG5pY2FsU2tpbGxzU3VtOiBudW1iZXJcbiAgICAgICAgcHJlc2VudGF0aW9uU3VtOiBudW1iZXJcbiAgICAgICAganVkZ2VDb3VudDogbnVtYmVyIC8vIE51bWJlciBvZiBqdWRnZXMgd2hvIHNjb3JlZCB0aGlzIHByb2plY3QgYXMgUHJlc2VudFxuICAgICAgICBhYnNlbnRDb3VudDogbnVtYmVyIC8vIE51bWJlciBvZiBqdWRnZXMgd2hvIG1hcmtlZCB0aGlzIHByb2plY3QgQWJzZW50XG4gICAgICAgIHN0dWRlbnROYW1lczogc3RyaW5nW10gLy8gVG8gY29sbGVjdCBhbGwgc3R1ZGVudCBuYW1lcyBmb3IgdGhpcyBwcm9qZWN0XG4gICAgICB9XG4gICAgfSA9IHt9XG5cbiAgICAvLyBJbml0aWFsaXplIHByb2plY3RBZ2dyZWdhdGVkU2NvcmVzIHdpdGggZGV0YWlscyBmcm9tIEJhc2VTaGVldFxuICAgIGZvciAoY29uc3QgW3BJZCwgZGV0YWlsc10gb2YgcHJvamVjdERldGFpbHNNYXAuZW50cmllcygpKSB7XG4gICAgICBwcm9qZWN0QWdncmVnYXRlZFNjb3Jlc1twSWRdID0ge1xuICAgICAgICBwcm9qZWN0VGl0bGU6IGRldGFpbHMudGl0bGUsXG4gICAgICAgIHRoZW1lOiBkZXRhaWxzLnRoZW1lLFxuICAgICAgICBjcmVhdGl2aXR5U3VtOiAwLFxuICAgICAgICBzY2llbnRpZmljVGhvdWdodFN1bTogMCxcbiAgICAgICAgdGVjaG5pY2FsU2tpbGxzU3VtOiAwLFxuICAgICAgICBwcmVzZW50YXRpb25TdW06IDAsXG4gICAgICAgIGp1ZGdlQ291bnQ6IDAsXG4gICAgICAgIGFic2VudENvdW50OiAwLFxuICAgICAgICBzdHVkZW50TmFtZXM6IEFycmF5LmZyb20oZGV0YWlscy5zdHVkZW50TmFtZXMpLnNvcnQoKSxcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBQb3B1bGF0ZSBhZ2dyZWdhdGVkIHNjb3JlcyBmcm9tIGp1ZGdlIHN1Ym1pc3Npb25zXG4gICAgZm9yIChjb25zdCBbcElkLCBqdWRnZVNjb3Jlc01hcF0gb2YgbGF0ZXN0UHJvamVjdFNjb3Jlc0J5SnVkZ2UuZW50cmllcygpKSB7XG4gICAgICBjb25zb2xlLmxvZyhgWyR7Y2xhc3NOYW1lfV0gUHJvY2Vzc2luZyBzY29yZXMgZm9yIFByb2plY3QgJHtwSWR9IGZyb20ganVkZ2VzOmAsIEFycmF5LmZyb20oanVkZ2VTY29yZXNNYXAua2V5cygpKSlcbiAgICAgIGNvbnNvbGUubG9nKGBbJHtjbGFzc05hbWV9XSBqdWRnZVNjb3Jlc01hcCBmb3IgUHJvamVjdCAke3BJZH0gaGFzICR7anVkZ2VTY29yZXNNYXAuc2l6ZX0gZW50cmllcy5gKVxuICAgICAgaWYgKCFwcm9qZWN0QWdncmVnYXRlZFNjb3Jlc1twSWRdKSB7XG4gICAgICAgIC8vIFRoaXMgcHJvamVjdCB3YXMgc2NvcmVkIGJ1dCBub3QgZm91bmQgaW4gQmFzZVNoZWV0IChlLmcuLCBpZiBCYXNlU2hlZXQgaXMgaW5jb21wbGV0ZSlcbiAgICAgICAgLy8gVHJ5IHRvIGdldCBkZXRhaWxzIGZyb20gdGhlIGZpcnN0IHNjb3JlIGVudHJ5IGZvciB0aGlzIHByb2plY3RcbiAgICAgICAgY29uc3QgZmlyc3RTY29yZSA9IEFycmF5LmZyb20oanVkZ2VTY29yZXNNYXAudmFsdWVzKCkpWzBdXG4gICAgICAgIHByb2plY3RBZ2dyZWdhdGVkU2NvcmVzW3BJZF0gPSB7XG4gICAgICAgICAgcHJvamVjdFRpdGxlOiBmaXJzdFNjb3JlPy5wcm9qZWN0VGl0bGUgfHwgXCJcIixcbiAgICAgICAgICB0aGVtZTogcHJvamVjdERldGFpbHNNYXAuZ2V0KHBJZCk/LnRoZW1lIHx8IFwiXCIsIC8vIEZhbGxiYWNrIHRvIEJhc2VTaGVldCB0aGVtZSBpZiBhdmFpbGFibGVcbiAgICAgICAgICBjcmVhdGl2aXR5U3VtOiAwLFxuICAgICAgICAgIHNjaWVudGlmaWNUaG91Z2h0U3VtOiAwLFxuICAgICAgICAgIHRlY2huaWNhbFNraWxsc1N1bTogMCxcbiAgICAgICAgICBwcmVzZW50YXRpb25TdW06IDAsXG4gICAgICAgICAganVkZ2VDb3VudDogMCxcbiAgICAgICAgICBhYnNlbnRDb3VudDogMCxcbiAgICAgICAgICBzdHVkZW50TmFtZXM6IFtdLCAvLyBDYW5ub3QgcmVsaWFibHkgZ2V0IGFsbCBzdHVkZW50IG5hbWVzIGlmIG5vdCBpbiBCYXNlU2hlZXRcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgYFske2NsYXNzTmFtZX1dIFByb2plY3QgJHtwSWR9IGZvdW5kIGluIGp1ZGdlIHNoZWV0cyBidXQgbm90IGluIEJhc2VTaGVldC4gU3R1ZGVudCBuYW1lcyBtaWdodCBiZSBpbmNvbXBsZXRlLmAsXG4gICAgICAgIClcbiAgICAgIH1cbiAgICAgIGZvciAoY29uc3QgW2p1ZGdlTmFtZSwgc2NvcmVdIG9mIGp1ZGdlU2NvcmVzTWFwLmVudHJpZXMoKSkge1xuICAgICAgICBpZiAoc2NvcmUuc3RhdHVzID09PSBcIkFic2VudFwiKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coYFske2NsYXNzTmFtZX1dIEp1ZGdlICR7anVkZ2VOYW1lfSBtYXJrZWQgUHJvamVjdCAke3BJZH0gYXMgQWJzZW50LmApXG4gICAgICAgICAgcHJvamVjdEFnZ3JlZ2F0ZWRTY29yZXNbcElkXS5hYnNlbnRDb3VudCsrXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gUHJlc2VudFxuICAgICAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICAgICAgYFske2NsYXNzTmFtZX1dIEFkZGluZyBzY29yZSBmb3IgUHJvamVjdCAke3BJZH0gYnkgSnVkZ2UgJHtqdWRnZU5hbWV9OiBDcmVhdGl2aXR5PSR7c2NvcmUuY3JlYXRpdml0eX0sIFNjaWVudGlmaWNUaG91Z2h0PSR7c2NvcmUuc2NpZW50aWZpY1Rob3VnaHR9LCBUZWNobmljYWxTa2lsbHM9JHtzY29yZS50ZWNobmljYWxTa2lsbHN9LCBQcmVzZW50YXRpb249JHtzY29yZS5wcmVzZW50YXRpb259YCxcbiAgICAgICAgICApXG4gICAgICAgICAgcHJvamVjdEFnZ3JlZ2F0ZWRTY29yZXNbcElkXS5qdWRnZUNvdW50KytcbiAgICAgICAgICBwcm9qZWN0QWdncmVnYXRlZFNjb3Jlc1twSWRdLmNyZWF0aXZpdHlTdW0gKz0gc2NvcmUuY3JlYXRpdml0eSB8fCAwXG4gICAgICAgICAgcHJvamVjdEFnZ3JlZ2F0ZWRTY29yZXNbcElkXS5zY2llbnRpZmljVGhvdWdodFN1bSArPSBzY29yZS5zY2llbnRpZmljVGhvdWdodCB8fCAwXG4gICAgICAgICAgcHJvamVjdEFnZ3JlZ2F0ZWRTY29yZXNbcElkXS50ZWNobmljYWxTa2lsbHNTdW0gKz0gc2NvcmUudGVjaG5pY2FsU2tpbGxzIHx8IDBcbiAgICAgICAgICBwcm9qZWN0QWdncmVnYXRlZFNjb3Jlc1twSWRdLnByZXNlbnRhdGlvblN1bSArPSBzY29yZS5wcmVzZW50YXRpb24gfHwgMFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKGBbJHtjbGFzc05hbWV9XSBBZ2dyZWdhdGlvbiBjb21wbGV0ZSBmb3IgcHJvamVjdCBzY29yZXMuYClcbiAgICBjb25zb2xlLmxvZyhcbiAgICAgIGBbJHtjbGFzc05hbWV9XSBwcm9qZWN0QWdncmVnYXRlZFNjb3JlcyBmb3IgYSBzYW1wbGUgcHJvamVjdCAoZS5nLiwgUDQwMDEpOmAsXG4gICAgICBwcm9qZWN0QWdncmVnYXRlZFNjb3Jlc1tcIlA0MDAxXCJdLFxuICAgIClcblxuICAgIC8vIENhbGN1bGF0ZSBwcm9qZWN0IGF2ZXJhZ2VzIGFuZCBwcmVwYXJlIHJvd3MgZm9yIFwiU2NvcmVcIiB0YWJcbiAgICBjb25zdCBzY29yZVRhYlJvd3M6IHN0cmluZ1tdW10gPSBbXVxuICAgIHNjb3JlVGFiUm93cy5wdXNoKFtcbiAgICAgIFwiUHJvamVjdCBJRFwiLFxuICAgICAgXCJQcm9qZWN0IFRpdGxlXCIsXG4gICAgICBcIlRoZW1lXCIsXG4gICAgICBcIkF2ZyBDcmVhdGl2aXR5XCIsXG4gICAgICBcIkF2ZyBTY2llbnRpZmljIFRob3VnaHRcIixcbiAgICAgIFwiQXZnIFRlY2huaWNhbCBTa2lsbHNcIixcbiAgICAgIFwiQXZnIFByZXNlbnRhdGlvblwiLFxuICAgICAgXCJQcm9qZWN0IEF2ZXJhZ2UgU2NvcmVcIixcbiAgICAgIFwiU3R1ZGVudCBOYW1lc1wiLFxuICAgIF0pIC8vIE5ldyBIZWFkZXIgZm9yIFNjb3JlIHRhYlxuXG4gICAgY29uc3QgcHJvamVjdHNGb3JTY29yZVRhYjogQXJyYXk8e1xuICAgICAgcHJvamVjdElkOiBzdHJpbmdcbiAgICAgIHByb2plY3RUaXRsZTogc3RyaW5nXG4gICAgICB0aGVtZTogc3RyaW5nXG4gICAgICBhdmdDcmVhdGl2aXR5OiBudW1iZXJcbiAgICAgIGF2Z1NjaWVudGlmaWNUaG91Z2h0OiBudW1iZXJcbiAgICAgIGF2Z1RlY2huaWNhbFNraWxsczogbnVtYmVyXG4gICAgICBhdmdQcmVzZW50YXRpb246IG51bWJlclxuICAgICAgcHJvamVjdEF2Z1Njb3JlOiBudW1iZXJcbiAgICAgIHN0dWRlbnROYW1lczogc3RyaW5nXG4gICAgfT4gPSBbXVxuXG4gICAgZm9yIChjb25zdCBwSWQgaW4gcHJvamVjdEFnZ3JlZ2F0ZWRTY29yZXMpIHtcbiAgICAgIGNvbnN0IHByb2plY3REYXRhID0gcHJvamVjdEFnZ3JlZ2F0ZWRTY29yZXNbcElkXVxuICAgICAgbGV0IGF2Z0NyZWF0aXZpdHkgPSAwXG4gICAgICBsZXQgYXZnU2NpZW50aWZpY1Rob3VnaHQgPSAwXG4gICAgICBsZXQgYXZnVGVjaG5pY2FsU2tpbGxzID0gMFxuICAgICAgbGV0IGF2Z1ByZXNlbnRhdGlvbiA9IDBcbiAgICAgIGxldCBwcm9qZWN0QXZnU2NvcmUgPSAwXG5cbiAgICAgIGlmIChwcm9qZWN0RGF0YS5qdWRnZUNvdW50ID4gMCkge1xuICAgICAgICBhdmdDcmVhdGl2aXR5ID0gcHJvamVjdERhdGEuY3JlYXRpdml0eVN1bSAvIHByb2plY3REYXRhLmp1ZGdlQ291bnRcbiAgICAgICAgYXZnU2NpZW50aWZpY1Rob3VnaHQgPSBwcm9qZWN0RGF0YS5zY2llbnRpZmljVGhvdWdodFN1bSAvIHByb2plY3REYXRhLmp1ZGdlQ291bnRcbiAgICAgICAgYXZnVGVjaG5pY2FsU2tpbGxzID0gcHJvamVjdERhdGEudGVjaG5pY2FsU2tpbGxzU3VtIC8gcHJvamVjdERhdGEuanVkZ2VDb3VudFxuICAgICAgICBhdmdQcmVzZW50YXRpb24gPSBwcm9qZWN0RGF0YS5wcmVzZW50YXRpb25TdW0gLyBwcm9qZWN0RGF0YS5qdWRnZUNvdW50XG4gICAgICAgIHByb2plY3RBdmdTY29yZSA9IChhdmdDcmVhdGl2aXR5ICsgYXZnU2NpZW50aWZpY1Rob3VnaHQgKyBhdmdUZWNobmljYWxTa2lsbHMgKyBhdmdQcmVzZW50YXRpb24pIC8gNFxuICAgICAgICBjb25zb2xlLmxvZyhcImphZ3V1dVwiLGp1ZGdlU2hlZXROYW1lcyxhdmdDcmVhdGl2aXR5LCBhdmdTY2llbnRpZmljVGhvdWdodCwgYXZnVGVjaG5pY2FsU2tpbGxzLCBhdmdQcmVzZW50YXRpb24sIHByb2plY3RBdmdTY29yZSlcbiAgICAgIH0gZWxzZSBpZiAocHJvamVjdERhdGEuYWJzZW50Q291bnQgPiAwICYmIHByb2plY3REYXRhLmp1ZGdlQ291bnQgPT09IDApIHtcbiAgICAgICAgLy8gQWxsIGp1ZGdlcyBtYXJrZWQgcHJvamVjdCBhYnNlbnQsIHNvIGFsbCBzY29yZXMgYXJlIDBcbiAgICAgICAgYXZnQ3JlYXRpdml0eSA9IDBcbiAgICAgICAgYXZnU2NpZW50aWZpY1Rob3VnaHQgPSAwXG4gICAgICAgIGF2Z1RlY2huaWNhbFNraWxscyA9IDBcbiAgICAgICAgYXZnUHJlc2VudGF0aW9uID0gMFxuICAgICAgICBwcm9qZWN0QXZnU2NvcmUgPSAwXG4gICAgICB9XG4gICAgICAvLyBJZiBubyBqdWRnZXMgc2NvcmVkIHRoZSBwcm9qZWN0IChqdWRnZUNvdW50IGFuZCBhYnNlbnRDb3VudCBhcmUgMCksIGFsbCBhdmVyYWdlcyByZW1haW4gMCAoaW5pdGlhbGl6ZWQpXG5cbiAgICAgIHByb2plY3RzRm9yU2NvcmVUYWIucHVzaCh7XG4gICAgICAgIHByb2plY3RJZDogcElkLFxuICAgICAgICBwcm9qZWN0VGl0bGU6IHByb2plY3REYXRhLnByb2plY3RUaXRsZSxcbiAgICAgICAgdGhlbWU6IHByb2plY3REYXRhLnRoZW1lLFxuICAgICAgICBhdmdDcmVhdGl2aXR5OiBhdmdDcmVhdGl2aXR5LFxuICAgICAgICBhdmdTY2llbnRpZmljVGhvdWdodDogYXZnU2NpZW50aWZpY1Rob3VnaHQsXG4gICAgICAgIGF2Z1RlY2huaWNhbFNraWxsczogYXZnVGVjaG5pY2FsU2tpbGxzLFxuICAgICAgICBhdmdQcmVzZW50YXRpb246IGF2Z1ByZXNlbnRhdGlvbixcbiAgICAgICAgcHJvamVjdEF2Z1Njb3JlOiBwcm9qZWN0QXZnU2NvcmUsXG4gICAgICAgIHN0dWRlbnROYW1lczogcHJvamVjdERhdGEuc3R1ZGVudE5hbWVzLmpvaW4oXCIsIFwiKSwgLy8gSm9pbiBzdHVkZW50IG5hbWVzXG4gICAgICB9KVxuICAgIH1cblxuICAgIC8vIFNvcnQgcHJvamVjdHMgZm9yIHRoZSBTY29yZSB0YWIgYnkgUHJvamVjdCBJRCBmb3IgY29uc2lzdGVudCBvcmRlcmluZ1xuICAgIHByb2plY3RzRm9yU2NvcmVUYWIuc29ydCgoYSwgYikgPT4gYS5wcm9qZWN0SWQubG9jYWxlQ29tcGFyZShiLnByb2plY3RJZCkpXG5cbiAgICBwcm9qZWN0c0ZvclNjb3JlVGFiLmZvckVhY2goKHByb2plY3QpID0+IHtcbiAgICAgIHNjb3JlVGFiUm93cy5wdXNoKFtcbiAgICAgICAgcHJvamVjdC5wcm9qZWN0SWQsXG4gICAgICAgIHByb2plY3QucHJvamVjdFRpdGxlLFxuICAgICAgICBwcm9qZWN0LnRoZW1lLFxuICAgICAgICBwcm9qZWN0LmF2Z0NyZWF0aXZpdHkudG9GaXhlZCgyKSxcbiAgICAgICAgcHJvamVjdC5hdmdTY2llbnRpZmljVGhvdWdodC50b0ZpeGVkKDIpLFxuICAgICAgICBwcm9qZWN0LmF2Z1RlY2huaWNhbFNraWxscy50b0ZpeGVkKDIpLFxuICAgICAgICBwcm9qZWN0LmF2Z1ByZXNlbnRhdGlvbi50b0ZpeGVkKDIpLFxuICAgICAgICBwcm9qZWN0LnByb2plY3RBdmdTY29yZS50b0ZpeGVkKDIpLFxuICAgICAgICBwcm9qZWN0LnN0dWRlbnROYW1lcyxcbiAgICAgIF0pXG4gICAgfSlcbiAgICBjb25zb2xlLmxvZyhgWyR7Y2xhc3NOYW1lfV0gUHJlcGFyZWQgJHtzY29yZVRhYlJvd3MubGVuZ3RoIC0gMX0gcm93cyBmb3IgXCJTY29yZVwiIHRhYiAoZXhjbHVkaW5nIGhlYWRlcikuYClcbiAgICBjb25zb2xlLmxvZyhgWyR7Y2xhc3NOYW1lfV0gRmluYWwgc2NvcmVUYWJSb3dzIGJlZm9yZSB3cml0aW5nOmAsIHNjb3JlVGFiUm93cylcblxuICAgIGNvbnN0IHNjb3JlU2hlZXROYW1lID0gXCJTY29yZVwiXG4gICAgYXdhaXQgdGhpcy5lbnN1cmVTaGVldEV4aXN0cyhjbGFzc1NwcmVhZHNoZWV0SWQsIHNjb3JlU2hlZXROYW1lLCBzY29yZVRhYlJvd3NbMF0pIC8vIFBhc3MgaGVhZGVyIGZvciBjcmVhdGlvblxuXG4gICAgLy8gQ2xlYXIgZXhpc3RpbmcgY29udGVudCBiZWZvcmUgd3JpdGluZyBuZXcgZGF0YSAoZXhjbHVkaW5nIGhlYWRlcilcbiAgICBhd2FpdCB0aGlzLnNoZWV0cy5zcHJlYWRzaGVldHMudmFsdWVzLmNsZWFyKHtcbiAgICAgIHNwcmVhZHNoZWV0SWQ6IGNsYXNzU3ByZWFkc2hlZXRJZCxcbiAgICAgIHJhbmdlOiBgJHtzY29yZVNoZWV0TmFtZX0hQTI6SWAsIC8vIENsZWFyIGZyb20gcm93IDIgb253YXJkcywgdXAgdG8gY29sdW1uIElcbiAgICB9KVxuXG4gICAgLy8gV3JpdGUgbmV3IGRhdGEgKGluY2x1ZGluZyBoZWFkZXIpXG4gICAgaWYgKHNjb3JlVGFiUm93cy5sZW5ndGggPiAxKSB7XG4gICAgICAvLyBPbmx5IHVwZGF0ZSBpZiB0aGVyZSdzIGRhdGEgYmV5b25kIHRoZSBoZWFkZXJcbiAgICAgIGF3YWl0IHRoaXMuc2hlZXRzLnNwcmVhZHNoZWV0cy52YWx1ZXMudXBkYXRlKHtcbiAgICAgICAgc3ByZWFkc2hlZXRJZDogY2xhc3NTcHJlYWRzaGVldElkLFxuICAgICAgICByYW5nZTogYCR7c2NvcmVTaGVldE5hbWV9IUExYCwgLy8gU3RhcnQgZnJvbSBBMSB0byBpbmNsdWRlIGhlYWRlclxuICAgICAgICB2YWx1ZUlucHV0T3B0aW9uOiBcIlVTRVJfRU5URVJFRFwiLFxuICAgICAgICByZXNvdXJjZToge1xuICAgICAgICAgIHZhbHVlczogc2NvcmVUYWJSb3dzLFxuICAgICAgICB9LFxuICAgICAgfSlcbiAgICAgIGNvbnNvbGUubG9nKGDinIUgVXBkYXRlZCBcIlNjb3JlXCIgdGFiIGZvciAke2NsYXNzTmFtZX0gd2l0aCAke3Njb3JlVGFiUm93cy5sZW5ndGggLSAxfSBwcm9qZWN0IGF2ZXJhZ2UgZW50cmllcy5gKVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmxvZyhgWyR7Y2xhc3NOYW1lfV0gTm8gcHJvamVjdCBhdmVyYWdlIHNjb3JlcyB0byB3cml0ZSB0byBcIlNjb3JlXCIgdGFiLmApXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZ2V0VG9wUHJvamVjdHMoY2xhc3NOYW1lOiBzdHJpbmcpOiBQcm9taXNlPFxuICAgIEFycmF5PHtcbiAgICAgIHByb2plY3RJZDogc3RyaW5nXG4gICAgICBwcm9qZWN0VGl0bGU6IHN0cmluZ1xuICAgICAgdGhlbWU6IHN0cmluZ1xuICAgICAgcHJvamVjdEF2Z1Njb3JlOiBudW1iZXJcbiAgICAgIHN0YW5kYXJkOiBzdHJpbmdcbiAgICAgIHJhbms6IG51bWJlclxuICAgICAgc3R1ZGVudE5hbWVzOiBzdHJpbmdcbiAgICB9PlxuICA+IHtcbiAgICBjb25zdCBjbGFzc0NvbmZpZyA9IHRoaXMuZ2V0Q2xhc3NDb25maWcoY2xhc3NOYW1lKVxuICAgIGlmICghY2xhc3NDb25maWcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gY29uZmlndXJhdGlvbiBmb3VuZCBmb3IgY2xhc3M6ICR7Y2xhc3NOYW1lfWApXG4gICAgfVxuXG4gICAgY29uc3Qgc2NvcmVTaGVldE5hbWUgPSBcIlNjb3JlXCJcbiAgICBjb25zdCBzY29yZVJhbmdlID0gYCR7c2NvcmVTaGVldE5hbWV9IUE6SWAgLy8gVXBkYXRlZCByYW5nZSBmb3IgbmV3IFNjb3JlIHRhYiBjb2x1bW5zXG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHRoaXMuZ2V0U2hlZXREYXRhKGNsYXNzQ29uZmlnLmlkLCBzY29yZVJhbmdlKVxuICAgICAgY29uc29sZS5sb2coYFske2NsYXNzTmFtZX1dIFJlYWQgXCJTY29yZVwiIHRhYiBmb3IgdG9wIHByb2plY3RzLiBSb3dzIGZldGNoZWQ6ICR7ZGF0YS52YWx1ZXMubGVuZ3RofS5gKVxuXG4gICAgICBpZiAoIWRhdGEudmFsdWVzIHx8IGRhdGEudmFsdWVzLmxlbmd0aCA8PSAxKSB7XG4gICAgICAgIC8vIE5vIGRhdGEgb3Igb25seSBoZWFkZXJcbiAgICAgICAgY29uc29sZS5sb2coYFske2NsYXNzTmFtZX1dIFwiU2NvcmVcIiB0YWIgaXMgZW1wdHkgb3Igb25seSBoYXMgaGVhZGVyLiBObyBwcm9qZWN0cyB0byByYW5rLmApXG4gICAgICAgIHJldHVybiBbXVxuICAgICAgfVxuXG4gICAgICBjb25zdCBwcm9qZWN0czogQXJyYXk8e1xuICAgICAgICBwcm9qZWN0SWQ6IHN0cmluZ1xuICAgICAgICBwcm9qZWN0VGl0bGU6IHN0cmluZ1xuICAgICAgICB0aGVtZTogc3RyaW5nXG4gICAgICAgIHByb2plY3RBdmdTY29yZTogbnVtYmVyXG4gICAgICAgIHN0dWRlbnROYW1lczogc3RyaW5nXG4gICAgICB9PiA9IFtdXG5cbiAgICAgIGRhdGEudmFsdWVzLnNsaWNlKDEpLmZvckVhY2goKHJvdykgPT4ge1xuICAgICAgICBjb25zdCBwcm9qZWN0SWQgPSByb3dbMF0/LnRyaW0oKSAvLyBQcm9qZWN0IElEIGlzIG5vdyBjb2x1bW4gQVxuICAgICAgICBjb25zdCBwcm9qZWN0VGl0bGUgPSByb3dbMV0/LnRyaW0oKSAvLyBQcm9qZWN0IFRpdGxlIGlzIG5vdyBjb2x1bW4gQlxuICAgICAgICBjb25zdCB0aGVtZSA9IHJvd1syXT8udHJpbSgpIC8vIFRoZW1lIGlzIG5vdyBjb2x1bW4gQ1xuICAgICAgICBjb25zdCBwcm9qZWN0QXZnU2NvcmUgPSBOdW1iZXIucGFyc2VGbG9hdChyb3dbN10pIHx8IDAgLy8gUHJvamVjdCBBdmVyYWdlIFNjb3JlIGlzIG5vdyBjb2x1bW4gSCAoaW5kZXggNylcbiAgICAgICAgY29uc3Qgc3R1ZGVudE5hbWVzID0gcm93WzhdPy50cmltKCkgfHwgXCJcIiAvLyBTdHVkZW50IE5hbWVzIGlzIG5vdyBjb2x1bW4gSSAoaW5kZXggOClcblxuICAgICAgICBpZiAocHJvamVjdElkKSB7XG4gICAgICAgICAgcHJvamVjdHMucHVzaCh7XG4gICAgICAgICAgICBwcm9qZWN0SWQ6IHByb2plY3RJZCxcbiAgICAgICAgICAgIHByb2plY3RUaXRsZTogcHJvamVjdFRpdGxlLFxuICAgICAgICAgICAgdGhlbWU6IHRoZW1lLFxuICAgICAgICAgICAgcHJvamVjdEF2Z1Njb3JlOiBwcm9qZWN0QXZnU2NvcmUsXG4gICAgICAgICAgICBzdHVkZW50TmFtZXM6IHN0dWRlbnROYW1lcyxcbiAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgIGBbJHtjbGFzc05hbWV9XSBTa2lwcGluZyByb3cgaW4gXCJTY29yZVwiIHRhYiBmb3IgdG9wIHByb2plY3RzIGR1ZSB0byBtaXNzaW5nIFByb2plY3QgSUQ6ICR7cm93LmpvaW4oXCIsIFwiKX1gLFxuICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIGNvbnNvbGUubG9nKGBbJHtjbGFzc05hbWV9XSBQYXJzZWQgJHtwcm9qZWN0cy5sZW5ndGh9IHByb2plY3RzIGZyb20gXCJTY29yZVwiIHRhYi5gKVxuXG4gICAgICAvLyBTb3J0IGJ5IHByb2plY3QgYXZlcmFnZSBzY29yZSBkZXNjZW5kaW5nXG4gICAgICBwcm9qZWN0cy5zb3J0KChhLCBiKSA9PiBiLnByb2plY3RBdmdTY29yZSAtIGEucHJvamVjdEF2Z1Njb3JlKVxuICAgICAgY29uc29sZS5sb2coYFske2NsYXNzTmFtZX1dIFByb2plY3RzIHNvcnRlZCBieSBhdmVyYWdlIHNjb3JlLmApXG5cbiAgICAgIGNvbnN0IHRvcFByb2plY3RzOiBBcnJheTx7XG4gICAgICAgIHByb2plY3RJZDogc3RyaW5nXG4gICAgICAgIHByb2plY3RUaXRsZTogc3RyaW5nXG4gICAgICAgIHRoZW1lOiBzdHJpbmdcbiAgICAgICAgcHJvamVjdEF2Z1Njb3JlOiBudW1iZXJcbiAgICAgICAgc3RhbmRhcmQ6IHN0cmluZ1xuICAgICAgICByYW5rOiBudW1iZXJcbiAgICAgICAgc3R1ZGVudE5hbWVzOiBzdHJpbmdcbiAgICAgIH0+ID0gW11cbiAgICAgIGxldCBjdXJyZW50UmFuayA9IDFcbiAgICAgIGxldCBwcm9qZWN0c0FkZGVkID0gMFxuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByb2plY3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHByb2plY3QgPSBwcm9qZWN0c1tpXVxuICAgICAgICBpZiAocHJvamVjdHNBZGRlZCA8IDMpIHtcbiAgICAgICAgICB0b3BQcm9qZWN0cy5wdXNoKHsgLi4ucHJvamVjdCwgc3RhbmRhcmQ6IGNsYXNzTmFtZSwgcmFuazogY3VycmVudFJhbmsgfSlcbiAgICAgICAgICBwcm9qZWN0c0FkZGVkKytcbiAgICAgICAgfSBlbHNlIGlmIChwcm9qZWN0LnByb2plY3RBdmdTY29yZSA9PT0gdG9wUHJvamVjdHNbdG9wUHJvamVjdHMubGVuZ3RoIC0gMV0ucHJvamVjdEF2Z1Njb3JlKSB7XG4gICAgICAgICAgLy8gSGFuZGxlIHRpZXMgZm9yIDNyZCBwbGFjZVxuICAgICAgICAgIHRvcFByb2plY3RzLnB1c2goeyAuLi5wcm9qZWN0LCBzdGFuZGFyZDogY2xhc3NOYW1lLCByYW5rOiBjdXJyZW50UmFuayB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJyZWFrIC8vIFN0b3AgYWZ0ZXIgdG9wIDMgKGFuZCB0aWVzKVxuICAgICAgICB9XG4gICAgICAgIC8vIFVwZGF0ZSByYW5rIGZvciBuZXh0IGRpc3RpbmN0IHNjb3JlLCBvbmx5IGlmIGN1cnJlbnQgcHJvamVjdCdzIHNjb3JlIGlzIGRpZmZlcmVudCBmcm9tIHRoZSBsYXN0IGFkZGVkIHByb2plY3QncyBzY29yZVxuICAgICAgICBpZiAoaSA8IHByb2plY3RzLmxlbmd0aCAtIDEgJiYgcHJvamVjdHNbaSArIDFdLnByb2plY3RBdmdTY29yZSA8IHByb2plY3QucHJvamVjdEF2Z1Njb3JlKSB7XG4gICAgICAgICAgY3VycmVudFJhbmsgPSB0b3BQcm9qZWN0cy5sZW5ndGggKyAxXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnNvbGUubG9nKGBbJHtjbGFzc05hbWV9XSBJZGVudGlmaWVkICR7dG9wUHJvamVjdHMubGVuZ3RofSB0b3AgcHJvamVjdHMuYClcbiAgICAgIHJldHVybiB0b3BQcm9qZWN0c1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGBFcnJvciBnZXR0aW5nIHRvcCBwcm9qZWN0cyBmb3IgJHtjbGFzc05hbWV9OmAsIGVycm9yKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gZ2V0IHRvcCBwcm9qZWN0cyBmb3IgJHtjbGFzc05hbWV9LmApXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgdXBkYXRlQWRtaW5TdW1tYXJ5KFxuICAgIHN1bW1hcnlEYXRhOiBBcnJheTx7XG4gICAgICBzdGFuZGFyZDogc3RyaW5nXG4gICAgICByYW5rOiBudW1iZXJcbiAgICAgIHByb2plY3RJZDogc3RyaW5nXG4gICAgICBwcm9qZWN0VGl0bGU6IHN0cmluZ1xuICAgICAgdGhlbWU6IHN0cmluZ1xuICAgICAgcHJvamVjdEF2Z1Njb3JlOiBudW1iZXJcbiAgICAgIHN0dWRlbnROYW1lczogc3RyaW5nXG4gICAgfT4sXG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IGFkbWluTWFzdGVyU2hlZXRJZCA9IFNQUkVBRFNIRUVUX0NPTkZJRy5BRE1JTl9NQVNURVIuaWRcbiAgICBjb25zdCBzdW1tYXJ5U2hlZXROYW1lID0gXCJTdW1tYXJ5XCJcbiAgICBjb25zdCBzdW1tYXJ5SGVhZGVyID0gW1xuICAgICAgXCJTdGFuZGFyZFwiLFxuICAgICAgXCJSYW5rXCIsXG4gICAgICBcIlByb2plY3QgSURcIixcbiAgICAgIFwiUHJvamVjdCBUaXRsZVwiLFxuICAgICAgXCJUaGVtZVwiLFxuICAgICAgXCJQcm9qZWN0IEF2ZyBTY29yZVwiLFxuICAgICAgXCJTdHVkZW50IE5hbWVzXCIsXG4gICAgXSAvLyBBZGRlZCBTdHVkZW50IE5hbWVzXG5cbiAgICBhd2FpdCB0aGlzLmVuc3VyZVNoZWV0RXhpc3RzKGFkbWluTWFzdGVyU2hlZXRJZCwgc3VtbWFyeVNoZWV0TmFtZSwgc3VtbWFyeUhlYWRlcilcblxuICAgIC8vIENsZWFyIGV4aXN0aW5nIGNvbnRlbnQgaW4gU3VtbWFyeSB0YWIgKGV4Y2x1ZGluZyBoZWFkZXIpXG4gICAgYXdhaXQgdGhpcy5zaGVldHMuc3ByZWFkc2hlZXRzLnZhbHVlcy5jbGVhcih7XG4gICAgICBzcHJlYWRzaGVldElkOiBhZG1pbk1hc3RlclNoZWV0SWQsXG4gICAgICByYW5nZTogYCR7c3VtbWFyeVNoZWV0TmFtZX0hQTI6R2AsIC8vIFVwZGF0ZWQgcmFuZ2UgZm9yIGNsZWFyaW5nIChBLUcgZm9yIDcgY29sdW1ucylcbiAgICB9KVxuXG4gICAgaWYgKHN1bW1hcnlEYXRhLmxlbmd0aCA9PT0gMCkge1xuICAgICAgY29uc29sZS5sb2coXCJObyBzdW1tYXJ5IGRhdGEgdG8gYXBwZW5kIHRvIEFkbWluIE1hc3RlciBTaGVldC5cIilcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGNvbnN0IHJvd3NUb0FwcGVuZCA9IHN1bW1hcnlEYXRhLm1hcCgoZGF0YSkgPT4gW1xuICAgICAgZGF0YS5zdGFuZGFyZCxcbiAgICAgIGRhdGEucmFuay50b1N0cmluZygpLFxuICAgICAgZGF0YS5wcm9qZWN0SWQsXG4gICAgICBkYXRhLnByb2plY3RUaXRsZSxcbiAgICAgIGRhdGEudGhlbWUsXG4gICAgICBkYXRhLnByb2plY3RBdmdTY29yZS50b0ZpeGVkKDIpLFxuICAgICAgZGF0YS5zdHVkZW50TmFtZXMsIC8vIEluY2x1ZGUgc3R1ZGVudCBuYW1lc1xuICAgIF0pXG5cbiAgICBhd2FpdCB0aGlzLnNoZWV0cy5zcHJlYWRzaGVldHMudmFsdWVzLmFwcGVuZCh7XG4gICAgICBzcHJlYWRzaGVldElkOiBhZG1pbk1hc3RlclNoZWV0SWQsXG4gICAgICByYW5nZTogYCR7c3VtbWFyeVNoZWV0TmFtZX0hQTJgLCAvLyBBcHBlbmQgc3RhcnRpbmcgZnJvbSBBMiAoYWZ0ZXIgaGVhZGVyKVxuICAgICAgdmFsdWVJbnB1dE9wdGlvbjogXCJVU0VSX0VOVEVSRURcIixcbiAgICAgIHJlc291cmNlOiB7XG4gICAgICAgIHZhbHVlczogcm93c1RvQXBwZW5kLFxuICAgICAgfSxcbiAgICB9KVxuICAgIGNvbnNvbGUubG9nKGDinIUgQXBwZW5kZWQgJHtyb3dzVG9BcHBlbmQubGVuZ3RofSByb3dzIHRvIFwiU3VtbWFyeVwiIHRhYiBpbiBBZG1pbiBNYXN0ZXIgU2hlZXQuYClcbiAgfVxuXG4gIGdldENsYXNzQ29uZmlnKGNsYXNzTmFtZTogc3RyaW5nKTogQ2xhc3NDb25maWcgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiBTUFJFQURTSEVFVF9DT05GSUcuQ0xBU1NFU1tjbGFzc05hbWUgYXMga2V5b2YgdHlwZW9mIFNQUkVBRFNIRUVUX0NPTkZJRy5DTEFTU0VTXVxuICB9XG5cbiAgZ2V0U3ByZWFkc2hlZXRJZChjbGFzc05hbWU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgY29uc3QgY2xhc3NDb25maWcgPSB0aGlzLmdldENsYXNzQ29uZmlnKGNsYXNzTmFtZSlcbiAgICByZXR1cm4gY2xhc3NDb25maWc/LmlkIHx8IFwiXCJcbiAgfVxuXG4gIC8vIE5ldyBmdW5jdGlvbiB0byB1cGRhdGUgYSBjbGFzcydzIHNwcmVhZHNoZWV0IElEXG4gIHVwZGF0ZUNsYXNzU3ByZWFkc2hlZXRJZChjbGFzc05hbWU6IHN0cmluZywgbmV3SWQ6IHN0cmluZyk6IHZvaWQge1xuICAgIGlmIChTUFJFQURTSEVFVF9DT05GSUcuQ0xBU1NFU1tjbGFzc05hbWUgYXMga2V5b2YgdHlwZW9mIFNQUkVBRFNIRUVUX0NPTkZJRy5DTEFTU0VTXSkge1xuICAgICAgLy8gVXBkYXRlIGluLW1lbW9yeSBjb25maWdcbiAgICAgIFNQUkVBRFNIRUVUX0NPTkZJRyA9IHtcbiAgICAgICAgLi4uU1BSRUFEU0hFRVRfQ09ORklHLFxuICAgICAgICBDTEFTU0VTOiB7XG4gICAgICAgICAgLi4uU1BSRUFEU0hFRVRfQ09ORklHLkNMQVNTRVMsXG4gICAgICAgICAgW2NsYXNzTmFtZV06IHtcbiAgICAgICAgICAgIC4uLlNQUkVBRFNIRUVUX0NPTkZJRy5DTEFTU0VTW2NsYXNzTmFtZSBhcyBrZXlvZiB0eXBlb2YgU1BSRUFEU0hFRVRfQ09ORklHLkNMQVNTRVNdLFxuICAgICAgICAgICAgaWQ6IG5ld0lkLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9XG4gICAgICAvLyBQZXJzaXN0IHRvIGZpbGVcbiAgICAgIGNvbnN0IGlkcyA9IGxvYWRDbGFzc1NoZWV0SWRzKClcbiAgICAgIGlkc1tjbGFzc05hbWVdID0gbmV3SWRcbiAgICAgIHNhdmVDbGFzc1NoZWV0SWRzKGlkcylcbiAgICAgIGNvbnNvbGUubG9nKGBbQmFja2VuZCBTaW11bGF0aW9uXSBVcGRhdGVkIFNQUkVBRFNIRUVUX0NPTkZJRyBmb3IgJHtjbGFzc05hbWV9IHRvIElEOiAke25ld0lkfSBhbmQgcGVyc2lzdGVkIHRvIGZpbGVgKVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLndhcm4oYFtCYWNrZW5kIFNpbXVsYXRpb25dIENsYXNzICR7Y2xhc3NOYW1lfSBub3QgZm91bmQgaW4gU1BSRUFEU0hFRVRfQ09ORklHLmApXG4gICAgfVxuICB9XG59XG5cbi8vIEV4cG9ydCBzaW5nbGV0b24gaW5zdGFuY2VcbmV4cG9ydCBjb25zdCBnb29nbGVTaGVldHNTZXJ2aWNlID0gbmV3IEdvb2dsZVNoZWV0c1NlcnZpY2UoKVxuXG5jb25zdCBzaGVldFRpdGxlc0NhY2hlOiB7IFtzcHJlYWRzaGVldElkOiBzdHJpbmddOiBzdHJpbmdbXSB9ID0ge307XG5cbmFzeW5jIGZ1bmN0aW9uIGdldEFsbFNoZWV0VGl0bGVzQ2FjaGVkKHNwcmVhZHNoZWV0SWQ6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nW10+IHtcbiAgaWYgKHNoZWV0VGl0bGVzQ2FjaGVbc3ByZWFkc2hlZXRJZF0pIHtcbiAgICByZXR1cm4gc2hlZXRUaXRsZXNDYWNoZVtzcHJlYWRzaGVldElkXTtcbiAgfVxuICBjb25zdCB0aXRsZXMgPSBhd2FpdCBnb29nbGVTaGVldHNTZXJ2aWNlLmdldEFsbFNoZWV0VGl0bGVzKHNwcmVhZHNoZWV0SWQpO1xuICBzaGVldFRpdGxlc0NhY2hlW3NwcmVhZHNoZWV0SWRdID0gdGl0bGVzO1xuICByZXR1cm4gdGl0bGVzO1xufVxuIl0sIm5hbWVzIjpbIkdvb2dsZUF1dGgiLCJnb29nbGUiLCJmcyIsInBhdGgiLCJvcyIsIkNMQVNTX1NIRUVUX0lEU19QQVRIIiwicmVzb2x2ZSIsInByb2Nlc3MiLCJjd2QiLCJsb2FkQ2xhc3NTaGVldElkcyIsInJhdyIsInJlYWRGaWxlU3luYyIsIkpTT04iLCJwYXJzZSIsInNhdmVDbGFzc1NoZWV0SWRzIiwiaWRzIiwid3JpdGVGaWxlU3luYyIsInN0cmluZ2lmeSIsIkdPT0dMRV9TSEVFVFNfQ09ORklHIiwic2NvcGVzIiwicGVyc2lzdGVkSWRzIiwiU1BSRUFEU0hFRVRfQ09ORklHIiwiQ1JFREVOVElBTFMiLCJpZCIsImVudiIsIkNSRURFTlRJQUxTX1NQUkVBRFNIRUVUX0lEIiwicmFuZ2UiLCJBRE1JTl9NQVNURVIiLCJBRE1JTl9NQVNURVJfU1BSRUFEU0hFRVRfSUQiLCJDTEFTU0VTIiwiYmFzZVNoZWV0IiwiR29vZ2xlU2hlZXRzU2VydmljZSIsImNvbnN0cnVjdG9yIiwiYmFzZTY0S2V5IiwiR09PR0xFX1NFUlZJQ0VfQUNDT1VOVF9LRVlfQkFTRTY0IiwiRXJyb3IiLCJrZXlEYXRhIiwiQnVmZmVyIiwiZnJvbSIsInRvU3RyaW5nIiwidG1wRGlyIiwidG1wZGlyIiwia2V5UGF0aCIsImpvaW4iLCJhdXRoIiwia2V5RmlsZSIsInNoZWV0cyIsInZlcnNpb24iLCJjb25zb2xlIiwibG9nIiwiZXJyIiwiZXJyb3IiLCJnZXRTaGVldERhdGEiLCJzcHJlYWRzaGVldElkIiwicmVzcG9uc2UiLCJzcHJlYWRzaGVldHMiLCJ2YWx1ZXMiLCJnZXQiLCJkYXRhIiwiYmF0Y2hHZXRTaGVldERhdGEiLCJyYW5nZXMiLCJiYXRjaEdldCIsInJlc3VsdCIsInZhbHVlUmFuZ2VzIiwiZm9yRWFjaCIsInZhbHVlUmFuZ2UiLCJnZXRDcmVkZW50aWFscyIsImxlbmd0aCIsInNsaWNlIiwibWFwIiwicm93IiwidXNlcm5hbWUiLCJwYXNzd29yZCIsInJvbGUiLCJmaWx0ZXIiLCJjcmVkIiwiZ2V0UHJvamVjdElkcyIsImNsYXNzTmFtZSIsImNsYXNzQ29uZmlnIiwiZ2V0Q2xhc3NDb25maWciLCJwcm9qZWN0SWRzIiwidHJpbSIsIlNldCIsImdldFN0dWRlbnRzQnlQcm9qZWN0SWQiLCJwcm9qZWN0SWQiLCJzdHVkZW50cyIsInNubyIsInN0dWRlbnROYW1lIiwiZ3JhZGUiLCJwcm9qZWN0VGl0bGUiLCJ0aGVtZSIsInN0dWRlbnQiLCJnZXRKdWRnZVNjb3JlcyIsImp1ZGdlTmFtZSIsImp1ZGdlU2hlZXROYW1lIiwianVkZ2VSYW5nZSIsInNjb3JlcyIsImNyZWF0aXZpdHkiLCJOdW1iZXIiLCJwYXJzZUZsb2F0Iiwic2NpZW50aWZpY1Rob3VnaHQiLCJ0ZWNobmljYWxTa2lsbHMiLCJwcmVzZW50YXRpb24iLCJzdGF0dXMiLCJ0aGVtZUZpdCIsInNjb3JlIiwic2F2ZUp1ZGdlU2NvcmVzIiwianVkZ2VIZWFkZXJSb3ciLCJlbnN1cmVTaGVldEV4aXN0cyIsIm5ld1Jvd3MiLCJhcHBlbmQiLCJ2YWx1ZUlucHV0T3B0aW9uIiwicmVzb3VyY2UiLCJnZXRFeGlzdGluZ0p1ZGdlRGF0YSIsInNoZWV0TmFtZSIsImhlYWRlclJvdyIsInNwcmVhZHNoZWV0IiwiZmllbGRzIiwic2hlZXRFeGlzdHMiLCJzb21lIiwic2hlZXQiLCJwcm9wZXJ0aWVzIiwidGl0bGUiLCJiYXRjaFVwZGF0ZSIsInJlcXVlc3RzIiwiYWRkU2hlZXQiLCJnZXRBbGxTaGVldFRpdGxlcyIsImdldEFsbEp1ZGdlU2hlZXROYW1lcyIsImNsYXNzU3ByZWFkc2hlZXRJZCIsImFsbFNoZWV0VGl0bGVzIiwic3RhcnRzV2l0aCIsImdldFByb2plY3REZXRhaWxzTWFwIiwicHJvamVjdE1hcCIsIk1hcCIsImhhcyIsInNldCIsInN0dWRlbnROYW1lcyIsImFkZCIsInByb2Nlc3NDbGFzc1Njb3JlcyIsInByb2plY3REZXRhaWxzTWFwIiwic2l6ZSIsImp1ZGdlU2hlZXROYW1lcyIsImxhdGVzdFByb2plY3RTY29yZXNCeUp1ZGdlIiwianVkZ2VSYW5nZXMiLCJiYXRjaERhdGEiLCJyZXBsYWNlIiwic2NvcmVzRm9ySnVkZ2UiLCJwSWQiLCJwcm9qZWN0QWdncmVnYXRlZFNjb3JlcyIsImRldGFpbHMiLCJlbnRyaWVzIiwiY3JlYXRpdml0eVN1bSIsInNjaWVudGlmaWNUaG91Z2h0U3VtIiwidGVjaG5pY2FsU2tpbGxzU3VtIiwicHJlc2VudGF0aW9uU3VtIiwianVkZ2VDb3VudCIsImFic2VudENvdW50IiwiQXJyYXkiLCJzb3J0IiwianVkZ2VTY29yZXNNYXAiLCJrZXlzIiwiZmlyc3RTY29yZSIsIndhcm4iLCJzY29yZVRhYlJvd3MiLCJwdXNoIiwicHJvamVjdHNGb3JTY29yZVRhYiIsInByb2plY3REYXRhIiwiYXZnQ3JlYXRpdml0eSIsImF2Z1NjaWVudGlmaWNUaG91Z2h0IiwiYXZnVGVjaG5pY2FsU2tpbGxzIiwiYXZnUHJlc2VudGF0aW9uIiwicHJvamVjdEF2Z1Njb3JlIiwiYSIsImIiLCJsb2NhbGVDb21wYXJlIiwicHJvamVjdCIsInRvRml4ZWQiLCJzY29yZVNoZWV0TmFtZSIsImNsZWFyIiwidXBkYXRlIiwiZ2V0VG9wUHJvamVjdHMiLCJzY29yZVJhbmdlIiwicHJvamVjdHMiLCJ0b3BQcm9qZWN0cyIsImN1cnJlbnRSYW5rIiwicHJvamVjdHNBZGRlZCIsImkiLCJzdGFuZGFyZCIsInJhbmsiLCJ1cGRhdGVBZG1pblN1bW1hcnkiLCJzdW1tYXJ5RGF0YSIsImFkbWluTWFzdGVyU2hlZXRJZCIsInN1bW1hcnlTaGVldE5hbWUiLCJzdW1tYXJ5SGVhZGVyIiwicm93c1RvQXBwZW5kIiwiZ2V0U3ByZWFkc2hlZXRJZCIsInVwZGF0ZUNsYXNzU3ByZWFkc2hlZXRJZCIsIm5ld0lkIiwiZ29vZ2xlU2hlZXRzU2VydmljZSIsInNoZWV0VGl0bGVzQ2FjaGUiLCJnZXRBbGxTaGVldFRpdGxlc0NhY2hlZCIsInRpdGxlcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./lib/google-sheets.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/googleapis","vendor-chunks/google-auth-library","vendor-chunks/bignumber.js","vendor-chunks/googleapis-common","vendor-chunks/gaxios","vendor-chunks/qs","vendor-chunks/json-bigint","vendor-chunks/gtoken","vendor-chunks/google-logging-utils","vendor-chunks/gcp-metadata","vendor-chunks/object-inspect","vendor-chunks/get-intrinsic","vendor-chunks/jws","vendor-chunks/jwa","vendor-chunks/url-template","vendor-chunks/ecdsa-sig-formatter","vendor-chunks/base64-js","vendor-chunks/side-channel-list","vendor-chunks/extend","vendor-chunks/side-channel-weakmap","vendor-chunks/has-symbols","vendor-chunks/function-bind","vendor-chunks/side-channel-map","vendor-chunks/safe-buffer","vendor-chunks/side-channel","vendor-chunks/get-proto","vendor-chunks/call-bind-apply-helpers","vendor-chunks/buffer-equal-constant-time","vendor-chunks/dunder-proto","vendor-chunks/math-intrinsics","vendor-chunks/call-bound","vendor-chunks/es-errors","vendor-chunks/gopd","vendor-chunks/es-define-property","vendor-chunks/hasown","vendor-chunks/es-object-atoms"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fadmin%2Fsummary%2Froute&page=%2Fapi%2Fadmin%2Fsummary%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fadmin%2Fsummary%2Froute.ts&appDir=C%3A%5CUsers%5Carunm%5CDownloads%5Cjudge-dashboard-nextjs-v29-judgePanelv1%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Carunm%5CDownloads%5Cjudge-dashboard-nextjs-v29-judgePanelv1&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();